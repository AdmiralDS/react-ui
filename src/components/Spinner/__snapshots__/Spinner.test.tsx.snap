// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Spinner should render component with inverse color 1`] = `
{
  "asFragment": [Function],
  "baseElement": .c1 {
  animation: cilQsd 1s linear infinite;
  width: 100%;
  height: 100%;
}

.c1 path {
  fill: var(--admiral-color-Special_StaticWhite, #FFFFFF);
}

.c0 {
  position: relative;
  container-type: inline-size;
  width: 24px;
  height: 24px;
}

<body>
    <div>
      <div
        aria-live="assertive"
        class="c0"
        role="alert"
      >
        <div
          class="c1"
        />
      </div>
    </div>
  </body>,
  "container": .c1 {
  animation: cilQsd 1s linear infinite;
  width: 100%;
  height: 100%;
}

.c1 path {
  fill: var(--admiral-color-Special_StaticWhite, #FFFFFF);
}

.c0 {
  position: relative;
  container-type: inline-size;
  width: 24px;
  height: 24px;
}

<div>
    <div
      aria-live="assertive"
      class="c0"
      role="alert"
    >
      <div
        class="c1"
      />
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Spinner should render component with small dimension 1`] = `
{
  "asFragment": [Function],
  "baseElement": .c1 {
  animation: cilQsd 1s linear infinite;
  width: 100%;
  height: 100%;
}

.c1 path {
  fill: var(--admiral-color-Primary_Primary60Main, #0062FF);
}

.c0 {
  position: relative;
  container-type: inline-size;
  width: 16px;
  height: 16px;
}

<body>
    <div>
      <div
        aria-live="assertive"
        class="c0"
        role="alert"
      >
        <div
          class="c1"
        />
      </div>
    </div>
  </body>,
  "container": .c1 {
  animation: cilQsd 1s linear infinite;
  width: 100%;
  height: 100%;
}

.c1 path {
  fill: var(--admiral-color-Primary_Primary60Main, #0062FF);
}

.c0 {
  position: relative;
  container-type: inline-size;
  width: 16px;
  height: 16px;
}

<div>
    <div
      aria-live="assertive"
      class="c0"
      role="alert"
    >
      <div
        class="c1"
      />
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Spinner should render default component 1`] = `
{
  "asFragment": [Function],
  "baseElement": .c1 {
  animation: cilQsd 1s linear infinite;
  width: 100%;
  height: 100%;
}

.c1 path {
  fill: var(--admiral-color-Primary_Primary60Main, #0062FF);
}

.c0 {
  position: relative;
  container-type: inline-size;
  width: 24px;
  height: 24px;
}

<body>
    <div>
      <div
        aria-live="assertive"
        class="c0"
        role="alert"
      >
        <div
          class="c1"
        />
      </div>
    </div>
  </body>,
  "container": .c1 {
  animation: cilQsd 1s linear infinite;
  width: 100%;
  height: 100%;
}

.c1 path {
  fill: var(--admiral-color-Primary_Primary60Main, #0062FF);
}

.c0 {
  position: relative;
  container-type: inline-size;
  width: 24px;
  height: 24px;
}

<div>
    <div
      aria-live="assertive"
      class="c0"
      role="alert"
    >
      <div
        class="c1"
      />
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
