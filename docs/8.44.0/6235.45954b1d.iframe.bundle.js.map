{"version":3,"file":"6235.45954b1d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AAAA;AAiBA;AAAA;AAsFA","sources":["webpack://@admiral-ds/react-ui/./src/components/Chips/style.ts"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { typography } from '#src/components/Typography';\nimport type { ChipAppearance, ChipDimension } from '#src/components/Chips';\nimport { Badge } from '#src/components/Badge';\nimport type { IconPlacementAppearance, IconPlacementDimension } from '#src/components/IconPlacement';\nimport { CloseIconPlacementButton } from '#src/components/IconPlacement';\n\nconst heights = css<{ $dimension: ChipDimension }>`\n  height: ${({ $dimension }) => {\n    switch ($dimension) {\n      case 'm':\n        return '32px';\n      case 's':\n        return '24px';\n      default:\n        return '24px';\n    }\n  }};\n`;\n\nconst widths = css<{ $dimension: ChipDimension }>`\n  width: ${({ $dimension }) => {\n    switch ($dimension) {\n      case 'm':\n        return '32px';\n      case 's':\n        return '24px';\n      default:\n        return '24px';\n    }\n  }};\n`;\n\nconst heightIcons = css<{ $dimension: ChipDimension }>`\n  height: ${({ $dimension }) => {\n    switch ($dimension) {\n      case 'm':\n        return '20px';\n      case 's':\n        return '16px';\n      default:\n        return '16px';\n    }\n  }};\n`;\n\nconst heightText = css<{ $dimension: ChipDimension }>`\n  height: ${({ $dimension }) => {\n    switch ($dimension) {\n      case 'm':\n        return '20px';\n      case 's':\n        return '16px';\n      default:\n        return '16px';\n    }\n  }};\n`;\n\nconst widthIcons = css<{ $dimension: ChipDimension }>`\n  width: ${({ $dimension }) => {\n    switch ($dimension) {\n      case 'm':\n        return '20px';\n      case 's':\n        return '16px';\n      default:\n        return '16px';\n    }\n  }};\n`;\n\nconst filledPaddings = css<{ $dimension: ChipDimension }>`\n  padding: ${({ $dimension }) => {\n    switch ($dimension) {\n      case 'm':\n        return '6px 12px';\n      case 's':\n        return '4px 8px';\n      default:\n        return '4px 8px';\n    }\n  }};\n`;\nconst outlinedPaddings = css<{ $dimension: ChipDimension }>`\n  padding: ${({ $dimension }) => {\n    switch ($dimension) {\n      case 'm':\n        return '5px 11px';\n      case 's':\n        return '3px 7px';\n      default:\n        return '3px 7px';\n    }\n  }};\n`;\nconst paddings = css<{ $dimension: ChipDimension; $appearance?: ChipAppearance }>`\n  ${({ $appearance }) => ($appearance === 'filled' ? filledPaddings : outlinedPaddings)}\n`;\n\nconst chipTypographyHover = css<{\n  $dimension: ChipDimension;\n  $disabled?: boolean;\n  $selected?: boolean;\n  $appearance?: ChipAppearance;\n}>`\n  &:hover {\n    color: ${({ theme, $appearance, $selected }) => {\n      if ($selected) {\n        return `var(--admiral-color-Special_StaticWhite, ${theme.color['Special/Static White']})`;\n      }\n\n      if ($appearance === 'filled' && !$selected) {\n        return `var(--admiral-color-Neutral_Neutral90, ${theme.color['Neutral/Neutral 90']})`;\n      } else {\n        return `var(--admiral-color-Primary_Primary60Main, ${theme.color['Primary/Primary 60 Main']})`;\n      }\n    }};\n  }\n`;\n\nconst chipTypography = css<{\n  $dimension: ChipDimension;\n  $disabled?: boolean;\n  $selected?: boolean;\n  $appearance?: ChipAppearance;\n}>`\n  ${({ $dimension }) => ($dimension === 's' ? typography['Caption/Caption 1'] : typography['Body/Body 2 Long'])}\n  color: ${({ theme, $appearance, $disabled, $selected }) => {\n    if ($disabled && !$selected) {\n      return `var(--admiral-color-Neutral_Neutral30, ${theme.color['Neutral/Neutral 30']})`;\n    }\n\n    if ($selected || ($selected && $disabled)) {\n      return `var(--admiral-color-Special_StaticWhite, ${theme.color['Special/Static White']})`;\n    }\n\n    return $appearance === 'filled'\n      ? `var(--admiral-color-Neutral_Neutral90, ${theme.color['Neutral/Neutral 90']})`\n      : `var(--admiral-color-Primary_Primary60Main, ${theme.color['Primary/Primary 60 Main']})`;\n  }};\n\n  ${($disabled) => !$disabled && chipTypographyHover}\n`;\n\nconst actionsMixin = css<{\n  $selected?: boolean;\n  $appearance?: ChipAppearance;\n  $withCloseIcon?: boolean;\n}>`\n  &:hover {\n    ${({ theme, $appearance, $selected, $withCloseIcon }) => {\n      if ($selected) {\n        return `background-color: var(--admiral-color-Primary_Primary70, ${theme.color['Primary/Primary 70']});`;\n      }\n      if ($appearance === 'filled') {\n        return `background-color: var(--admiral-color-Opacity_Neutral12, ${theme.color['Opacity/Neutral 12']});`;\n      } else if (!$withCloseIcon) {\n        return `background-color: var(--admiral-color-Opacity_Hover, ${theme.color['Opacity/Hover']});`;\n      }\n    }};\n    ${(p) =>\n      p.$selected &&\n      `\n      border-color: var(--admiral-color-Primary_Primary70, ${p.theme.color['Primary/Primary 70']});\n    `}\n  }\n  &:active {\n    ${({ theme, $appearance, $selected, $withCloseIcon }) => {\n      if ($selected) {\n        return `background-color: var(--admiral-color-Primary_Primary80, ${theme.color['Primary/Primary 80']});`;\n      }\n      if ($appearance === 'filled') {\n        return `background-color: var(--admiral-color-Opacity_Neutral16, ${theme.color['Opacity/Neutral 16']});`;\n      } else if (!$withCloseIcon) {\n        return `background-color: var(--admiral-color-Opacity_Press, ${theme.color['Opacity/Press']});`;\n      }\n    }};\n    ${(p) =>\n      p.$selected &&\n      `\n      border-color: var(--admiral-color-Primary_Primary80, ${p.theme.color['Primary/Primary 80']});\n    `}\n  }\n`;\n\nconst colorsBorderAndBackground = css<{\n  $dimension: ChipDimension;\n  $disabled?: boolean;\n  $selected?: boolean;\n  $appearance?: ChipAppearance;\n  $withCloseIcon?: boolean;\n  $clickable: boolean;\n}>`\n  background-color: ${({ theme, $appearance, $selected, $disabled }) => {\n    if ($selected && !$disabled) {\n      return `var(--admiral-color-Primary_Primary60Main, ${theme.color['Primary/Primary 60 Main']})`;\n    }\n    if ($selected && $disabled) {\n      return `var(--admiral-color-Neutral_Neutral30, ${theme.color['Neutral/Neutral 30']})`;\n    }\n    return $appearance === 'filled'\n      ? `var(--admiral-color-Opacity_Neutral8, ${theme.color['Opacity/Neutral 8']})`\n      : 'transparent';\n  }};\n\n  border: ${({ theme, $appearance, $disabled }) => {\n    if ($appearance === 'filled') return 'none';\n    if ($disabled) {\n      return `1px solid var(--admiral-color-Neutral_Neutral30, ${theme.color['Neutral/Neutral 30']})`;\n    } else {\n      return `1px solid var(--admiral-color-Primary_Primary60Main, ${theme.color['Primary/Primary 60 Main']})`;\n    }\n  }};\n\n  border-radius: 16px;\n\n  ${(p) => p.$clickable && !p.$disabled && actionsMixin}\n\n  &:focus-visible {\n    outline: 0;\n\n    &:before {\n      border: 2px solid var(--admiral-color-Primary_Primary60Main, ${(p) => p.theme.color['Primary/Primary 60 Main']});\n      border-radius: 20px;\n      content: '';\n      display: block;\n      position: absolute;\n      top: -5px;\n      left: -5px;\n      right: -5px;\n      bottom: -5px;\n      pointer-events: none;\n    }\n  }\n`;\nexport const ChipComponentStyled = styled.div<{\n  $disabled?: boolean;\n  $dimension: ChipDimension;\n  $appearance?: ChipAppearance;\n  $selected?: boolean;\n  $defaultChip?: boolean;\n  $withCloseIcon?: boolean;\n  $withBadge?: boolean;\n  $withTooltip?: boolean;\n  $clickable: boolean;\n}>`\n  display: inline-flex;\n  align-items: center;\n  box-sizing: border-box;\n  position: relative;\n  max-width: 190px;\n  user-select: none;\n  & > * {\n    pointer-events: ${({ $disabled }) => ($disabled ? 'none' : 'auto')};\n  }\n  cursor: ${({ $defaultChip, $disabled, $withTooltip }) =>\n    ($defaultChip || $withTooltip) && !$disabled ? 'pointer' : $disabled ? 'not-allowed' : 'default'};\n  ${colorsBorderAndBackground}\n  ${heights}\n  ${(p) =>\n    p.$withCloseIcon\n      ? `padding-inline-start: ${(p.$dimension === 's' ? 8 : 12) - (p.$appearance === 'outlined' ? 1 : 0)}px;`\n      : paddings}\n  ${(p) =>\n    p.$withBadge && !p.$withCloseIcon\n      ? `padding-inline-end: ${(p.$dimension === 's' ? 4 : 6) - (p.$appearance === 'outlined' ? 1 : 0)}px;\n         padding-inline-start: ${(p.$dimension === 's' ? 8 : 12) - (p.$appearance === 'outlined' ? 1 : 0)}px;`\n      : ''}\n  ${chipTypography}\n`;\n\nconst closeIconWrapperStyle = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ChipContentWrapperStyled = styled.div<{\n  $appearance?: ChipAppearance;\n  $disabled?: boolean;\n  $selected?: boolean;\n  $dimension: ChipDimension;\n  $withCloseIcon?: boolean;\n}>`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  display: inline-flex;\n\n  ${(p) => p.$withCloseIcon && closeIconWrapperStyle}\n  ${(p) => (p.$withCloseIcon ? heights : heightText)}\n  & svg {\n    ${heightIcons}\n    ${widthIcons}\n    & *[fill^='#'] {\n      fill: ${({ theme, $appearance, $disabled, $selected }) => {\n        if ($selected) {\n          return `var(--admiral-color-Special_StaticWhite, ${theme.color['Special/Static White']})`;\n        }\n        return $disabled\n          ? `var(--admiral-color-Neutral_Neutral30, ${theme.color['Neutral/Neutral 30']})`\n          : $appearance === 'filled'\n            ? `var(--admiral-color-Neutral_Neutral50, ${theme.color['Neutral/Neutral 50']})`\n            : `var(--admiral-color-Primary_Primary60Main, ${theme.color['Primary/Primary 60 Main']})`;\n      }};\n    }\n  }\n`;\nexport const ChipChildrenWrapperStyled = styled.div`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: inline-block;\n`;\nexport const IconStartWrapperStyled = styled.div`\n  display: inline-block;\n  margin-inline-end: 8px;\n`;\nexport const IconEndWrapperStyled = styled.div<{ $dimension: ChipDimension; $withCloseIcon?: boolean }>`\n  display: inline-block;\n  margin-inline-start: ${(p) => (p.$withCloseIcon ? '2px' : '8px')};\n`;\nexport const IconWrapperStyled = styled.div<{\n  $dimension: ChipDimension;\n  $withCloseIcon?: boolean;\n}>`\n  ${(p) => p.$withCloseIcon && closeIconWrapperStyle}\n  ${(p) => (p.$withCloseIcon ? heights : heightIcons)}\n  ${(p) => (p.$withCloseIcon ? widths : widthIcons)}\n  & > svg {\n    ${heightIcons}\n    ${widthIcons}\n  }\n`;\n\nexport const StyledBadge = styled(Badge)<{ dimension: ChipDimension }>`\n  margin-inline-start: ${({ dimension }) => (dimension === 's' ? '6px' : '8px')};\n`;\n\nexport const CloseIconButton = styled(CloseIconPlacementButton)<{\n  dimension: IconPlacementDimension;\n  appearance: IconPlacementAppearance;\n}>`\n  //дополнительный отступ в 2px, чтобы кружок ховера не стоял вплотную к элементу слева\n  margin-inline-start: ${(p) => (p.dimension === 's' ? '6px' : '8px')};\n  ${(p) =>\n    p.appearance === 'primary' ? (p.dimension === 's' ? 'margin-inline-end: 3px' : 'margin-inline-end: 5px') : ''};\n`;\n"],"names":[],"sourceRoot":""}