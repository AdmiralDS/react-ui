"use strict";(self.webpackChunk_admiral_ds_react_ui=self.webpackChunk_admiral_ds_react_ui||[]).push([[6020],{"./src/components/input/NumberInput/stories/NumberInput.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ControlledExample:()=>ControlledExample,CustomExample:()=>CustomExample,DisabledExample:()=>DisabledExample,MinMaxExample:()=>MinMaxExample,Playground:()=>Playground,__namedExportsOrder:()=>__namedExportsOrder,default:()=>NumberInput_stories});var react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),NumberInput=__webpack_require__("./src/components/input/NumberInput/index.tsx"),borderRadius=__webpack_require__("./src/components/themes/borderRadius.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const NumberInputPlaygroundTemplate=args=>(0,jsx_runtime.jsx)(styled_components_browser_esm.ThemeProvider,{theme:function swapBorder(theme){return theme.shape.borderRadiusKind=args.themeBorderKind||theme.shape.borderRadiusKind,theme},children:(0,jsx_runtime.jsx)(NumberInput.Y2,{prefix:"От",defaultValue:"2.00",onChange:event=>{console.log(event.target.value)},...args})});NumberInputPlaygroundTemplate.displayName="NumberInputPlaygroundTemplate";try{NumberInputPlaygroundTemplate.displayName="NumberInputPlaygroundTemplate",NumberInputPlaygroundTemplate.__docgenInfo={description:"",displayName:"NumberInputPlaygroundTemplate",props:{precision:{defaultValue:null,description:"точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"префикс (строка, которая выводится перед числовым значением)",name:"prefix",required:!1,type:{name:"string"}},suffix:{defaultValue:null,description:"суффикс (строка, которая выводится после числового значения)",name:"suffix",required:!1,type:{name:"string"}},thousand:{defaultValue:null,description:"разделитель между тысячами",name:"thousand",required:!1,type:{name:"string"}},decimal:{defaultValue:null,description:"разделитель между целым и десятичным",name:"decimal",required:!1,type:{name:"string"}},step:{defaultValue:null,description:"Шаг инпута. Если шаг - это дробное число, то количество знаков в десятичной части step должно быть равно precision",name:"step",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"Минимальное значение. При minValue >= 0, ввод знака минус блокируется",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:null,description:"Максимальное значение",name:"maxValue",required:!1,type:{name:"number"}},displayPlusMinusIcons:{defaultValue:null,description:"Отображать иконки плюса и минуса",name:"displayPlusMinusIcons",required:!1,type:{name:"boolean"}},align:{defaultValue:null,description:"Выравнивание контента. По умолчанию выравнивание происходит по левому краю",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},dimension:{defaultValue:null,description:"Делает высоту компонента больше или меньше обычной",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'}]}},icons:{defaultValue:null,description:"Иконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},displayClearIcon:{defaultValue:null,description:"Отображать иконку очистки поля",name:"displayClearIcon",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/NumberInput/stories/NumberInputPlayground.template.tsx#NumberInputPlaygroundTemplate"]={docgenInfo:NumberInputPlaygroundTemplate.__docgenInfo,name:"NumberInputPlaygroundTemplate",path:"src/components/input/NumberInput/stories/NumberInputPlayground.template.tsx#NumberInputPlaygroundTemplate"})}catch(__react_docgen_typescript_loader_error){}const NumberInputDisabledTemplate=args=>(0,jsx_runtime.jsx)(styled_components_browser_esm.ThemeProvider,{theme:function swapBorder(theme){return theme.shape.borderRadiusKind=args.themeBorderKind||theme.shape.borderRadiusKind,theme},children:(0,jsx_runtime.jsx)(NumberInput.Y2,{...args,disabled:!0})});NumberInputDisabledTemplate.displayName="NumberInputDisabledTemplate";try{NumberInputDisabledTemplate.displayName="NumberInputDisabledTemplate",NumberInputDisabledTemplate.__docgenInfo={description:"",displayName:"NumberInputDisabledTemplate",props:{precision:{defaultValue:null,description:"точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"префикс (строка, которая выводится перед числовым значением)",name:"prefix",required:!1,type:{name:"string"}},suffix:{defaultValue:null,description:"суффикс (строка, которая выводится после числового значения)",name:"suffix",required:!1,type:{name:"string"}},thousand:{defaultValue:null,description:"разделитель между тысячами",name:"thousand",required:!1,type:{name:"string"}},decimal:{defaultValue:null,description:"разделитель между целым и десятичным",name:"decimal",required:!1,type:{name:"string"}},step:{defaultValue:null,description:"Шаг инпута. Если шаг - это дробное число, то количество знаков в десятичной части step должно быть равно precision",name:"step",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"Минимальное значение. При minValue >= 0, ввод знака минус блокируется",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:null,description:"Максимальное значение",name:"maxValue",required:!1,type:{name:"number"}},displayPlusMinusIcons:{defaultValue:null,description:"Отображать иконки плюса и минуса",name:"displayPlusMinusIcons",required:!1,type:{name:"boolean"}},align:{defaultValue:null,description:"Выравнивание контента. По умолчанию выравнивание происходит по левому краю",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},dimension:{defaultValue:null,description:"Делает высоту компонента больше или меньше обычной",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'}]}},icons:{defaultValue:null,description:"Иконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},displayClearIcon:{defaultValue:null,description:"Отображать иконку очистки поля",name:"displayClearIcon",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/NumberInput/stories/NumberInputDisabled.template.tsx#NumberInputDisabledTemplate"]={docgenInfo:NumberInputDisabledTemplate.__docgenInfo,name:"NumberInputDisabledTemplate",path:"src/components/input/NumberInput/stories/NumberInputDisabled.template.tsx#NumberInputDisabledTemplate"})}catch(__react_docgen_typescript_loader_error){}var utils=__webpack_require__("./src/components/input/NumberInput/utils.ts"),T=__webpack_require__("./src/components/T/index.ts");const NumberInputMinMaxTemplate=({minValue=-1e3,maxValue=2e3,precision=2,decimal,...args})=>{const[status,setStatus]=(0,react.useState)(void 0);return(0,jsx_runtime.jsxs)(styled_components_browser_esm.ThemeProvider,{theme:function swapBorder(theme){return theme.shape.borderRadiusKind=args.themeBorderKind||theme.shape.borderRadiusKind,theme},children:[(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 2 Long",as:"div",style:{marginBottom:"24px"},children:"В данном примере, если введенное значение выходит за границы диапазона minValue-maxValue, компонент переходит в состояние ошибки."}),(0,jsx_runtime.jsx)(NumberInput.Y2,{...args,onChange:event=>{const numValue=Number((0,utils.EU)(event.target.value,precision,decimal));event.target.value&&(numValue<minValue||numValue>maxValue)?setStatus("error"):setStatus(void 0)},minValue,maxValue,status,precision,decimal})]})};NumberInputMinMaxTemplate.displayName="NumberInputMinMaxTemplate";try{NumberInputMinMaxTemplate.displayName="NumberInputMinMaxTemplate",NumberInputMinMaxTemplate.__docgenInfo={description:"",displayName:"NumberInputMinMaxTemplate",props:{precision:{defaultValue:{value:"2"},description:"точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"префикс (строка, которая выводится перед числовым значением)",name:"prefix",required:!1,type:{name:"string"}},suffix:{defaultValue:null,description:"суффикс (строка, которая выводится после числового значения)",name:"suffix",required:!1,type:{name:"string"}},thousand:{defaultValue:null,description:"разделитель между тысячами",name:"thousand",required:!1,type:{name:"string"}},decimal:{defaultValue:null,description:"разделитель между целым и десятичным",name:"decimal",required:!1,type:{name:"string"}},step:{defaultValue:null,description:"Шаг инпута. Если шаг - это дробное число, то количество знаков в десятичной части step должно быть равно precision",name:"step",required:!1,type:{name:"number"}},minValue:{defaultValue:{value:"-1000"},description:"Минимальное значение. При minValue >= 0, ввод знака минус блокируется",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:{value:"2000"},description:"Максимальное значение",name:"maxValue",required:!1,type:{name:"number"}},displayPlusMinusIcons:{defaultValue:null,description:"Отображать иконки плюса и минуса",name:"displayPlusMinusIcons",required:!1,type:{name:"boolean"}},align:{defaultValue:null,description:"Выравнивание контента. По умолчанию выравнивание происходит по левому краю",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},dimension:{defaultValue:null,description:"Делает высоту компонента больше или меньше обычной",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'}]}},icons:{defaultValue:null,description:"Иконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},displayClearIcon:{defaultValue:null,description:"Отображать иконку очистки поля",name:"displayClearIcon",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/NumberInput/stories/NumberInputMinMax.template.tsx#NumberInputMinMaxTemplate"]={docgenInfo:NumberInputMinMaxTemplate.__docgenInfo,name:"NumberInputMinMaxTemplate",path:"src/components/input/NumberInput/stories/NumberInputMinMax.template.tsx#NumberInputMinMaxTemplate"})}catch(__react_docgen_typescript_loader_error){}const NumberInputCustomisedTemplate=args=>(0,jsx_runtime.jsx)(styled_components_browser_esm.ThemeProvider,{theme:function swapBorder(theme){return theme.shape.borderRadiusKind=args.themeBorderKind||theme.shape.borderRadiusKind,theme},children:(0,jsx_runtime.jsx)(NumberInput.Y2,{...args,onChange:event=>{console.log(event.target.value)},suffix:"$",thousand:",",precision:1,placeholder:"0.0 $"})});NumberInputCustomisedTemplate.displayName="NumberInputCustomisedTemplate";try{NumberInputCustomisedTemplate.displayName="NumberInputCustomisedTemplate",NumberInputCustomisedTemplate.__docgenInfo={description:"",displayName:"NumberInputCustomisedTemplate",props:{precision:{defaultValue:null,description:"точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"префикс (строка, которая выводится перед числовым значением)",name:"prefix",required:!1,type:{name:"string"}},suffix:{defaultValue:null,description:"суффикс (строка, которая выводится после числового значения)",name:"suffix",required:!1,type:{name:"string"}},thousand:{defaultValue:null,description:"разделитель между тысячами",name:"thousand",required:!1,type:{name:"string"}},decimal:{defaultValue:null,description:"разделитель между целым и десятичным",name:"decimal",required:!1,type:{name:"string"}},step:{defaultValue:null,description:"Шаг инпута. Если шаг - это дробное число, то количество знаков в десятичной части step должно быть равно precision",name:"step",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"Минимальное значение. При minValue >= 0, ввод знака минус блокируется",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:null,description:"Максимальное значение",name:"maxValue",required:!1,type:{name:"number"}},displayPlusMinusIcons:{defaultValue:null,description:"Отображать иконки плюса и минуса",name:"displayPlusMinusIcons",required:!1,type:{name:"boolean"}},align:{defaultValue:null,description:"Выравнивание контента. По умолчанию выравнивание происходит по левому краю",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},dimension:{defaultValue:null,description:"Делает высоту компонента больше или меньше обычной",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'}]}},icons:{defaultValue:null,description:"Иконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},displayClearIcon:{defaultValue:null,description:"Отображать иконку очистки поля",name:"displayClearIcon",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/NumberInput/stories/NumberInputCustomised.template.tsx#NumberInputCustomisedTemplate"]={docgenInfo:NumberInputCustomisedTemplate.__docgenInfo,name:"NumberInputCustomisedTemplate",path:"src/components/input/NumberInput/stories/NumberInputCustomised.template.tsx#NumberInputCustomisedTemplate"})}catch(__react_docgen_typescript_loader_error){}const NumberInputControlledTemplate=()=>{const[value1,setValue1]=(0,react.useState)("50.00"),[value2,setValue2]=(0,react.useState)("1"),[suffix,setSuffix]=(0,react.useState)("минута");return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(NumberInput.Y2,{value:value1,onChange:event=>{console.log(event.target.value),setValue1(event.target.value)},prefix:"From",suffix:"$",placeholder:"From 0 $",style:{marginBottom:"40px"}}),(0,jsx_runtime.jsx)(NumberInput.Y2,{value:value2,onChange:event=>{console.log(event.target.value),setValue2(event.target.value),setSuffix(function declOfNum(n,text_forms){const n1=(n=Math.abs(n)%100)%10;return n>10&&n<20?text_forms[2]:n1>1&&n1<5?text_forms[1]:1==n1?text_forms[0]:text_forms[2]}(Number((0,utils.EU)(event.target.value,0)),["минута","минуты","минут"]))},suffix,precision:0,placeholder:"0 минут"})]})},Desc=styled_components_browser_esm.default.div.withConfig({displayName:"NumberInputstories__Desc",componentId:"sc-6imdcb-0"})(["font-family:'VTB Group UI';font-size:16px;line-height:24px;"]),Description=()=>(0,jsx_runtime.jsx)(Desc,{children:"Поле ввода с возможностью ввода числовых значений через нажатие с заданным шагом"});Description.displayName="Description";const NumberInput_stories={title:"Admiral-2.1/Input/NumberInput",component:NumberInput.Y2,parameters:{docs:{source:{code:null}},componentSubtitle:(0,jsx_runtime.jsx)(Description,{}),design:[{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=39%3A60588"},{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=39%3A60694"},{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=39%3A60723"}]},argTypes:{placeholder:{control:{type:"text"}},thousand:{control:{type:"text"}},prefix:{control:{type:"text"}},suffix:{control:{type:"text"}},decimal:{control:{type:"text"}},precision:{type:"number"},minValue:{type:"number"},maxValue:{type:"number"},step:{type:"number"},displayPlusMinusIcons:{control:{type:"boolean"}},displayClearIcon:{control:{type:"boolean"}},disabled:{control:{type:"boolean"}},readOnly:{control:{type:"boolean"}},disableCopying:{control:{type:"boolean"}},showTooltip:{control:{type:"boolean"}},isLoading:{control:{type:"boolean"}},icons:{control:!1},containerRef:{control:!1},handleInput:{control:!1},themeBorderKind:{options:borderRadius.g2,control:{type:"radio"}},skeleton:{control:{type:"boolean"}}}},PlaygroundStory=props=>(0,jsx_runtime.jsx)(NumberInputPlaygroundTemplate,{...props});PlaygroundStory.displayName="PlaygroundStory";const Playground={render:PlaygroundStory,parameters:{docs:{source:{code:"import { NumberInput } from '@admiral-ds/react-ui';\nimport type { BorderRadiusType, NumberInputProps, Theme } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\n\nexport const NumberInputPlaygroundTemplate = (args: NumberInputProps & { themeBorderKind?: BorderRadiusType }) => {\n  function swapBorder(theme: Theme): Theme {\n    theme.shape.borderRadiusKind = args.themeBorderKind || theme.shape.borderRadiusKind;\n    return theme;\n  }\n\n  return (\n    <ThemeProvider theme={swapBorder}>\n      <NumberInput\n        prefix=\"От\"\n        defaultValue=\"2.00\"\n        onChange={(event) => {\n          console.log(event.target.value);\n        }}\n        {...args}\n      />\n    </ThemeProvider>\n  );\n};\n"}}}},DisabledStory=props=>(0,jsx_runtime.jsx)(NumberInputDisabledTemplate,{...props});DisabledStory.displayName="DisabledStory";const DisabledExample={render:DisabledStory,parameters:{docs:{source:{code:"import { NumberInput } from '@admiral-ds/react-ui';\nimport type { BorderRadiusType, NumberInputProps, Theme } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\n\nexport const NumberInputDisabledTemplate = (args: NumberInputProps & { themeBorderKind?: BorderRadiusType }) => {\n  function swapBorder(theme: Theme): Theme {\n    theme.shape.borderRadiusKind = args.themeBorderKind || theme.shape.borderRadiusKind;\n    return theme;\n  }\n\n  return (\n    <ThemeProvider theme={swapBorder}>\n      <NumberInput {...args} disabled />\n    </ThemeProvider>\n  );\n};\n"}}},name:"NumberInput. Задизейбленный."},MinMaxStory=props=>(0,jsx_runtime.jsx)(NumberInputMinMaxTemplate,{...props});MinMaxStory.displayName="MinMaxStory";const MinMaxExample={render:MinMaxStory,parameters:{docs:{source:{code:"import { useState } from 'react';\nimport { NumberInput, T, clearValue } from '@admiral-ds/react-ui';\nimport type { BorderRadiusType, NumberInputProps, Theme } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\n\nexport const NumberInputMinMaxTemplate = ({\n  minValue = -1000,\n  maxValue = 2000,\n  precision = 2,\n  decimal,\n  ...args\n}: NumberInputProps & { themeBorderKind?: BorderRadiusType }) => {\n  function swapBorder(theme: Theme): Theme {\n    theme.shape.borderRadiusKind = args.themeBorderKind || theme.shape.borderRadiusKind;\n    return theme;\n  }\n\n  const [status, setStatus] = useState<NumberInputProps['status'] | undefined>(undefined);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const numValue = Number(clearValue(event.target.value, precision, decimal));\n    if (event.target.value && (numValue < minValue || numValue > maxValue)) {\n      setStatus('error');\n    } else {\n      setStatus(undefined);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={swapBorder}>\n      <T font=\"Body/Body 2 Long\" as=\"div\" style={{ marginBottom: '24px' }}>\n        В данном примере, если введенное значение выходит за границы диапазона minValue-maxValue, компонент переходит в\n        состояние ошибки.\n      </T>\n      <NumberInput\n        {...args}\n        onChange={handleChange}\n        minValue={minValue}\n        maxValue={maxValue}\n        status={status}\n        precision={precision}\n        decimal={decimal}\n      />\n    </ThemeProvider>\n  );\n};\n"},description:{story:"Параметры максимальное (maxValue) и минимальное (minValue) значение применяются для того, чтобы обозначить \n      диапазон допустимых чисел для ввода. При достижении лимита, кнопки “+” или “-” принимают состояние Disabled. Если \n      вручную введенное значение больше или меньше указанного диапазона, то автокоррекции значения при выводе фокуса из поля не происходит \n      (в предыдущей реализации, от которой библиотека отказалась, значение автоматически корректировалось, принимая наиболее близкое значение из допустимого диапазона). \n      Предполагается, что необходимая валидация и корректировка значения будут происходить на стороне пользователя. Также, если minValue >= 0, то\n      ввод знака минус блокируется."}}},name:"NumberInput. Пример с minValue, maxValue."},CustomStory=props=>(0,jsx_runtime.jsx)(NumberInputCustomisedTemplate,{...props});CustomStory.displayName="CustomStory";const CustomExample={render:CustomStory,parameters:{docs:{source:{code:"import { NumberInput } from '@admiral-ds/react-ui';\nimport type { BorderRadiusType, NumberInputProps, Theme } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\n\nexport const NumberInputCustomisedTemplate = (args: NumberInputProps & { themeBorderKind?: BorderRadiusType }) => {\n  function swapBorder(theme: Theme): Theme {\n    theme.shape.borderRadiusKind = args.themeBorderKind || theme.shape.borderRadiusKind;\n    return theme;\n  }\n\n  return (\n    <ThemeProvider theme={swapBorder}>\n      <NumberInput\n        {...args}\n        onChange={(event) => {\n          console.log(event.target.value);\n        }}\n        suffix=\"$\"\n        thousand=\",\"\n        precision={1}\n        placeholder=\"0.0 $\"\n      />\n    </ThemeProvider>\n  );\n};\n"},description:{story:"Пользователь может указать с помощью параметра precision (по умолчанию равен 2), \n      с какой точностью компонент должен выводить число (сколько разрядов должно быть в дробной части числа). \n      В этом случае при потере фокуса, если число содержит не все разряды в дробной части или дробная \n      часть отсутствует, должна произойти корректировка значения и недостающее количество разрядов должно быть заполнено нулями."}}},name:"NumberInput. Пример изменения настроек (suffix, precision, thousand)."},ControlledStory=()=>(0,jsx_runtime.jsx)(NumberInputControlledTemplate,{});ControlledStory.displayName="ControlledStory";const ControlledExample={render:ControlledStory,parameters:{docs:{source:{code:"import { useState } from 'react';\nimport { NumberInput, clearValue } from '@admiral-ds/react-ui';\n\nfunction declOfNum(n: number, text_forms: Array<string>) {\n  n = Math.abs(n) % 100;\n  const n1 = n % 10;\n  if (n > 10 && n < 20) {\n    return text_forms[2];\n  }\n  if (n1 > 1 && n1 < 5) {\n    return text_forms[1];\n  }\n  if (n1 == 1) {\n    return text_forms[0];\n  }\n  return text_forms[2];\n}\n\nexport const NumberInputControlledTemplate = () => {\n  const [value1, setValue1] = useState<string | undefined>('50.00');\n  const [value2, setValue2] = useState<string | undefined>('1');\n  const [suffix, setSuffix] = useState('минута');\n\n  return (\n    <>\n      <NumberInput\n        value={value1}\n        onChange={(event) => {\n          console.log(event.target.value);\n          setValue1(event.target.value);\n        }}\n        prefix=\"From\"\n        suffix=\"$\"\n        placeholder=\"From 0 $\"\n        style={{ marginBottom: '40px' }}\n      />\n      <NumberInput\n        value={value2}\n        onChange={(event) => {\n          console.log(event.target.value);\n          setValue2(event.target.value);\n          setSuffix(declOfNum(Number(clearValue(event.target.value, 0)), ['минута', 'минуты', 'минут']));\n        }}\n        suffix={suffix}\n        precision={0}\n        placeholder=\"0 минут\"\n      />\n    </>\n  );\n};\n"},description:{story:"В качестве значений параметров value и defaultValue в NumberInput необходимо передавать уже\n      отформатированную строку с разделителями тысяч (суффикс/префикс в value/defaultValue вносить не нужно).\n\nЕсли вы используете \n      контролируемый NumberInput, то в качестве значения value вам досточно указывать event.target.value, где event - это нативное событие \n      инпута, передаваемое к качестве параметра в колбек onChange. \n\nКроме того, библиотека предоставляет утилиту fitToCurrency, \n      которая возвращает строку отформатированную в денежном формате. В качестве параметров \n      данная утилита принимает value - значение, которое надо отформатировать, а также параметры precision, decimal, thousand. \n      Также библиотека предоставляет утилиту clearValue, которая возвращает входную строку, из которой удалены все символы кроме \n      цифр, символа decimal и минуса."}}},name:"NumberInput. Примеры контролируемого инпута."};Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:"{\n  render: PlaygroundStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputPlaygroundRaw\n      }\n    }\n  }\n}",...Playground.parameters?.docs?.source}}},DisabledExample.parameters={...DisabledExample.parameters,docs:{...DisabledExample.parameters?.docs,source:{originalSource:"{\n  render: DisabledStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputDisabledRaw\n      }\n    }\n  },\n  name: 'NumberInput. Задизейбленный.'\n}",...DisabledExample.parameters?.docs?.source}}},MinMaxExample.parameters={...MinMaxExample.parameters,docs:{...MinMaxExample.parameters?.docs,source:{originalSource:"{\n  render: MinMaxStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputMinMaxRaw\n      },\n      description: {\n        story: `Параметры максимальное (maxValue) и минимальное (minValue) значение применяются для того, чтобы обозначить \n      диапазон допустимых чисел для ввода. При достижении лимита, кнопки “+” или “-” принимают состояние Disabled. Если \n      вручную введенное значение больше или меньше указанного диапазона, то автокоррекции значения при выводе фокуса из поля не происходит \n      (в предыдущей реализации, от которой библиотека отказалась, значение автоматически корректировалось, принимая наиболее близкое значение из допустимого диапазона). \n      Предполагается, что необходимая валидация и корректировка значения будут происходить на стороне пользователя. Также, если minValue >= 0, то\n      ввод знака минус блокируется.`\n      }\n    }\n  },\n  name: 'NumberInput. Пример с minValue, maxValue.'\n}",...MinMaxExample.parameters?.docs?.source}}},CustomExample.parameters={...CustomExample.parameters,docs:{...CustomExample.parameters?.docs,source:{originalSource:"{\n  render: CustomStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputCustomisedRaw\n      },\n      description: {\n        story: `Пользователь может указать с помощью параметра precision (по умолчанию равен 2), \n      с какой точностью компонент должен выводить число (сколько разрядов должно быть в дробной части числа). \n      В этом случае при потере фокуса, если число содержит не все разряды в дробной части или дробная \n      часть отсутствует, должна произойти корректировка значения и недостающее количество разрядов должно быть заполнено нулями.`\n      }\n    }\n  },\n  name: 'NumberInput. Пример изменения настроек (suffix, precision, thousand).'\n}",...CustomExample.parameters?.docs?.source}}},ControlledExample.parameters={...ControlledExample.parameters,docs:{...ControlledExample.parameters?.docs,source:{originalSource:"{\n  render: ControlledStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputControlledRaw\n      },\n      description: {\n        story: `В качестве значений параметров value и defaultValue в NumberInput необходимо передавать уже\n      отформатированную строку с разделителями тысяч (суффикс/префикс в value/defaultValue вносить не нужно).\\n\\nЕсли вы используете \n      контролируемый NumberInput, то в качестве значения value вам досточно указывать event.target.value, где event - это нативное событие \n      инпута, передаваемое к качестве параметра в колбек onChange. \\n\\nКроме того, библиотека предоставляет утилиту fitToCurrency, \n      которая возвращает строку отформатированную в денежном формате. В качестве параметров \n      данная утилита принимает value - значение, которое надо отформатировать, а также параметры precision, decimal, thousand. \n      Также библиотека предоставляет утилиту clearValue, которая возвращает входную строку, из которой удалены все символы кроме \n      цифр, символа decimal и минуса.`\n      }\n    }\n  },\n  name: 'NumberInput. Примеры контролируемого инпута.'\n}",...ControlledExample.parameters?.docs?.source}}};const __namedExportsOrder=["Playground","DisabledExample","MinMaxExample","CustomExample","ControlledExample"]},"./src/components/T/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>T});var styled_components__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),_src_components_Typography__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/Typography/typography.ts"),_src_components_themes__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/themes/common/index.ts"),_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/skeleton/animation.tsx");const skeletonMixin=(0,styled_components__WEBPACK_IMPORTED_MODULE_0__.css)(["",";pointer-events:none;"],_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_1__.x),T=styled_components__WEBPACK_IMPORTED_MODULE_0__.default.span.withConfig({displayName:"T",componentId:"sc-wgb3t7-0"})(["color:",";",";"," ",""],(({color,theme,skeleton})=>skeleton?"transparent":color?theme.color[color]?theme.color[color]:color:theme.color[_src_components_themes__WEBPACK_IMPORTED_MODULE_2__.rG]),(p=>_src_components_Typography__WEBPACK_IMPORTED_MODULE_3__.c[p.font]),(p=>p.cssMixin?p.cssMixin:""),(p=>p.skeleton&&skeletonMixin));T.displayName="T"},"./src/components/themes/common/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{lI:()=>MainPrimaryColorName,rG:()=>DefaultFontColorName,sl:()=>DefaultBackgroundColorName});const DefaultFontColorName="Neutral/Neutral 90",DefaultBackgroundColorName="Neutral/Neutral 00",MainPrimaryColorName="Primary/Primary 60 Main"}}]);