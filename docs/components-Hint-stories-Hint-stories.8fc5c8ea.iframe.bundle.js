"use strict";(self.webpackChunk_admiral_ds_react_ui=self.webpackChunk_admiral_ds_react_ui||[]).push([[7593],{"./.storybook/createBorderRadiusSwapper.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{z:()=>createBorderRadiusSwapper});var _admiral_ds_react_ui__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/themes/light/index.ts");function createBorderRadiusSwapper(borderRadiusKind){return function swapBorder(theme){return theme?(theme.shape.borderRadiusKind=borderRadiusKind||theme.shape.borderRadiusKind,theme):(_admiral_ds_react_ui__WEBPACK_IMPORTED_MODULE_0__.f.shape.borderRadiusKind=borderRadiusKind||_admiral_ds_react_ui__WEBPACK_IMPORTED_MODULE_0__.f.shape.borderRadiusKind,_admiral_ds_react_ui__WEBPACK_IMPORTED_MODULE_0__.f)}}},"./src/components/Hint/stories/Hint.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{HintAnchorCssExample:()=>HintAnchorCssExample,HintBaseExample:()=>HintBaseExample,HintClassNameExample:()=>HintClassNameExample,HintClickExample:()=>HintClickExample,HintPositionExample:()=>HintPositionExample,HintTargetExample:()=>HintTargetExample,HintTextButtonExample:()=>HintTextButtonExample,HintWithHeaderExample:()=>HintWithHeaderExample,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Hint_stories});var _path,_path2,react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),Hint=__webpack_require__("./src/components/Hint/index.tsx"),borderRadius=__webpack_require__("./src/components/themes/borderRadius.ts"),Button=__webpack_require__("./src/components/Button/index.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var SvgHelpOutline=function SvgHelpOutline(props){return react.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24"},props),_path||(_path=react.createElement("path",{fill:"#717681",d:"M11.325 13.632a.65.65 0 1 0 1.3-.01c0-.3.04-.5.15-.78.14-.33.42-.63.72-.94l.004-.004c.489-.51 1.036-1.079 1.175-1.996.13-.87-.23-1.77-.95-2.34-.74-.59-1.72-.72-2.62-.37-1.18.47-1.85 1.49-1.79 2.75.01.36.33.63.68.62a.65.65 0 0 0 .62-.68c-.03-.49.13-1.15.97-1.48.47-.18.95-.12 1.33.18.36.28.54.71.48 1.13-.078.502-.418.858-.81 1.269l-.02.021c-.36.37-.76.79-.99 1.36-.18.43-.25.8-.25 1.27Zm1.525 2.718a.85.85 0 1 1-1.7 0 .85.85 0 0 1 1.7 0"})),_path2||(_path2=react.createElement("path",{fill:"#717681",fillRule:"evenodd",d:"M12 3a9 9 0 1 0 0 18 9 9 0 0 0 0-18m-7.7 9a7.7 7.7 0 1 1 15.4 0 7.7 7.7 0 0 1-15.4 0Z",clipRule:"evenodd"})))};__webpack_require__.p;var createBorderRadiusSwapper=__webpack_require__("./.storybook/createBorderRadiusSwapper.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const HintBaseTemplate=({themeBorderKind,...props})=>{const[visible,setVisible]=react.useState(!1);return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Hint.k,{...props,renderContent:()=>"At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.",anchorId:"hint_base",visible,onVisibilityChange:visible=>setVisible(visible),children:(0,jsx_runtime.jsx)(Button.zx,{dimension:"xl",appearance:"primary",displayAsSquare:!0,iconStart:(0,jsx_runtime.jsx)(SvgHelpOutline,{"aria-hidden":!0}),"aria-label":"Additional information","aria-describedby":"hint_base"})})})};HintBaseTemplate.displayName="HintBaseTemplate";try{HintBaseTemplate.displayName="HintBaseTemplate",HintBaseTemplate.__docgenInfo={description:"",displayName:"HintBaseTemplate",props:{visible:{defaultValue:null,description:"Видимость компонента",name:"visible",required:!0,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости хинта\n\nЕсли visibilityTrigger = 'hover', при ховере/фокусе на target элементе колбек вызовется со значением visible=true,\nпри потере ховера/фокуса на target элементе колбек вызовется со значением visible=false.\n\nЕсли visibilityTrigger = 'click', при клике на target элемент или нажатии клавиш Space/Enter на\ntarget элементе колбек вызовется со значением visible=true,\nпри клике на крестик внутри хинта/клике вне хинта и target элемента/нажатии клавиши Escape\nколбек вызовется со значением visible=false.",name:"onVisibilityChange",required:!1,type:{name:"((visible: boolean) => void)"}},renderContent:{defaultValue:null,description:"Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание",name:"renderContent",required:!0,type:{name:"() => ReactNode"}},hintPosition:{defaultValue:null,description:"Расположение хинта",name:"hintPosition",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"left"'},{value:'"right"'}]}},container:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором будет отрисован тултип через React.createPortal.\nПо умолчанию тултип отрисовывается в document.body",name:"container",required:!1,type:{name:"undefined"}},target:{defaultValue:null,description:"@deprecated Будет удалено в 8.x.x версии.\nВзамен используйте параметр targetElement.\n\nRef на элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"target",required:!1,type:{name:"MutableRefObject<Element | null>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"targetElement",required:!1,type:{name:"Element | null"}},visibilityTrigger:{defaultValue:null,description:"Триггер появления компонента (событие, которое вызывает появление хинта)",name:"visibilityTrigger",required:!1,type:{name:"enum",value:[{value:'"click"'},{value:'"hover"'}]}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},hintRef:{defaultValue:null,description:"Ссылка на тултип",name:"hintRef",required:!1,type:{name:"RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null"}},anchorClassName:{defaultValue:null,description:"ClassName для внешнего контейнера (AnchorWrapper)",name:"anchorClassName",required:!1,type:{name:"string"}},anchorId:{defaultValue:null,description:"Id для внешнего контейнера (AnchorWrapper)",name:"anchorId",required:!1,type:{name:"string"}},anchorCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper)",name:"anchorCssMixin",required:!1,type:{name:"RuleSet<object>"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ closeButtonAriaLabel?: string; }"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Hint/stories/HintBase.template.tsx#HintBaseTemplate"]={docgenInfo:HintBaseTemplate.__docgenInfo,name:"HintBaseTemplate",path:"src/components/Hint/stories/HintBase.template.tsx#HintBaseTemplate"})}catch(__react_docgen_typescript_loader_error){}const HintClassNameTemplate=({themeBorderKind,...props})=>{const[visible,setVisible]=react.useState(!1);return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Hint.k,{...props,className:"custom-hint-class",renderContent:()=>"At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.",anchorId:"hint-class1",visibilityTrigger:"click",visible,onVisibilityChange:visible=>setVisible(visible),children:(0,jsx_runtime.jsx)(Button.zx,{dimension:"xl",appearance:"primary",displayAsSquare:!0,iconStart:(0,jsx_runtime.jsx)(SvgHelpOutline,{"aria-hidden":!0}),"aria-label":"Additional information","aria-describedby":"hint-class1"})})})};HintClassNameTemplate.displayName="HintClassNameTemplate";try{HintClassNameTemplate.displayName="HintClassNameTemplate",HintClassNameTemplate.__docgenInfo={description:"",displayName:"HintClassNameTemplate",props:{visible:{defaultValue:null,description:"Видимость компонента",name:"visible",required:!0,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости хинта\n\nЕсли visibilityTrigger = 'hover', при ховере/фокусе на target элементе колбек вызовется со значением visible=true,\nпри потере ховера/фокуса на target элементе колбек вызовется со значением visible=false.\n\nЕсли visibilityTrigger = 'click', при клике на target элемент или нажатии клавиш Space/Enter на\ntarget элементе колбек вызовется со значением visible=true,\nпри клике на крестик внутри хинта/клике вне хинта и target элемента/нажатии клавиши Escape\nколбек вызовется со значением visible=false.",name:"onVisibilityChange",required:!1,type:{name:"((visible: boolean) => void)"}},renderContent:{defaultValue:null,description:"Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание",name:"renderContent",required:!0,type:{name:"() => ReactNode"}},hintPosition:{defaultValue:null,description:"Расположение хинта",name:"hintPosition",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"left"'},{value:'"right"'}]}},container:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором будет отрисован тултип через React.createPortal.\nПо умолчанию тултип отрисовывается в document.body",name:"container",required:!1,type:{name:"undefined"}},target:{defaultValue:null,description:"@deprecated Будет удалено в 8.x.x версии.\nВзамен используйте параметр targetElement.\n\nRef на элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"target",required:!1,type:{name:"MutableRefObject<Element | null>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"targetElement",required:!1,type:{name:"Element | null"}},visibilityTrigger:{defaultValue:null,description:"Триггер появления компонента (событие, которое вызывает появление хинта)",name:"visibilityTrigger",required:!1,type:{name:"enum",value:[{value:'"click"'},{value:'"hover"'}]}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},hintRef:{defaultValue:null,description:"Ссылка на тултип",name:"hintRef",required:!1,type:{name:"RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null"}},anchorClassName:{defaultValue:null,description:"ClassName для внешнего контейнера (AnchorWrapper)",name:"anchorClassName",required:!1,type:{name:"string"}},anchorId:{defaultValue:null,description:"Id для внешнего контейнера (AnchorWrapper)",name:"anchorId",required:!1,type:{name:"string"}},anchorCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper)",name:"anchorCssMixin",required:!1,type:{name:"RuleSet<object>"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ closeButtonAriaLabel?: string; }"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Hint/stories/HintClassName.template.tsx#HintClassNameTemplate"]={docgenInfo:HintClassNameTemplate.__docgenInfo,name:"HintClassNameTemplate",path:"src/components/Hint/stories/HintClassName.template.tsx#HintClassNameTemplate"})}catch(__react_docgen_typescript_loader_error){}const HintClickTemplate=({themeBorderKind,...props})=>{const[visible,setVisible]=react.useState(!1);return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Hint.k,{...props,renderContent:()=>"At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.",anchorId:"hint_click",visibilityTrigger:"click",visible,onVisibilityChange:visible=>setVisible(visible),children:(0,jsx_runtime.jsx)(Button.zx,{dimension:"xl",appearance:"primary",displayAsSquare:!0,iconStart:(0,jsx_runtime.jsx)(SvgHelpOutline,{"aria-hidden":!0}),"aria-label":"Additional information","aria-describedby":"hint_click"})})})};HintClickTemplate.displayName="HintClickTemplate";try{HintClickTemplate.displayName="HintClickTemplate",HintClickTemplate.__docgenInfo={description:"",displayName:"HintClickTemplate",props:{visible:{defaultValue:null,description:"Видимость компонента",name:"visible",required:!0,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости хинта\n\nЕсли visibilityTrigger = 'hover', при ховере/фокусе на target элементе колбек вызовется со значением visible=true,\nпри потере ховера/фокуса на target элементе колбек вызовется со значением visible=false.\n\nЕсли visibilityTrigger = 'click', при клике на target элемент или нажатии клавиш Space/Enter на\ntarget элементе колбек вызовется со значением visible=true,\nпри клике на крестик внутри хинта/клике вне хинта и target элемента/нажатии клавиши Escape\nколбек вызовется со значением visible=false.",name:"onVisibilityChange",required:!1,type:{name:"((visible: boolean) => void)"}},renderContent:{defaultValue:null,description:"Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание",name:"renderContent",required:!0,type:{name:"() => ReactNode"}},hintPosition:{defaultValue:null,description:"Расположение хинта",name:"hintPosition",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"left"'},{value:'"right"'}]}},container:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором будет отрисован тултип через React.createPortal.\nПо умолчанию тултип отрисовывается в document.body",name:"container",required:!1,type:{name:"undefined"}},target:{defaultValue:null,description:"@deprecated Будет удалено в 8.x.x версии.\nВзамен используйте параметр targetElement.\n\nRef на элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"target",required:!1,type:{name:"MutableRefObject<Element | null>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"targetElement",required:!1,type:{name:"Element | null"}},visibilityTrigger:{defaultValue:null,description:"Триггер появления компонента (событие, которое вызывает появление хинта)",name:"visibilityTrigger",required:!1,type:{name:"enum",value:[{value:'"click"'},{value:'"hover"'}]}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},hintRef:{defaultValue:null,description:"Ссылка на тултип",name:"hintRef",required:!1,type:{name:"RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null"}},anchorClassName:{defaultValue:null,description:"ClassName для внешнего контейнера (AnchorWrapper)",name:"anchorClassName",required:!1,type:{name:"string"}},anchorId:{defaultValue:null,description:"Id для внешнего контейнера (AnchorWrapper)",name:"anchorId",required:!1,type:{name:"string"}},anchorCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper)",name:"anchorCssMixin",required:!1,type:{name:"RuleSet<object>"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ closeButtonAriaLabel?: string; }"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Hint/stories/HintClick.template.tsx#HintClickTemplate"]={docgenInfo:HintClickTemplate.__docgenInfo,name:"HintClickTemplate",path:"src/components/Hint/stories/HintClick.template.tsx#HintClickTemplate"})}catch(__react_docgen_typescript_loader_error){}const HintPosition_template_text="At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.",StyledButton=(0,styled_components_browser_esm.ZP)(Button.zx).withConfig({displayName:"HintPositiontemplate__StyledButton",componentId:"sc-1x4kc07-0"})(["padding:4px;"]),HintPositionTemplate=({themeBorderKind,...props})=>{const[visible1,setVisible1]=react.useState(!1),[visible2,setVisible2]=react.useState(!1),[visible3,setVisible3]=react.useState(!1),[visible4,setVisible4]=react.useState(!1);return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsxs)("div",{style:{display:"flex",justifyContent:"space-between",width:"100%"},children:[(0,jsx_runtime.jsx)(Hint.k,{...props,visible:visible1,onVisibilityChange:visible=>setVisible1(visible),renderContent:()=>HintPosition_template_text,anchorId:"right_pos",hintPosition:"right",children:(0,jsx_runtime.jsx)(StyledButton,{dimension:"s","aria-label":"Additional information","aria-describedby":"right_pos",children:"Right"})}),(0,jsx_runtime.jsx)(Hint.k,{...props,visible:visible2,onVisibilityChange:visible=>setVisible2(visible),renderContent:()=>HintPosition_template_text,id:"top_pos",hintPosition:"top",children:(0,jsx_runtime.jsx)(StyledButton,{dimension:"s","aria-label":"Additional information","aria-describedby":"top_pos",children:"Top"})}),(0,jsx_runtime.jsx)(Hint.k,{...props,visible:visible3,onVisibilityChange:visible=>setVisible3(visible),renderContent:()=>HintPosition_template_text,anchorId:"bottom_pos",hintPosition:"bottom",children:(0,jsx_runtime.jsx)(StyledButton,{dimension:"s","aria-label":"Additional information","aria-describedby":"bottom_pos",children:"Bottom"})}),(0,jsx_runtime.jsx)(Hint.k,{...props,visible:visible4,onVisibilityChange:visible=>setVisible4(visible),renderContent:()=>HintPosition_template_text,id:"left-pos",hintPosition:"left",children:(0,jsx_runtime.jsx)(StyledButton,{dimension:"s","aria-label":"Additional information","aria-describedby":"left-pos",children:"Left"})})]})})};HintPositionTemplate.displayName="HintPositionTemplate";try{HintPositionTemplate.displayName="HintPositionTemplate",HintPositionTemplate.__docgenInfo={description:"",displayName:"HintPositionTemplate",props:{visible:{defaultValue:null,description:"Видимость компонента",name:"visible",required:!0,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости хинта\n\nЕсли visibilityTrigger = 'hover', при ховере/фокусе на target элементе колбек вызовется со значением visible=true,\nпри потере ховера/фокуса на target элементе колбек вызовется со значением visible=false.\n\nЕсли visibilityTrigger = 'click', при клике на target элемент или нажатии клавиш Space/Enter на\ntarget элементе колбек вызовется со значением visible=true,\nпри клике на крестик внутри хинта/клике вне хинта и target элемента/нажатии клавиши Escape\nколбек вызовется со значением visible=false.",name:"onVisibilityChange",required:!1,type:{name:"((visible: boolean) => void)"}},renderContent:{defaultValue:null,description:"Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание",name:"renderContent",required:!0,type:{name:"() => ReactNode"}},hintPosition:{defaultValue:null,description:"Расположение хинта",name:"hintPosition",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"left"'},{value:'"right"'}]}},container:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором будет отрисован тултип через React.createPortal.\nПо умолчанию тултип отрисовывается в document.body",name:"container",required:!1,type:{name:"undefined"}},target:{defaultValue:null,description:"@deprecated Будет удалено в 8.x.x версии.\nВзамен используйте параметр targetElement.\n\nRef на элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"target",required:!1,type:{name:"MutableRefObject<Element | null>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"targetElement",required:!1,type:{name:"Element | null"}},visibilityTrigger:{defaultValue:null,description:"Триггер появления компонента (событие, которое вызывает появление хинта)",name:"visibilityTrigger",required:!1,type:{name:"enum",value:[{value:'"click"'},{value:'"hover"'}]}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},hintRef:{defaultValue:null,description:"Ссылка на тултип",name:"hintRef",required:!1,type:{name:"RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null"}},anchorClassName:{defaultValue:null,description:"ClassName для внешнего контейнера (AnchorWrapper)",name:"anchorClassName",required:!1,type:{name:"string"}},anchorId:{defaultValue:null,description:"Id для внешнего контейнера (AnchorWrapper)",name:"anchorId",required:!1,type:{name:"string"}},anchorCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper)",name:"anchorCssMixin",required:!1,type:{name:"RuleSet<object>"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ closeButtonAriaLabel?: string; }"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Hint/stories/HintPosition.template.tsx#HintPositionTemplate"]={docgenInfo:HintPositionTemplate.__docgenInfo,name:"HintPositionTemplate",path:"src/components/Hint/stories/HintPosition.template.tsx#HintPositionTemplate"})}catch(__react_docgen_typescript_loader_error){}var TextButton=__webpack_require__("./src/components/TextButton/index.tsx");const Separator=styled_components_browser_esm.ZP.div.withConfig({displayName:"HintTextButtontemplate__Separator",componentId:"sc-kfb6ck-0"})(["height:","px;"],(({height})=>height||20)),HintTextButtonTemplate=({themeBorderKind,...props})=>{const[visible,setVisible]=react.useState(!1);return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Hint.k,{...props,visible,onVisibilityChange:visible=>setVisible(visible),visibilityTrigger:"click",renderContent:()=>(0,jsx_runtime.jsxs)("div",{style:{display:"flex",flexDirection:"column",width:"100%"},children:["At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.",(0,jsx_runtime.jsx)(Separator,{height:4}),(0,jsx_runtime.jsx)(TextButton.A,{appearance:"primary",dimension:"s",text:"Text Button"})]}),anchorId:"hint_textbutton",children:(0,jsx_runtime.jsx)(Button.zx,{dimension:"xl",appearance:"primary",displayAsSquare:!0,iconStart:(0,jsx_runtime.jsx)(SvgHelpOutline,{"aria-hidden":!0}),"aria-label":"Additional information","aria-describedby":"hint_textbutton"})})})};HintTextButtonTemplate.displayName="HintTextButtonTemplate";try{HintTextButtonTemplate.displayName="HintTextButtonTemplate",HintTextButtonTemplate.__docgenInfo={description:"",displayName:"HintTextButtonTemplate",props:{visible:{defaultValue:null,description:"Видимость компонента",name:"visible",required:!0,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости хинта\n\nЕсли visibilityTrigger = 'hover', при ховере/фокусе на target элементе колбек вызовется со значением visible=true,\nпри потере ховера/фокуса на target элементе колбек вызовется со значением visible=false.\n\nЕсли visibilityTrigger = 'click', при клике на target элемент или нажатии клавиш Space/Enter на\ntarget элементе колбек вызовется со значением visible=true,\nпри клике на крестик внутри хинта/клике вне хинта и target элемента/нажатии клавиши Escape\nколбек вызовется со значением visible=false.",name:"onVisibilityChange",required:!1,type:{name:"((visible: boolean) => void)"}},renderContent:{defaultValue:null,description:"Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание",name:"renderContent",required:!0,type:{name:"() => ReactNode"}},hintPosition:{defaultValue:null,description:"Расположение хинта",name:"hintPosition",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"left"'},{value:'"right"'}]}},container:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором будет отрисован тултип через React.createPortal.\nПо умолчанию тултип отрисовывается в document.body",name:"container",required:!1,type:{name:"undefined"}},target:{defaultValue:null,description:"@deprecated Будет удалено в 8.x.x версии.\nВзамен используйте параметр targetElement.\n\nRef на элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"target",required:!1,type:{name:"MutableRefObject<Element | null>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"targetElement",required:!1,type:{name:"Element | null"}},visibilityTrigger:{defaultValue:null,description:"Триггер появления компонента (событие, которое вызывает появление хинта)",name:"visibilityTrigger",required:!1,type:{name:"enum",value:[{value:'"click"'},{value:'"hover"'}]}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},hintRef:{defaultValue:null,description:"Ссылка на тултип",name:"hintRef",required:!1,type:{name:"RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null"}},anchorClassName:{defaultValue:null,description:"ClassName для внешнего контейнера (AnchorWrapper)",name:"anchorClassName",required:!1,type:{name:"string"}},anchorId:{defaultValue:null,description:"Id для внешнего контейнера (AnchorWrapper)",name:"anchorId",required:!1,type:{name:"string"}},anchorCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper)",name:"anchorCssMixin",required:!1,type:{name:"RuleSet<object>"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ closeButtonAriaLabel?: string; }"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Hint/stories/HintTextButton.template.tsx#HintTextButtonTemplate"]={docgenInfo:HintTextButtonTemplate.__docgenInfo,name:"HintTextButtonTemplate",path:"src/components/Hint/stories/HintTextButton.template.tsx#HintTextButtonTemplate"})}catch(__react_docgen_typescript_loader_error){}const HintTargetTemplate=({themeBorderKind,...props})=>{const btnRef=react.useRef(null),[visible,setVisible]=react.useState(!1);return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Button.zx,{ref:btnRef,dimension:"xl",appearance:"primary",iconEnd:(0,jsx_runtime.jsx)(Hint.k,{...props,visible,onVisibilityChange:visible=>setVisible(visible),renderContent:()=>"At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.",targetElement:btnRef.current,anchorId:"hint_target",children:(0,jsx_runtime.jsx)(SvgHelpOutline,{tabIndex:0,height:24,width:24,"aria-label":"Help Icon","aria-describedby":"hint_target"})}),children:"Hover on icon"})})};HintTargetTemplate.displayName="HintTargetTemplate";try{HintTargetTemplate.displayName="HintTargetTemplate",HintTargetTemplate.__docgenInfo={description:"",displayName:"HintTargetTemplate",props:{visible:{defaultValue:null,description:"Видимость компонента",name:"visible",required:!0,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости хинта\n\nЕсли visibilityTrigger = 'hover', при ховере/фокусе на target элементе колбек вызовется со значением visible=true,\nпри потере ховера/фокуса на target элементе колбек вызовется со значением visible=false.\n\nЕсли visibilityTrigger = 'click', при клике на target элемент или нажатии клавиш Space/Enter на\ntarget элементе колбек вызовется со значением visible=true,\nпри клике на крестик внутри хинта/клике вне хинта и target элемента/нажатии клавиши Escape\nколбек вызовется со значением visible=false.",name:"onVisibilityChange",required:!1,type:{name:"((visible: boolean) => void)"}},renderContent:{defaultValue:null,description:"Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание",name:"renderContent",required:!0,type:{name:"() => ReactNode"}},hintPosition:{defaultValue:null,description:"Расположение хинта",name:"hintPosition",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"left"'},{value:'"right"'}]}},container:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором будет отрисован тултип через React.createPortal.\nПо умолчанию тултип отрисовывается в document.body",name:"container",required:!1,type:{name:"undefined"}},target:{defaultValue:null,description:"@deprecated Будет удалено в 8.x.x версии.\nВзамен используйте параметр targetElement.\n\nRef на элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"target",required:!1,type:{name:"MutableRefObject<Element | null>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"targetElement",required:!1,type:{name:"Element | null"}},visibilityTrigger:{defaultValue:null,description:"Триггер появления компонента (событие, которое вызывает появление хинта)",name:"visibilityTrigger",required:!1,type:{name:"enum",value:[{value:'"click"'},{value:'"hover"'}]}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},hintRef:{defaultValue:null,description:"Ссылка на тултип",name:"hintRef",required:!1,type:{name:"RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null"}},anchorClassName:{defaultValue:null,description:"ClassName для внешнего контейнера (AnchorWrapper)",name:"anchorClassName",required:!1,type:{name:"string"}},anchorId:{defaultValue:null,description:"Id для внешнего контейнера (AnchorWrapper)",name:"anchorId",required:!1,type:{name:"string"}},anchorCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper)",name:"anchorCssMixin",required:!1,type:{name:"RuleSet<object>"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ closeButtonAriaLabel?: string; }"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Hint/stories/HintTarget.template.tsx#HintTargetTemplate"]={docgenInfo:HintTargetTemplate.__docgenInfo,name:"HintTargetTemplate",path:"src/components/Hint/stories/HintTarget.template.tsx#HintTargetTemplate"})}catch(__react_docgen_typescript_loader_error){}const anchorCss=(0,styled_components_browser_esm.iv)(["padding:10px;border:2px dotted red;"]),HintAnchorCssTemplate=({themeBorderKind,...props})=>{const[visible,setVisible]=react.useState(!1);return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Hint.k,{...props,visible,onVisibilityChange:visible=>setVisible(visible),renderContent:()=>"At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.",anchorId:"hint_css",anchorCssMixin:anchorCss,children:(0,jsx_runtime.jsx)(Button.zx,{dimension:"xl",appearance:"primary",displayAsSquare:!0,iconStart:(0,jsx_runtime.jsx)(SvgHelpOutline,{"aria-hidden":!0}),"aria-label":"Additional information","aria-describedby":"hint_css"})})})};HintAnchorCssTemplate.displayName="HintAnchorCssTemplate";try{HintAnchorCssTemplate.displayName="HintAnchorCssTemplate",HintAnchorCssTemplate.__docgenInfo={description:"",displayName:"HintAnchorCssTemplate",props:{visible:{defaultValue:null,description:"Видимость компонента",name:"visible",required:!0,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости хинта\n\nЕсли visibilityTrigger = 'hover', при ховере/фокусе на target элементе колбек вызовется со значением visible=true,\nпри потере ховера/фокуса на target элементе колбек вызовется со значением visible=false.\n\nЕсли visibilityTrigger = 'click', при клике на target элемент или нажатии клавиш Space/Enter на\ntarget элементе колбек вызовется со значением visible=true,\nпри клике на крестик внутри хинта/клике вне хинта и target элемента/нажатии клавиши Escape\nколбек вызовется со значением visible=false.",name:"onVisibilityChange",required:!1,type:{name:"((visible: boolean) => void)"}},renderContent:{defaultValue:null,description:"Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание",name:"renderContent",required:!0,type:{name:"() => ReactNode"}},hintPosition:{defaultValue:null,description:"Расположение хинта",name:"hintPosition",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"left"'},{value:'"right"'}]}},container:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором будет отрисован тултип через React.createPortal.\nПо умолчанию тултип отрисовывается в document.body",name:"container",required:!1,type:{name:"undefined"}},target:{defaultValue:null,description:"@deprecated Будет удалено в 8.x.x версии.\nВзамен используйте параметр targetElement.\n\nRef на элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"target",required:!1,type:{name:"MutableRefObject<Element | null>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"targetElement",required:!1,type:{name:"Element | null"}},visibilityTrigger:{defaultValue:null,description:"Триггер появления компонента (событие, которое вызывает появление хинта)",name:"visibilityTrigger",required:!1,type:{name:"enum",value:[{value:'"click"'},{value:'"hover"'}]}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},hintRef:{defaultValue:null,description:"Ссылка на тултип",name:"hintRef",required:!1,type:{name:"RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null"}},anchorClassName:{defaultValue:null,description:"ClassName для внешнего контейнера (AnchorWrapper)",name:"anchorClassName",required:!1,type:{name:"string"}},anchorId:{defaultValue:null,description:"Id для внешнего контейнера (AnchorWrapper)",name:"anchorId",required:!1,type:{name:"string"}},anchorCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper)",name:"anchorCssMixin",required:!1,type:{name:"RuleSet<object>"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ closeButtonAriaLabel?: string; }"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Hint/stories/HintAnchorCss.template.tsx#HintAnchorCssTemplate"]={docgenInfo:HintAnchorCssTemplate.__docgenInfo,name:"HintAnchorCssTemplate",path:"src/components/Hint/stories/HintAnchorCss.template.tsx#HintAnchorCssTemplate"})}catch(__react_docgen_typescript_loader_error){}var T=__webpack_require__("./src/components/T/index.tsx");const renderHintContent=()=>(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(T.T,{font:"Subtitle/Subtitle 3",as:"div",style:{marginBottom:"4px"},children:"Hint header"}),"At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights."]});renderHintContent.displayName="renderHintContent";const HintWithHeaderTemplate=({themeBorderKind,...props})=>{const[visible,setVisible]=react.useState(!1);return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Hint.k,{...props,renderContent:renderHintContent,anchorId:"hint_click",visibilityTrigger:"click",visible,onVisibilityChange:visible=>setVisible(visible),children:(0,jsx_runtime.jsx)(Button.zx,{dimension:"xl",appearance:"primary",displayAsSquare:!0,iconStart:(0,jsx_runtime.jsx)(SvgHelpOutline,{"aria-hidden":!0}),"aria-label":"Additional information","aria-describedby":"hint_click"})})})};HintWithHeaderTemplate.displayName="HintWithHeaderTemplate";try{HintWithHeaderTemplate.displayName="HintWithHeaderTemplate",HintWithHeaderTemplate.__docgenInfo={description:"",displayName:"HintWithHeaderTemplate",props:{visible:{defaultValue:null,description:"Видимость компонента",name:"visible",required:!0,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости хинта\n\nЕсли visibilityTrigger = 'hover', при ховере/фокусе на target элементе колбек вызовется со значением visible=true,\nпри потере ховера/фокуса на target элементе колбек вызовется со значением visible=false.\n\nЕсли visibilityTrigger = 'click', при клике на target элемент или нажатии клавиш Space/Enter на\ntarget элементе колбек вызовется со значением visible=true,\nпри клике на крестик внутри хинта/клике вне хинта и target элемента/нажатии клавиши Escape\nколбек вызовется со значением visible=false.",name:"onVisibilityChange",required:!1,type:{name:"((visible: boolean) => void)"}},renderContent:{defaultValue:null,description:"Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание",name:"renderContent",required:!0,type:{name:"() => ReactNode"}},hintPosition:{defaultValue:null,description:"Расположение хинта",name:"hintPosition",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"left"'},{value:'"right"'}]}},container:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором будет отрисован тултип через React.createPortal.\nПо умолчанию тултип отрисовывается в document.body",name:"container",required:!1,type:{name:"undefined"}},target:{defaultValue:null,description:"@deprecated Будет удалено в 8.x.x версии.\nВзамен используйте параметр targetElement.\n\nRef на элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"target",required:!1,type:{name:"MutableRefObject<Element | null>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит",name:"targetElement",required:!1,type:{name:"Element | null"}},visibilityTrigger:{defaultValue:null,description:"Триггер появления компонента (событие, которое вызывает появление хинта)",name:"visibilityTrigger",required:!1,type:{name:"enum",value:[{value:'"click"'},{value:'"hover"'}]}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},hintRef:{defaultValue:null,description:"Ссылка на тултип",name:"hintRef",required:!1,type:{name:"RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null"}},anchorClassName:{defaultValue:null,description:"ClassName для внешнего контейнера (AnchorWrapper)",name:"anchorClassName",required:!1,type:{name:"string"}},anchorId:{defaultValue:null,description:"Id для внешнего контейнера (AnchorWrapper)",name:"anchorId",required:!1,type:{name:"string"}},anchorCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper)",name:"anchorCssMixin",required:!1,type:{name:"RuleSet<object>"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ closeButtonAriaLabel?: string; }"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Hint/stories/HintWithHeader.template.tsx#HintWithHeaderTemplate"]={docgenInfo:HintWithHeaderTemplate.__docgenInfo,name:"HintWithHeaderTemplate",path:"src/components/Hint/stories/HintWithHeader.template.tsx#HintWithHeaderTemplate"})}catch(__react_docgen_typescript_loader_error){}const Hint_stories_Separator=styled_components_browser_esm.ZP.div.withConfig({displayName:"Hintstories__Separator",componentId:"sc-1hg1mwj-0"})(["height:","px;"],(({height})=>height||20)),Desc=styled_components_browser_esm.ZP.div.withConfig({displayName:"Hintstories__Desc",componentId:"sc-1hg1mwj-1"})(["font-family:'VTB Group UI';font-size:16px;line-height:24px;"]),Description=()=>(0,jsx_runtime.jsxs)(Desc,{children:["Всплывающая подсказка используется для ситуаций, когда требуется пояснить или раскрыть информацию более детально. Вызывается либо по клику, например на иконку Question, либо по ховеру на любом элементе, когда недостаточно Tooltip-а.",(0,jsx_runtime.jsx)(Hint_stories_Separator,{}),"В случае, когда Hint вызывается по клику, у нас есть возможность его закрыть кликом вне Hint-а, либо нажатием на крестик.",(0,jsx_runtime.jsx)(Hint_stories_Separator,{}),"В сценарии, когда Hint вызывается по ховеру, иконки закрытия на компоненте нет и он скрывается, когда мы уводим курсор с объекта, к которому он привязан.",(0,jsx_runtime.jsx)(Hint_stories_Separator,{}),"Hint имеет три фиксированных по ширине размера: 280px, 384px и 488px, которые используются в зависимости от предполагаемого объема текста. На экранах мобильных устройств, меньше 640px, компонент адаптируется по ширине к рабочей области устройства. Высота компонента настраивается автоматически при задании контента. Максимальная высота компонента – 320px, после чего у контента появляется вертикальный скролл.",(0,jsx_runtime.jsx)(Hint_stories_Separator,{}),"По умолчанию Hint-у присваивается самый большой размер, Hint появляется по ховеру."]});Description.displayName="Description";const Hint_stories={title:"Admiral-2.1/Hint",decorators:void 0,component:Hint.k,parameters:{docs:{source:{code:null}},componentSubtitle:(0,jsx_runtime.jsx)(Description,{}),design:[{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=37%3A31273"},{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=37%3A31388"},{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=37%3A31455"}],actions:{argTypesRegex:"^on.*"}},argTypes:{dimension:{options:["l","m","s"],control:{type:"radio"}},visibilityTrigger:{options:["hover","click"],control:{type:"radio"}},hintPosition:{options:["bottom","top","left","right"],control:{type:"radio"}},container:{control:!1},target:{control:!1},locale:{control:!1},hintRef:{control:!1},anchorClassName:{control:!1},anchorId:{control:!1},anchorCssMixin:{control:!1},themeBorderKind:{options:borderRadius.g2,control:{type:"radio"}}}},HintBaseStory=props=>(0,jsx_runtime.jsx)(HintBaseTemplate,{...props});HintBaseStory.displayName="HintBaseStory";const HintBaseExample={render:HintBaseStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport { Hint, Button } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nexport const HintBaseTemplate = ({ themeBorderKind, ...props }: HintProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Hint\n        {...props}\n        renderContent={() => text}\n        anchorId=\"hint_base\"\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint_base\"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n"}}},name:"Hint. Базовый пример."},HintPositionStory=props=>(0,jsx_runtime.jsx)(HintPositionTemplate,{...props});HintPositionStory.displayName="HintPositionStory";const HintPositionExample={render:HintPositionStory,parameters:{docs:{source:{code:'import * as React from \'react\';\nimport { Hint, Button } from \'@admiral-ds/react-ui\';\nimport type { HintProps, BorderRadiusType } from \'@admiral-ds/react-ui\';\nimport styled, { ThemeProvider } from \'styled-components\';\nimport { createBorderRadiusSwapper } from \'../../../../.storybook/createBorderRadiusSwapper\';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nconst StyledButton = styled(Button)`\n  padding: 4px;\n`;\n\nexport const HintPositionTemplate = ({\n  themeBorderKind,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [visible1, setVisible1] = React.useState(false);\n  const [visible2, setVisible2] = React.useState(false);\n  const [visible3, setVisible3] = React.useState(false);\n  const [visible4, setVisible4] = React.useState(false);\n  const handleVisibilityChange1 = (visible: boolean) => setVisible1(visible);\n  const handleVisibilityChange2 = (visible: boolean) => setVisible2(visible);\n  const handleVisibilityChange3 = (visible: boolean) => setVisible3(visible);\n  const handleVisibilityChange4 = (visible: boolean) => setVisible4(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <div style={{ display: \'flex\', justifyContent: \'space-between\', width: \'100%\' }}>\n        <Hint\n          {...props}\n          visible={visible1}\n          onVisibilityChange={handleVisibilityChange1}\n          renderContent={() => text}\n          anchorId="right_pos"\n          hintPosition="right"\n        >\n          <StyledButton dimension="s" aria-label="Additional information" aria-describedby="right_pos">\n            Right\n          </StyledButton>\n        </Hint>\n        <Hint\n          {...props}\n          visible={visible2}\n          onVisibilityChange={handleVisibilityChange2}\n          renderContent={() => text}\n          id="top_pos"\n          hintPosition="top"\n        >\n          <StyledButton dimension="s" aria-label="Additional information" aria-describedby="top_pos">\n            Top\n          </StyledButton>\n        </Hint>\n        <Hint\n          {...props}\n          visible={visible3}\n          onVisibilityChange={handleVisibilityChange3}\n          renderContent={() => text}\n          anchorId="bottom_pos"\n          hintPosition="bottom"\n        >\n          <StyledButton dimension="s" aria-label="Additional information" aria-describedby="bottom_pos">\n            Bottom\n          </StyledButton>\n        </Hint>\n        <Hint\n          {...props}\n          visible={visible4}\n          onVisibilityChange={handleVisibilityChange4}\n          renderContent={() => text}\n          id="left-pos"\n          hintPosition="left"\n        >\n          <StyledButton dimension="s" aria-label="Additional information" aria-describedby="left-pos">\n            Left\n          </StyledButton>\n        </Hint>\n      </div>\n    </ThemeProvider>\n  );\n};\n'},description:{story:"Компонент имеет 8 основных вариантов позиционирования: снизу справа, снизу слева, сверху справа, \n        сверху слева, слева внизу, слева вверху, справа внизу и справа вверху. Позиции перечислены в порядке приоритета.\n        По умолчанию компонент сам рассчитывает свою позицию, исходя из приоритета позиций и свободного места на экране.\n        Если хинт не помещается ни в один из перечисленных 8 вариантов позиционирования, то происходит проверка того, можно ли разместить хинт\n        снизу/сверху/слева/справа относительно центра target-элемента или снизу/сверху по центру страницы.\n\nТакже \n        пользователь может сам с помощью параметра hintPosition задать, с какой стороны от target-элемента должен появляться Hint.\n        Параметр hintPosition может принимать следующие значения - bottom|top|left|right. \n\n* При hintPosition='bottom' \n        хинт рендерится снизу от target-элемента с возможным сдвигом по горизонтальной оси, т.е. происходит выбор \n        из 4 вариантов позиционирования: снизу справа, снизу слева, снизу по центру target-элемента и \n        снизу по центру страницы (позиции расположены в порядке приоритета);\n\n* При hintPosition='top' хинт рендерится сверху от target-элемента \n        с возможным сдвигом по горизонтальной оси, т.е. происходит выбор из 4 вариантов позиционирования: сверху справа, сверху слева, сверху \n        по центру target-элемента и сверху по центру страницы (позиции расположены в порядке приоритета);\n\n* При hintPosition='left' \n        хинт рендерится слева от target-элемента с возможным сдвигом по вертикальной оси, т.е. происходит выбор из 3 вариантов позиционирования: \n        слева снизу, слева сверху и слева по центру target-элемента (позиции расположены в порядке приоритета);\n\n* При hintPosition='right' \n        хинт рендерится справа от target-элемента с возможным сдвигом по вертикальной оси, т.е. происходит выбор из 3 вариантов \n        позиционирования: справа снизу, справа сверху и справа по центру target-элемента (позиции расположены в порядке приоритета).\n\nНа \n        экранах мобильных устройств, меньше 640px, \n        компонент адаптируется по ширине к рабочей области устройства, то есть занимает всю ширину экрана \n        и позиционируется только снизу или сверху от target-элемента.\n\nНиже приведен пример с использованием параметра hintPosition."}}},name:"Hint. Позиционирование."},HintClickStory=props=>(0,jsx_runtime.jsx)(HintClickTemplate,{...props});HintClickStory.displayName="HintClickStory";const HintClickExample={render:HintClickStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport { Hint, Button } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nexport const HintClickTemplate = ({\n  themeBorderKind,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Hint\n        {...props}\n        renderContent={() => text}\n        anchorId=\"hint_click\"\n        visibilityTrigger=\"click\"\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint_click\"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n"}}},name:"Hint. Появление по клику."},HintTextButtonStory=props=>(0,jsx_runtime.jsx)(HintTextButtonTemplate,{...props});HintTextButtonStory.displayName="HintTextButtonStory";const HintTextButtonExample={render:HintTextButtonStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport { Hint, Button, TextButton } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nconst Separator = styled.div<{ height?: number }>`\n  height: ${({ height }) => (height ? height : 20)}px;\n`;\n\nexport const HintTextButtonTemplate = ({\n  themeBorderKind,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Hint\n        {...props}\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n        visibilityTrigger=\"click\"\n        renderContent={() => (\n          <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n            {text}\n            <Separator height={4} />\n            <TextButton appearance=\"primary\" dimension=\"s\" text=\"Text Button\" />\n          </div>\n        )}\n        anchorId=\"hint_textbutton\"\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint_textbutton\"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n"},description:{story:"В качества контента хинта может выступать любой ReactNode, \n        например допускается использование TextButton внутри хинта. В случае если \n      хинт содержит в себе TextButton, триггером его появления должен быть click."}}},name:"Hint. Пример с кнопкой."},HintTargetStory=props=>(0,jsx_runtime.jsx)(HintTargetTemplate,{...props});HintTargetStory.displayName="HintTargetStory";const HintTargetExample={render:HintTargetStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport { Hint, Button } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nexport const HintTargetTemplate = ({\n  themeBorderKind,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType }) => {\n  const btnRef = React.useRef<HTMLButtonElement>(null);\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Button\n        ref={btnRef}\n        dimension=\"xl\"\n        appearance=\"primary\"\n        iconEnd={\n          <Hint\n            {...props}\n            visible={visible}\n            onVisibilityChange={handleVisibilityChange}\n            renderContent={() => text}\n            targetElement={btnRef.current}\n            anchorId=\"hint_target\"\n          >\n            <HelpOutline tabIndex={0} height={24} width={24} aria-label=\"Help Icon\" aria-describedby=\"hint_target\" />\n          </Hint>\n        }\n      >\n        Hover on icon\n      </Button>\n    </ThemeProvider>\n  );\n};\n"}}},name:"Hint. Позиционирование относительно targetElement."},HintClassNameStory=props=>(0,jsx_runtime.jsx)(HintClassNameTemplate,{...props});HintClassNameStory.displayName="HintClassNameStory";const HintClassNameExample={render:HintClassNameStory,parameters:{docs:{source:{code:'import * as React from \'react\';\nimport { Hint, Button } from \'@admiral-ds/react-ui\';\nimport type { HintProps, BorderRadiusType } from \'@admiral-ds/react-ui\';\nimport { ReactComponent as HelpOutline } from \'@admiral-ds/icons/build/service/HelpOutline.svg\';\nimport { ThemeProvider } from \'styled-components\';\nimport { createBorderRadiusSwapper } from \'../../../../.storybook/createBorderRadiusSwapper\';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nexport const HintClassNameTemplate = ({\n  themeBorderKind,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Hint\n        {...props}\n        className="custom-hint-class"\n        renderContent={() => text}\n        anchorId="hint-class1"\n        visibilityTrigger="click"\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n      >\n        <Button\n          dimension="xl"\n          appearance="primary"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label="Additional information"\n          aria-describedby="hint-class1"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n'},description:{story:"На Hint, созданный через портал, добавляется класс через пропс className."}}},name:"Hint. ClassName."},HintAnchorCssStory=props=>(0,jsx_runtime.jsx)(HintAnchorCssTemplate,{...props});HintAnchorCssStory.displayName="HintAnchorCssStory";const HintAnchorCssExample={render:HintAnchorCssStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport { Hint, Button } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider, css } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nconst anchorCss = css`\n  padding: 10px;\n  border: 2px dotted red;\n`;\n\nexport const HintAnchorCssTemplate = ({\n  themeBorderKind,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Hint\n        {...props}\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n        renderContent={() => text}\n        anchorId=\"hint_css\"\n        anchorCssMixin={anchorCss}\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint_css\"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n"}}},name:"Hint. Стилизация внешнего контейнера (AnchorWrapper) с помощью anchorCssMixin."},HintWithHeaderStory=props=>(0,jsx_runtime.jsx)(HintWithHeaderTemplate,{...props});HintWithHeaderStory.displayName="HintWithHeaderStory";const HintWithHeaderExample={render:HintWithHeaderStory,parameters:{docs:{source:{code:'import * as React from \'react\';\nimport { Hint, Button, T } from \'@admiral-ds/react-ui\';\nimport type { HintProps, BorderRadiusType } from \'@admiral-ds/react-ui\';\nimport { ReactComponent as HelpOutline } from \'@admiral-ds/icons/build/service/HelpOutline.svg\';\nimport { ThemeProvider } from \'styled-components\';\nimport { createBorderRadiusSwapper } from \'../../../../.storybook/createBorderRadiusSwapper\';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nconst renderHintContent = () => {\n  return (\n    <div>\n      <T font="Subtitle/Subtitle 3" as="div" style={{ marginBottom: \'4px\' }}>\n        Hint header\n      </T>\n      {text}\n    </div>\n  );\n};\n\nexport const HintWithHeaderTemplate = ({\n  themeBorderKind,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Hint\n        {...props}\n        renderContent={renderHintContent}\n        anchorId="hint_click"\n        visibilityTrigger="click"\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n      >\n        <Button\n          dimension="xl"\n          appearance="primary"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label="Additional information"\n          aria-describedby="hint_click"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n'},description:{story:"В качества контента хинта может выступать любой ReactNode, \n        можно добавить, например, заголовок."}}},name:"Hint с заголовком."};HintBaseExample.parameters={...HintBaseExample.parameters,docs:{...HintBaseExample.parameters?.docs,source:{originalSource:"{\n  render: HintBaseStory,\n  parameters: {\n    docs: {\n      source: {\n        code: HintBaseRaw\n      }\n    }\n  },\n  name: 'Hint. Базовый пример.'\n}",...HintBaseExample.parameters?.docs?.source}}},HintPositionExample.parameters={...HintPositionExample.parameters,docs:{...HintPositionExample.parameters?.docs,source:{originalSource:"{\n  render: HintPositionStory,\n  parameters: {\n    docs: {\n      source: {\n        code: HintPositionRaw\n      },\n      description: {\n        story: `Компонент имеет 8 основных вариантов позиционирования: снизу справа, снизу слева, сверху справа, \n        сверху слева, слева внизу, слева вверху, справа внизу и справа вверху. Позиции перечислены в порядке приоритета.\n        По умолчанию компонент сам рассчитывает свою позицию, исходя из приоритета позиций и свободного места на экране.\n        Если хинт не помещается ни в один из перечисленных 8 вариантов позиционирования, то происходит проверка того, можно ли разместить хинт\n        снизу/сверху/слева/справа относительно центра target-элемента или снизу/сверху по центру страницы.\\n\\nТакже \n        пользователь может сам с помощью параметра hintPosition задать, с какой стороны от target-элемента должен появляться Hint.\n        Параметр hintPosition может принимать следующие значения - bottom|top|left|right. \\n\\n* При hintPosition='bottom' \n        хинт рендерится снизу от target-элемента с возможным сдвигом по горизонтальной оси, т.е. происходит выбор \n        из 4 вариантов позиционирования: снизу справа, снизу слева, снизу по центру target-элемента и \n        снизу по центру страницы (позиции расположены в порядке приоритета);\\n\\n* При hintPosition='top' хинт рендерится сверху от target-элемента \n        с возможным сдвигом по горизонтальной оси, т.е. происходит выбор из 4 вариантов позиционирования: сверху справа, сверху слева, сверху \n        по центру target-элемента и сверху по центру страницы (позиции расположены в порядке приоритета);\\n\\n* При hintPosition='left' \n        хинт рендерится слева от target-элемента с возможным сдвигом по вертикальной оси, т.е. происходит выбор из 3 вариантов позиционирования: \n        слева снизу, слева сверху и слева по центру target-элемента (позиции расположены в порядке приоритета);\\n\\n* При hintPosition='right' \n        хинт рендерится справа от target-элемента с возможным сдвигом по вертикальной оси, т.е. происходит выбор из 3 вариантов \n        позиционирования: справа снизу, справа сверху и справа по центру target-элемента (позиции расположены в порядке приоритета).\\n\\nНа \n        экранах мобильных устройств, меньше 640px, \n        компонент адаптируется по ширине к рабочей области устройства, то есть занимает всю ширину экрана \n        и позиционируется только снизу или сверху от target-элемента.\\n\\nНиже приведен пример с использованием параметра hintPosition.`\n      }\n    }\n  },\n  name: 'Hint. Позиционирование.'\n}",...HintPositionExample.parameters?.docs?.source}}},HintClickExample.parameters={...HintClickExample.parameters,docs:{...HintClickExample.parameters?.docs,source:{originalSource:"{\n  render: HintClickStory,\n  parameters: {\n    docs: {\n      source: {\n        code: HintClickRaw\n      }\n    }\n  },\n  name: 'Hint. Появление по клику.'\n}",...HintClickExample.parameters?.docs?.source}}},HintTextButtonExample.parameters={...HintTextButtonExample.parameters,docs:{...HintTextButtonExample.parameters?.docs,source:{originalSource:"{\n  render: HintTextButtonStory,\n  parameters: {\n    docs: {\n      source: {\n        code: HintTextButtonRaw\n      },\n      description: {\n        story: `В качества контента хинта может выступать любой ReactNode, \n        например допускается использование TextButton внутри хинта. В случае если \n      хинт содержит в себе TextButton, триггером его появления должен быть click.`\n      }\n    }\n  },\n  name: 'Hint. Пример с кнопкой.'\n}",...HintTextButtonExample.parameters?.docs?.source}}},HintTargetExample.parameters={...HintTargetExample.parameters,docs:{...HintTargetExample.parameters?.docs,source:{originalSource:"{\n  render: HintTargetStory,\n  parameters: {\n    docs: {\n      source: {\n        code: HintTargetRaw\n      }\n    }\n  },\n  name: 'Hint. Позиционирование относительно targetElement.'\n}",...HintTargetExample.parameters?.docs?.source}}},HintClassNameExample.parameters={...HintClassNameExample.parameters,docs:{...HintClassNameExample.parameters?.docs,source:{originalSource:"{\n  render: HintClassNameStory,\n  parameters: {\n    docs: {\n      source: {\n        code: HintClassNameRaw\n      },\n      description: {\n        story: `На Hint, созданный через портал, добавляется класс через пропс className.`\n      }\n    }\n  },\n  name: 'Hint. ClassName.'\n}",...HintClassNameExample.parameters?.docs?.source}}},HintAnchorCssExample.parameters={...HintAnchorCssExample.parameters,docs:{...HintAnchorCssExample.parameters?.docs,source:{originalSource:"{\n  render: HintAnchorCssStory,\n  parameters: {\n    docs: {\n      source: {\n        code: HintAnchorCssRaw\n      }\n    }\n  },\n  name: 'Hint. Стилизация внешнего контейнера (AnchorWrapper) с помощью anchorCssMixin.'\n}",...HintAnchorCssExample.parameters?.docs?.source}}},HintWithHeaderExample.parameters={...HintWithHeaderExample.parameters,docs:{...HintWithHeaderExample.parameters?.docs,source:{originalSource:"{\n  render: HintWithHeaderStory,\n  parameters: {\n    docs: {\n      source: {\n        code: HintWithHeaderRaw\n      },\n      description: {\n        story: `В качества контента хинта может выступать любой ReactNode, \n        можно добавить, например, заголовок.`\n      }\n    }\n  },\n  name: 'Hint с заголовком.'\n}",...HintWithHeaderExample.parameters?.docs?.source}}};const __namedExportsOrder=["HintBaseExample","HintPositionExample","HintClickExample","HintTextButtonExample","HintTargetExample","HintClassNameExample","HintAnchorCssExample","HintWithHeaderExample"]},"./src/components/T/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>T});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),_src_components_Typography__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/components/Typography/typography.ts"),_src_components_themes__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/themes/common/index.ts"),_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/skeleton/animation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const skeletonMixin=(0,styled_components__WEBPACK_IMPORTED_MODULE_2__.iv)(["",";pointer-events:none;"],_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_3__.x),Tspan=styled_components__WEBPACK_IMPORTED_MODULE_2__.ZP.span.withConfig({displayName:"T__Tspan",componentId:"sc-1bd4slr-0"})(["color:",";",";"," ",""],(({$color,theme,$skeleton})=>$skeleton?"transparent":$color?theme.color[$color]?theme.color[$color]:$color:theme.color[_src_components_themes__WEBPACK_IMPORTED_MODULE_4__.rG]),(p=>_src_components_Typography__WEBPACK_IMPORTED_MODULE_5__.c[p.$font]),(p=>p.$cssMixin?p.$cssMixin:""),(p=>p.$skeleton&&skeletonMixin)),T=(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((({font,color,cssMixin,skeleton,...props},ref)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Tspan,{ref,...props,$font:font,$color:color,$cssMixin:cssMixin,$skeleton:skeleton})));T.displayName="T";try{T.displayName="T",T.__docgenInfo={description:"",displayName:"T",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/T/index.tsx#T"]={docgenInfo:T.__docgenInfo,name:"T",path:"src/components/T/index.tsx#T"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/TextButton/commonMixin.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c8:()=>skeletonMixin,qO:()=>ButtonContainer,qk:()=>IconContainer});var styled_components__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js");const IconContainer=styled_components__WEBPACK_IMPORTED_MODULE_0__.ZP.div.withConfig({displayName:"commonMixin__IconContainer",componentId:"sc-4cq1gw-0"})([""]),ButtonContainer=styled_components__WEBPACK_IMPORTED_MODULE_0__.ZP.div.withConfig({displayName:"commonMixin__ButtonContainer",componentId:"sc-4cq1gw-1"})([""]),loadingKeyframes=(0,styled_components__WEBPACK_IMPORTED_MODULE_0__.F4)(["to{background-position:315px 0,0 0,0 190px,50px 195px;}"]),skeletonMixin=(0,styled_components__WEBPACK_IMPORTED_MODULE_0__.iv)(["cursor:progress;background-image:linear-gradient(0.25turn,transparent,#fff,transparent),linear-gradient(#eee,#eee),radial-gradient(38px circle at 19px 19px,#eee 50%,transparent 51%),linear-gradient(#eee,#eee);background-repeat:no-repeat;background-size:315px 250px,315px 180px,100px 100px,225px 30px;background-position:-315px 0,0 0,0 190px,50px 195px;animation:"," 1.5s infinite;"],loadingKeyframes)},"./src/components/TextButton/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>TextButton});var react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),Spinner=__webpack_require__("./src/components/Spinner/index.tsx"),commonMixin=__webpack_require__("./src/components/TextButton/commonMixin.ts"),borderRadius=__webpack_require__("./src/components/themes/borderRadius.ts");const defaultAppearanceMixin=(0,styled_components_browser_esm.iv)(["","{",";border-radius:",";svg{visibility:",";}}border-radius:",";&:focus-visible{outline-offset:2px;outline:"," solid 2px;}&:hover{cursor:pointer;color:",";","{svg{path{fill:",";}}}}&:active{color:",";","{svg{path{fill:",";}}}}&:disabled{cursor:not-allowed;color:",";","{svg{path{fill:",";}}}}"],commonMixin.qk,(({$skeleton})=>$skeleton&&commonMixin.c8),(({$skeleton})=>$skeleton?"50%":""),(p=>p.$skeleton||p.$loading?"hidden":"visible"),(p=>p.$skeleton?0:(0,borderRadius.c8)(p.theme.shape)),(p=>p.theme.color["Primary/Primary 60 Main"]),(({theme})=>theme.color["Primary/Primary 70"]),commonMixin.qk,(({theme})=>theme.color["Primary/Primary 70"]),(({theme})=>theme.color["Primary/Primary 80"]),commonMixin.qk,(({theme})=>theme.color["Primary/Primary 80"]),(({theme})=>theme.color["Neutral/Neutral 30"]),commonMixin.qk,(({theme})=>theme.color["Neutral/Neutral 30"])),primaryAppearanceMixin=(0,styled_components_browser_esm.iv)(["color:",";","{svg{path{fill:",";}}}"],(({theme})=>theme.color["Primary/Primary 60 Main"]),commonMixin.qk,(({theme})=>theme.color["Primary/Primary 60 Main"])),secondaryAppearanceMixin=(0,styled_components_browser_esm.iv)(["color:",";","{svg{path{fill:",";}}}"],(({theme})=>theme.color["Neutral/Neutral 90"]),commonMixin.qk,(({theme})=>theme.color["Neutral/Neutral 50"])),appearanceMixin=(0,styled_components_browser_esm.iv)(["&[data-appearance='primary']{","}&[data-appearance='secondary']{","}",""],primaryAppearanceMixin,secondaryAppearanceMixin,defaultAppearanceMixin);var typography=__webpack_require__("./src/components/Typography/typography.ts");const dimensionMixin=(0,styled_components_browser_esm.iv)(["&[data-dimension='m']{","{width:24px;height:24px;}",";}&[data-dimension='s']{","{width:20px;height:20px;}",";}"],commonMixin.qk,typography.c["Button/Button 1"],commonMixin.qk,typography.c["Button/Button 2"]);var animation=__webpack_require__("./src/components/skeleton/animation.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const StyledSpinner=(0,styled_components_browser_esm.ZP)(Spinner.$).withConfig({displayName:"TextButton__StyledSpinner",componentId:"sc-1tmi7dj-0"})(["position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);"]),StyledButton=styled_components_browser_esm.ZP.button.withConfig({displayName:"TextButton__StyledButton",componentId:"sc-1tmi7dj-1"})(["position:relative;box-sizing:border-box;display:inline-flex;flex-direction:row;gap:8px;align-items:center;vertical-align:middle;appearance:none;border:none;background:transparent;padding:0;white-space:nowrap;",";","{visibility:",";}","{visibility:",";}",";",";"],(p=>p.$skeleton&&animation.x),commonMixin.qO,(p=>p.$skeleton||p.$loading?"hidden":"visible"),commonMixin.qk,(p=>p.$skeleton||p.$loading?"hidden":"visible"),appearanceMixin,dimensionMixin),TextButton=react.forwardRef((({appearance="primary",dimension="m",icon,iconStart,iconEnd,type="button",text,displayRight=!1,loading=!1,skeleton=!1,...props},ref)=>{const disabled=props.disabled||loading||skeleton;return(0,jsx_runtime.jsxs)(StyledButton,{...props,"data-dimension":dimension,"data-appearance":appearance,ref,$appearance:appearance,$dimension:dimension,type,disabled,$loading:loading,$skeleton:skeleton,children:[loading&&(0,jsx_runtime.jsx)(StyledSpinner,{dimension:"s"===dimension?"ms":"m"}),iconStart?(0,jsx_runtime.jsx)(commonMixin.qk,{children:iconStart}):icon&&!displayRight?(0,jsx_runtime.jsx)(commonMixin.qk,{children:icon}):null,(0,jsx_runtime.jsx)(commonMixin.qO,{children:(0,jsx_runtime.jsx)("span",{children:text})}),iconEnd?(0,jsx_runtime.jsx)(commonMixin.qk,{children:iconEnd}):icon&&displayRight?(0,jsx_runtime.jsx)(commonMixin.qk,{children:icon}):null]})}));TextButton.displayName="TextButton";try{TextButton.displayName="TextButton",TextButton.__docgenInfo={description:"",displayName:"TextButton",props:{appearance:{defaultValue:{value:"primary"},description:"Внешний вид кнопки",name:"appearance",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'}]}},dimension:{defaultValue:{value:"m"},description:"Размер кнопки",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'}]}},icon:{defaultValue:null,description:"@deprecated Используйте iconStart или iconEnd\nИконка кнопки",name:"icon",required:!1,type:{name:"ReactNode"}},iconStart:{defaultValue:null,description:"Иконка перед текстом кнопки",name:"iconStart",required:!1,type:{name:"ReactNode"}},iconEnd:{defaultValue:null,description:"Иконка после текста кнопки",name:"iconEnd",required:!1,type:{name:"ReactNode"}},text:{defaultValue:null,description:"Текст кнопки",name:"text",required:!1,type:{name:"string"}},displayRight:{defaultValue:{value:"false"},description:"@deprecated Используйте iconStart или iconEnd\nПозиционирование иконки. По умолчанию - слева",name:"displayRight",required:!1,type:{name:"boolean"}},loading:{defaultValue:{value:"false"},description:"Состояние загрузки",name:"loading",required:!1,type:{name:"boolean"}},skeleton:{defaultValue:{value:"false"},description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TextButton/index.tsx#TextButton"]={docgenInfo:TextButton.__docgenInfo,name:"TextButton",path:"src/components/TextButton/index.tsx#TextButton"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/themes/common/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{lI:()=>MainPrimaryColorName,rG:()=>DefaultFontColorName,sl:()=>DefaultBackgroundColorName});const DefaultFontColorName="Neutral/Neutral 90",DefaultBackgroundColorName="Neutral/Neutral 00",MainPrimaryColorName="Primary/Primary 60 Main"}}]);