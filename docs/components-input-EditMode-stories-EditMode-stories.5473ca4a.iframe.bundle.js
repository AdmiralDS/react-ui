"use strict";(self.webpackChunk_admiral_ds_react_ui=self.webpackChunk_admiral_ds_react_ui||[]).push([[2584],{"./src/components/input/EditMode/stories/EditMode.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CssMixinExample:()=>CssMixinExample,DimensionExample:()=>DimensionExample,DisabledExample:()=>DisabledExample,Playground:()=>Playground,__namedExportsOrder:()=>__namedExportsOrder,default:()=>EditMode_stories});var react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),EditMode=__webpack_require__("./src/components/input/EditMode/index.tsx"),types=__webpack_require__("./src/components/input/types.ts"),borderRadius=__webpack_require__("./src/components/themes/borderRadius.ts"),createBorderRadiusSwapper=__webpack_require__("./.storybook/createBorderRadiusSwapper.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const EditModePlaygroundTemplate=({value="Привет!",placeholder="Placeholder",themeBorderKind,...props})=>{const[localValue,setValue]=react.useState(String(value)??"");return(0,jsx_runtime.jsx)(styled_components_browser_esm.Mp,{theme:(0,createBorderRadiusSwapper.M)(themeBorderKind),children:(0,jsx_runtime.jsx)(EditMode.W,{...props,value:localValue,onChange:e=>{const inputValue=e.currentTarget.value;setValue(inputValue),props.onChange?.(e)},placeholder})})};EditModePlaygroundTemplate.displayName="EditModePlaygroundTemplate";try{EditModePlaygroundTemplate.displayName="EditModePlaygroundTemplate",EditModePlaygroundTemplate.__docgenInfo={description:"",displayName:"EditModePlaygroundTemplate",props:{value:{defaultValue:{value:"Привет!"},description:"Значение компонента",name:"value",required:!1,type:{name:"string | number"}},onChange:{defaultValue:null,description:"Колбек на изменение значения компонента",name:"onChange",required:!0,type:{name:"ChangeEventHandler<HTMLInputElement>"}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'},{value:'"xxl"'}]}},bold:{defaultValue:null,description:"Жирное начертание текста. В размерах xl и xxl текст всегда жирный",name:"bold",required:!1,type:{name:"boolean"}},containerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин на контейнер компонента, созданный с помощью styled css.",name:"containerCssMixin",required:!1,type:{name:"RuleSet<object>"}},onEdit:{defaultValue:null,description:"Функция обработчика события нажатия кнопки начала редактирования\n@param value - значение поля ввода для редактирования",name:"onEdit",required:!1,type:{name:"((value: string | number) => void)"}},onConfirm:{defaultValue:null,description:"Функция обработчика события нажатия кнопки подтверждения введенного значения\n@param value - отредактированное значение поля ввода",name:"onConfirm",required:!1,type:{name:"((value: string | number) => void)"}},onCancel:{defaultValue:null,description:"Функция обработчика события нажатия кнопки отмены\n@param value - значение поля ввода до нажатия кнопки редактирования",name:"onCancel",required:!1,type:{name:"((value: string | number) => void)"}},onClear:{defaultValue:null,description:"@deprecated Используйте onCancel\nКолбек на нажатие кнопки очистки инпута",name:"onClear",required:!1,type:{name:"(() => void)"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},multilineView:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"multilineView",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},icons:{defaultValue:null,description:"Иконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/EditMode/stories/EditModePlayground.template.tsx#EditModePlaygroundTemplate"]={docgenInfo:EditModePlaygroundTemplate.__docgenInfo,name:"EditModePlaygroundTemplate",path:"src/components/input/EditMode/stories/EditModePlayground.template.tsx#EditModePlaygroundTemplate"})}catch(__react_docgen_typescript_loader_error){}var T=__webpack_require__("./src/components/T/index.tsx");const Separator=styled_components_browser_esm.cp.div.withConfig({displayName:"EditModeDimensiontemplate__Separator",componentId:"sc-1tbvhba-0"})(["height:20px;"]),EditModeDimensionTemplate=({value="Привет!",themeBorderKind,...props})=>{const[localValue,setValue]=react.useState(String(value)??""),handleChange=e=>{const inputValue=e.currentTarget.value;setValue(inputValue),props.onChange?.(e)};return(0,jsx_runtime.jsxs)(styled_components_browser_esm.Mp,{theme:(0,createBorderRadiusSwapper.M)(themeBorderKind),children:[(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",children:"Dimension - s"}),(0,jsx_runtime.jsx)(EditMode.W,{...props,value:localValue,onChange:handleChange,dimension:"s"}),(0,jsx_runtime.jsx)(Separator,{}),(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",children:"Dimension - s bold"}),(0,jsx_runtime.jsx)(EditMode.W,{...props,value:localValue,onChange:handleChange,dimension:"s",bold:!0}),(0,jsx_runtime.jsx)(Separator,{}),(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",children:"Dimension - m"}),(0,jsx_runtime.jsx)(EditMode.W,{...props,value:localValue,onChange:handleChange}),(0,jsx_runtime.jsx)(Separator,{}),(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",children:"Dimension - m bold"}),(0,jsx_runtime.jsx)(EditMode.W,{...[props],value:localValue,onChange:handleChange,bold:!0}),(0,jsx_runtime.jsx)(Separator,{}),(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",children:"Dimension - xl"}),(0,jsx_runtime.jsx)(EditMode.W,{...props,value:localValue,onChange:handleChange,dimension:"xl"}),(0,jsx_runtime.jsx)(Separator,{}),(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",children:"Dimension - xxl"}),(0,jsx_runtime.jsx)(EditMode.W,{...props,value:localValue,onChange:handleChange,dimension:"xxl"})]})};EditModeDimensionTemplate.displayName="EditModeDimensionTemplate";try{EditModeDimensionTemplate.displayName="EditModeDimensionTemplate",EditModeDimensionTemplate.__docgenInfo={description:"",displayName:"EditModeDimensionTemplate",props:{value:{defaultValue:{value:"Привет!"},description:"Значение компонента",name:"value",required:!1,type:{name:"string | number"}},onChange:{defaultValue:null,description:"Колбек на изменение значения компонента",name:"onChange",required:!0,type:{name:"ChangeEventHandler<HTMLInputElement>"}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'},{value:'"xxl"'}]}},bold:{defaultValue:null,description:"Жирное начертание текста. В размерах xl и xxl текст всегда жирный",name:"bold",required:!1,type:{name:"boolean"}},containerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин на контейнер компонента, созданный с помощью styled css.",name:"containerCssMixin",required:!1,type:{name:"RuleSet<object>"}},onEdit:{defaultValue:null,description:"Функция обработчика события нажатия кнопки начала редактирования\n@param value - значение поля ввода для редактирования",name:"onEdit",required:!1,type:{name:"((value: string | number) => void)"}},onConfirm:{defaultValue:null,description:"Функция обработчика события нажатия кнопки подтверждения введенного значения\n@param value - отредактированное значение поля ввода",name:"onConfirm",required:!1,type:{name:"((value: string | number) => void)"}},onCancel:{defaultValue:null,description:"Функция обработчика события нажатия кнопки отмены\n@param value - значение поля ввода до нажатия кнопки редактирования",name:"onCancel",required:!1,type:{name:"((value: string | number) => void)"}},onClear:{defaultValue:null,description:"@deprecated Используйте onCancel\nКолбек на нажатие кнопки очистки инпута",name:"onClear",required:!1,type:{name:"(() => void)"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},multilineView:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"multilineView",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},icons:{defaultValue:null,description:"Иконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/EditMode/stories/EditModeDimension.template.tsx#EditModeDimensionTemplate"]={docgenInfo:EditModeDimensionTemplate.__docgenInfo,name:"EditModeDimensionTemplate",path:"src/components/input/EditMode/stories/EditModeDimension.template.tsx#EditModeDimensionTemplate"})}catch(__react_docgen_typescript_loader_error){}const EditModeDisabledTemplate=({value="Привет!",themeBorderKind,...props})=>{const[localValue,setValue]=react.useState(String(value)??"");return(0,jsx_runtime.jsx)(styled_components_browser_esm.Mp,{theme:(0,createBorderRadiusSwapper.M)(themeBorderKind),children:(0,jsx_runtime.jsx)(EditMode.W,{...props,value:localValue,onChange:e=>{const inputValue=e.currentTarget.value;setValue(inputValue),props.onChange?.(e)},disabled:!0})})};EditModeDisabledTemplate.displayName="EditModeDisabledTemplate";try{EditModeDisabledTemplate.displayName="EditModeDisabledTemplate",EditModeDisabledTemplate.__docgenInfo={description:"",displayName:"EditModeDisabledTemplate",props:{value:{defaultValue:{value:"Привет!"},description:"Значение компонента",name:"value",required:!1,type:{name:"string | number"}},onChange:{defaultValue:null,description:"Колбек на изменение значения компонента",name:"onChange",required:!0,type:{name:"ChangeEventHandler<HTMLInputElement>"}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'},{value:'"xxl"'}]}},bold:{defaultValue:null,description:"Жирное начертание текста. В размерах xl и xxl текст всегда жирный",name:"bold",required:!1,type:{name:"boolean"}},containerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин на контейнер компонента, созданный с помощью styled css.",name:"containerCssMixin",required:!1,type:{name:"RuleSet<object>"}},onEdit:{defaultValue:null,description:"Функция обработчика события нажатия кнопки начала редактирования\n@param value - значение поля ввода для редактирования",name:"onEdit",required:!1,type:{name:"((value: string | number) => void)"}},onConfirm:{defaultValue:null,description:"Функция обработчика события нажатия кнопки подтверждения введенного значения\n@param value - отредактированное значение поля ввода",name:"onConfirm",required:!1,type:{name:"((value: string | number) => void)"}},onCancel:{defaultValue:null,description:"Функция обработчика события нажатия кнопки отмены\n@param value - значение поля ввода до нажатия кнопки редактирования",name:"onCancel",required:!1,type:{name:"((value: string | number) => void)"}},onClear:{defaultValue:null,description:"@deprecated Используйте onCancel\nКолбек на нажатие кнопки очистки инпута",name:"onClear",required:!1,type:{name:"(() => void)"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},multilineView:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"multilineView",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},icons:{defaultValue:null,description:"Иконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/EditMode/stories/EditModeDisabled.template.tsx#EditModeDisabledTemplate"]={docgenInfo:EditModeDisabledTemplate.__docgenInfo,name:"EditModeDisabledTemplate",path:"src/components/input/EditMode/stories/EditModeDisabled.template.tsx#EditModeDisabledTemplate"})}catch(__react_docgen_typescript_loader_error){}const cssMixin=(0,styled_components_browser_esm.gV)(["width:300px;"]),EditModeCssMixinTemplate=({value="Привет!",themeBorderKind,...props})=>{const[localValue,setValue]=react.useState(String(value)??"");return(0,jsx_runtime.jsx)(styled_components_browser_esm.Mp,{theme:(0,createBorderRadiusSwapper.M)(themeBorderKind),children:(0,jsx_runtime.jsx)(EditMode.W,{...props,value:localValue,onChange:e=>{const inputValue=e.currentTarget.value;setValue(inputValue),props.onChange?.(e)},containerCssMixin:cssMixin})})};EditModeCssMixinTemplate.displayName="EditModeCssMixinTemplate";try{EditModeCssMixinTemplate.displayName="EditModeCssMixinTemplate",EditModeCssMixinTemplate.__docgenInfo={description:"",displayName:"EditModeCssMixinTemplate",props:{value:{defaultValue:{value:"Привет!"},description:"Значение компонента",name:"value",required:!1,type:{name:"string | number"}},onChange:{defaultValue:null,description:"Колбек на изменение значения компонента",name:"onChange",required:!0,type:{name:"ChangeEventHandler<HTMLInputElement>"}},dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'},{value:'"xxl"'}]}},bold:{defaultValue:null,description:"Жирное начертание текста. В размерах xl и xxl текст всегда жирный",name:"bold",required:!1,type:{name:"boolean"}},containerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин на контейнер компонента, созданный с помощью styled css.",name:"containerCssMixin",required:!1,type:{name:"RuleSet<object>"}},onEdit:{defaultValue:null,description:"Функция обработчика события нажатия кнопки начала редактирования\n@param value - значение поля ввода для редактирования",name:"onEdit",required:!1,type:{name:"((value: string | number) => void)"}},onConfirm:{defaultValue:null,description:"Функция обработчика события нажатия кнопки подтверждения введенного значения\n@param value - отредактированное значение поля ввода",name:"onConfirm",required:!1,type:{name:"((value: string | number) => void)"}},onCancel:{defaultValue:null,description:"Функция обработчика события нажатия кнопки отмены\n@param value - значение поля ввода до нажатия кнопки редактирования",name:"onCancel",required:!1,type:{name:"((value: string | number) => void)"}},onClear:{defaultValue:null,description:"@deprecated Используйте onCancel\nКолбек на нажатие кнопки очистки инпута",name:"onClear",required:!1,type:{name:"(() => void)"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},multilineView:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"multilineView",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},icons:{defaultValue:null,description:"Иконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/EditMode/stories/EditModeCssMixin.template.tsx#EditModeCssMixinTemplate"]={docgenInfo:EditModeCssMixinTemplate.__docgenInfo,name:"EditModeCssMixinTemplate",path:"src/components/input/EditMode/stories/EditModeCssMixin.template.tsx#EditModeCssMixinTemplate"})}catch(__react_docgen_typescript_loader_error){}const Desc=styled_components_browser_esm.cp.div.withConfig({displayName:"EditModestories__Desc",componentId:"sc-18iy5si-0"})(["font-family:'VTB Group UI';font-size:16px;line-height:24px;"]),Description=()=>(0,jsx_runtime.jsx)(Desc,{children:"Компонент для редактирования текста. Может быть с лэйблом или без него."});Description.displayName="Description";const EditMode_stories={title:"Admiral-2.1/Input/EditMode",component:EditMode.W,decorators:void 0,parameters:{docs:{source:{code:null}},componentSubtitle:(0,jsx_runtime.jsx)(Description,{}),design:[{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=38%3A10602"},{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=38%3A10901"}]},argTypes:{dimension:{options:["xxl","xl","m","s"],control:{type:"radio"}},status:{control:{type:"radio"},options:types.Q},value:{control:{type:"text"}},bold:{control:{type:"boolean"}},disabled:{control:{type:"boolean"}},readOnly:{control:{type:"boolean"}},disableCopying:{control:{type:"boolean"}},placeholder:{control:{type:"text"}},onChange:{control:!1},themeBorderKind:{options:borderRadius.LX,control:{type:"radio"}},containerCssMixin:{control:!1},icons:{control:!1},containerRef:{control:!1},handleInput:{control:!1},showTooltip:{control:{type:"boolean"}},skeleton:{control:{type:"boolean"}},isLoading:{control:{type:"boolean"}},multilineView:{control:{type:"boolean"}}}},PlaygroundStory=props=>(0,jsx_runtime.jsx)(EditModePlaygroundTemplate,{...props});PlaygroundStory.displayName="PlaygroundStory";const Playground={render:PlaygroundStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport type { ChangeEvent } from 'react';\nimport { EditMode } from '@admiral-ds/react-ui';\nimport type { EditModeProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../../.storybook/createBorderRadiusSwapper';\n\nexport const EditModePlaygroundTemplate = ({\n  value = 'Привет!',\n  placeholder = 'Placeholder',\n  themeBorderKind,\n  ...props\n}: EditModeProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [localValue, setValue] = React.useState<string>(String(value) ?? '');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.currentTarget.value;\n    setValue(inputValue);\n    props.onChange?.(e);\n  };\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <EditMode {...props} value={localValue} onChange={handleChange} placeholder={placeholder} />\n    </ThemeProvider>\n  );\n};\n"}}}},DimensionStory=props=>(0,jsx_runtime.jsx)(EditModeDimensionTemplate,{...props});DimensionStory.displayName="DimensionStory";const DimensionExample={render:DimensionStory,parameters:{docs:{source:{code:'import * as React from \'react\';\nimport type { ChangeEvent } from \'react\';\nimport { EditMode, T } from \'@admiral-ds/react-ui\';\nimport type { EditModeProps, BorderRadiusType } from \'@admiral-ds/react-ui\';\nimport styled, { ThemeProvider } from \'styled-components\';\nimport { createBorderRadiusSwapper } from \'../../../../../.storybook/createBorderRadiusSwapper\';\n\nconst Separator = styled.div`\n  height: 20px;\n`;\n\nexport const EditModeDimensionTemplate = ({\n  value = \'Привет!\',\n  themeBorderKind,\n  ...props\n}: EditModeProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [localValue, setValue] = React.useState<string>(String(value) ?? \'\');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.currentTarget.value;\n    setValue(inputValue);\n    props.onChange?.(e);\n  };\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <T font="Body/Body 1 Long" as="div">\n        Dimension - s\n      </T>\n      <EditMode {...props} value={localValue} onChange={handleChange} dimension="s" />\n      <Separator />\n      <T font="Body/Body 1 Long" as="div">\n        Dimension - s bold\n      </T>\n      <EditMode {...props} value={localValue} onChange={handleChange} dimension="s" bold />\n      <Separator />\n      <T font="Body/Body 1 Long" as="div">\n        Dimension - m\n      </T>\n      <EditMode {...props} value={localValue} onChange={handleChange} />\n      <Separator />\n      <T font="Body/Body 1 Long" as="div">\n        Dimension - m bold\n      </T>\n      <EditMode {...[props]} value={localValue} onChange={handleChange} bold />\n      <Separator />\n      <T font="Body/Body 1 Long" as="div">\n        Dimension - xl\n      </T>\n      <EditMode {...props} value={localValue} onChange={handleChange} dimension="xl" />\n      <Separator />\n      <T font="Body/Body 1 Long" as="div">\n        Dimension - xxl\n      </T>\n      <EditMode {...props} value={localValue} onChange={handleChange} dimension="xxl" />\n    </ThemeProvider>\n  );\n};\n'},description:{story:"Компонент разработан в 4 размерах: S, M (имеют написание Regular и Bold) и XL, XXL (только Bold). \n        Переключение между Regular и Bold не изменяет размеры компонента.\n\nПо умолчанию размер компонента M, \n        для смены размера используйте параметр dimension. Для переключения в написание Bold испольуйте одноименный параметр bold."}}},name:"Варианты размеров и начертания компонента"},DisabledStory=props=>(0,jsx_runtime.jsx)(EditModeDisabledTemplate,{...props});DisabledStory.displayName="DisabledStory";const DisabledExample={render:DisabledStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport type { ChangeEvent } from 'react';\nimport { EditMode } from '@admiral-ds/react-ui';\nimport type { EditModeProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../../.storybook/createBorderRadiusSwapper';\n\nexport const EditModeDisabledTemplate = ({\n  value = 'Привет!',\n  themeBorderKind,\n  ...props\n}: EditModeProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [localValue, setValue] = React.useState<string>(String(value) ?? '');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.currentTarget.value;\n    setValue(inputValue);\n    props.onChange?.(e);\n  };\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <EditMode {...props} value={localValue} onChange={handleChange} disabled />\n    </ThemeProvider>\n  );\n};\n"}}},name:"Компонент в состоянии disabled"},CssMixinStory=props=>(0,jsx_runtime.jsx)(EditModeCssMixinTemplate,{...props});CssMixinStory.displayName="CssMixinStory";const CssMixinExample={render:CssMixinStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport type { ChangeEvent } from 'react';\nimport { EditMode } from '@admiral-ds/react-ui';\nimport type { EditModeProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { css, ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../../.storybook/createBorderRadiusSwapper';\n\nconst cssMixin = css`\n  width: 300px;\n`;\n\nexport const EditModeCssMixinTemplate = ({\n  value = 'Привет!',\n  themeBorderKind,\n  ...props\n}: EditModeProps & { themeBorderKind?: BorderRadiusType }) => {\n  const [localValue, setValue] = React.useState<string>(String(value) ?? '');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.currentTarget.value;\n    setValue(inputValue);\n    props.onChange?.(e);\n  };\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <EditMode {...props} value={localValue} onChange={handleChange} containerCssMixin={cssMixin} />\n    </ThemeProvider>\n  );\n};\n"},description:{story:"Для изменения стилей компонента в контейнер компонента можно передать стили в виде containerCssMixin."}}},name:"Стилизация компонента"};Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:"{\n  render: PlaygroundStory,\n  parameters: {\n    docs: {\n      source: {\n        code: EditModePlaygroundRaw\n      }\n    }\n  }\n}",...Playground.parameters?.docs?.source}}},DimensionExample.parameters={...DimensionExample.parameters,docs:{...DimensionExample.parameters?.docs,source:{originalSource:"{\n  render: DimensionStory,\n  parameters: {\n    docs: {\n      source: {\n        code: EditModeDimensionRaw\n      },\n      description: {\n        story: `Компонент разработан в 4 размерах: S, M (имеют написание Regular и Bold) и XL, XXL (только Bold). \n        Переключение между Regular и Bold не изменяет размеры компонента.\\n\\nПо умолчанию размер компонента M, \n        для смены размера используйте параметр dimension. Для переключения в написание Bold испольуйте одноименный параметр bold.`\n      }\n    }\n  },\n  name: 'Варианты размеров и начертания компонента'\n}",...DimensionExample.parameters?.docs?.source}}},DisabledExample.parameters={...DisabledExample.parameters,docs:{...DisabledExample.parameters?.docs,source:{originalSource:"{\n  render: DisabledStory,\n  parameters: {\n    docs: {\n      source: {\n        code: EditModeDisabledRaw\n      }\n    }\n  },\n  name: 'Компонент в состоянии disabled'\n}",...DisabledExample.parameters?.docs?.source}}},CssMixinExample.parameters={...CssMixinExample.parameters,docs:{...CssMixinExample.parameters?.docs,source:{originalSource:"{\n  render: CssMixinStory,\n  parameters: {\n    docs: {\n      source: {\n        code: EditModeCssMixinRaw\n      },\n      description: {\n        story: `Для изменения стилей компонента в контейнер компонента можно передать стили в виде containerCssMixin.`\n      }\n    }\n  },\n  name: 'Стилизация компонента'\n}",...CssMixinExample.parameters?.docs?.source}}};const __namedExportsOrder=["Playground","DimensionExample","DisabledExample","CssMixinExample"]},"./src/components/T/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>T});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),_src_components_themes__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/themes/common/index.ts"),_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/skeleton/animation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const skeletonMixin=(0,styled_components__WEBPACK_IMPORTED_MODULE_2__.gV)(["",";pointer-events:none;"],_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_3__.Y),Tspan=styled_components__WEBPACK_IMPORTED_MODULE_2__.cp.span.withConfig({displayName:"T__Tspan",componentId:"sc-1bd4slr-0"})(["color:",";",";"," ",""],(({$color,theme,$skeleton})=>$skeleton?"transparent":$color?theme.color[$color]?theme.color[$color]:$color:theme.color[_src_components_themes__WEBPACK_IMPORTED_MODULE_4__.eQ]),(p=>p.theme.typography[p.$font]),(p=>p.$cssMixin?p.$cssMixin:""),(p=>p.$skeleton&&skeletonMixin)),T=(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((({font,color,cssMixin,skeleton,...props},ref)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Tspan,{ref,...props,$font:font,$color:color,$cssMixin:cssMixin,$skeleton:skeleton})));T.displayName="T";try{T.displayName="T",T.__docgenInfo={description:"",displayName:"T",props:{font:{defaultValue:null,description:"Имя шрифта из списка дизайн системы",name:"font",required:!0,type:{name:"enum",value:[{value:'"Main/XXL"'},{value:'"Main/XL"'},{value:'"Main/L"'},{value:'"Main/M"'},{value:'"Main/S"'},{value:'"Main/XS-bold"'},{value:'"Main/XS"'},{value:'"Additional/L-bold"'},{value:'"Additional/L"'},{value:'"Additional/M"'},{value:'"Additional/S"'},{value:'"Additional/S-bold"'},{value:'"Additional/XS"'},{value:'"Button/M"'},{value:'"Button/S"'},{value:'"Caption/XS"'},{value:'"Header/HL1"'},{value:'"Header/HL2"'},{value:'"Header/HL3"'},{value:'"Header/H1"'},{value:'"Header/H2"'},{value:'"Header/H3"'},{value:'"Header/H4"'},{value:'"Header/H5"'},{value:'"Header/H6"'},{value:'"Subtitle/Subtitle 1"'},{value:'"Subtitle/Subtitle 2"'},{value:'"Subtitle/Subtitle 3"'},{value:'"Body/Body 1 Long"'},{value:'"Body/Body 1 Short"'},{value:'"Body/Body 2 Long"'},{value:'"Body/Body 2 Short"'},{value:'"Button/Button 1"'},{value:'"Button/Button 2"'},{value:'"Caption/Caption 1"'},{value:'"Caption/Caption 2"'}]}},color:{defaultValue:null,description:"Имя цвета шрифта из палитры темы *",name:"color",required:!1,type:{name:"enum",value:[{value:'"Neutral/Neutral 00"'},{value:'"Neutral/Neutral 05"'},{value:'"Neutral/Neutral 10"'},{value:'"Neutral/Neutral 20"'},{value:'"Neutral/Neutral 30"'},{value:'"Neutral/Neutral 40"'},{value:'"Neutral/Neutral 50"'},{value:'"Neutral/Neutral 60"'},{value:'"Neutral/Neutral 70"'},{value:'"Neutral/Neutral 80"'},{value:'"Neutral/Neutral 90"'},{value:'"Primary/Primary 10"'},{value:'"Primary/Primary 20"'},{value:'"Primary/Primary 30"'},{value:'"Primary/Primary 40"'},{value:'"Primary/Primary 50"'},{value:'"Primary/Primary 60 Main"'},{value:'"Primary/Primary 70"'},{value:'"Primary/Primary 80"'},{value:'"Special/Static White"'},{value:'"Special/Elevated BG"'},{value:'"Special/Dark Static Neutral 00"'},{value:'"Special/Dark Static Neutral 05"'},{value:'"Special/Dark Static Neutral 10"'},{value:'"Special/Dark Static Neutral 20"'},{value:'"Special/Dark Static Neutral 30"'},{value:'"Special/Dark Static Neutral 50"'},{value:'"Special/Dark Static Neutral 70"'},{value:'"Special/Dark Static Neutral 80"'},{value:'"Special/Dark Static Neutral 90"'},{value:'"Special/Dark Static Primary 60"'},{value:'"Special/Dark Static Primary 70"'},{value:'"Special/Dark Static Primary 80"'},{value:'"Special/Dark Static Error 60"'},{value:'"Special/Dark Static Success 50"'},{value:'"Opacity/Hover"'},{value:'"Opacity/Focus"'},{value:'"Opacity/Press"'},{value:'"Opacity/Modal"'},{value:'"Opacity/Dark Static Hover"'},{value:'"Opacity/Dark Static Focus"'},{value:'"Opacity/Dark Static Press"'},{value:'"Error/Error 10"'},{value:'"Error/Error 20"'},{value:'"Error/Error 30"'},{value:'"Error/Error 40"'},{value:'"Error/Error 50"'},{value:'"Error/Error 60 Main"'},{value:'"Error/Error 70"'},{value:'"Error/Error 80"'},{value:'"Success/Success 10"'},{value:'"Success/Success 20"'},{value:'"Success/Success 30"'},{value:'"Success/Success 40"'},{value:'"Success/Success 50 Main"'},{value:'"Success/Success 60"'},{value:'"Success/Success 70"'},{value:'"Warning/Warning 10"'},{value:'"Warning/Warning 20"'},{value:'"Warning/Warning 30"'},{value:'"Warning/Warning 40"'},{value:'"Warning/Warning 50 Main"'},{value:'"Warning/Warning 60"'},{value:'"Warning/Warning 70"'},{value:'"Attention/Attention 10"'},{value:'"Attention/Attention 20"'},{value:'"Attention/Attention 30"'},{value:'"Attention/Attention 40"'},{value:'"Attention/Attention 50 Main"'},{value:'"Attention/Attention 60"'},{value:'"Attention/Attention 70"'},{value:'"Purple/Purple 10"'},{value:'"Purple/Purple 20"'},{value:'"Purple/Purple 30"'},{value:'"Purple/Purple 40"'},{value:'"Purple/Purple 50"'},{value:'"Purple/Purple 60 Main"'},{value:'"Purple/Purple 70"'},{value:'"Purple/Purple 80"'},{value:'"Magenta/Magenta 10"'},{value:'"Magenta/Magenta 20"'},{value:'"Magenta/Magenta 30"'},{value:'"Magenta/Magenta 40"'},{value:'"Magenta/Magenta 50"'},{value:'"Magenta/Magenta 60 Main"'},{value:'"Magenta/Magenta 70"'},{value:'"Magenta/Magenta 80"'},{value:'"Cyan/Cyan 10"'},{value:'"Cyan/Cyan 20"'},{value:'"Cyan/Cyan 30"'},{value:'"Cyan/Cyan 40"'},{value:'"Cyan/Cyan 50"'},{value:'"Cyan/Cyan 60 Main"'},{value:'"Cyan/Cyan 70"'},{value:'"Cyan/Cyan 80"'},{value:'"Teal/Teal 10"'},{value:'"Teal/Teal 20"'},{value:'"Teal/Teal 30"'},{value:'"Teal/Teal 40"'},{value:'"Teal/Teal 50"'},{value:'"Teal/Teal 60 Main"'},{value:'"Teal/Teal 70"'},{value:'"Teal/Teal 80"'}]}},cssMixin:{defaultValue:null,description:"Позволяет добавлять  миксин созданный с помощью styled css",name:"cssMixin",required:!1,type:{name:"RuleSet<object>"}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/T/index.tsx#T"]={docgenInfo:T.__docgenInfo,name:"T",path:"src/components/T/index.tsx#T"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/themes/common/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{YF:()=>DefaultBackgroundColorName,aj:()=>MainPrimaryColorName,eQ:()=>DefaultFontColorName});const DefaultFontColorName="Neutral/Neutral 90",DefaultBackgroundColorName="Neutral/Neutral 00",MainPrimaryColorName="Primary/Primary 60 Main"}}]);