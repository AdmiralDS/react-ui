"use strict";(self.webpackChunk_admiral_ds_react_ui=self.webpackChunk_admiral_ds_react_ui||[]).push([[9521],{"./node_modules/@admiral-ds/icons/build/service/CloseOutline.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{r:()=>SvgCloseOutline});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var SvgCloseOutline=function SvgCloseOutline(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fill:"#717681",d:"M6.41 5.49a.65.65 0 1 0-.92.92L11.08 12l-5.49 5.49a.65.65 0 0 0 .92.92L12 12.92l5.49 5.49a.65.65 0 0 0 .92-.92L12.92 12l5.59-5.59a.65.65 0 0 0-.92-.92L12 11.08 6.41 5.49Z"})))};__webpack_require__.p},"./.storybook/createBorderRadiusSwapper.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{z:()=>createBorderRadiusSwapper});var _admiral_ds_react_ui__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/themes/light/index.ts");function createBorderRadiusSwapper(borderRadiusKind){return function swapBorder(theme){return theme?(theme.shape.borderRadiusKind=borderRadiusKind||theme.shape.borderRadiusKind,theme):(_admiral_ds_react_ui__WEBPACK_IMPORTED_MODULE_0__.f.shape.borderRadiusKind=borderRadiusKind||_admiral_ds_react_ui__WEBPACK_IMPORTED_MODULE_0__.f.shape.borderRadiusKind,_admiral_ds_react_ui__WEBPACK_IMPORTED_MODULE_0__.f)}}},"./src/components/Calendar/stories/Calendar.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CalendarSimple:()=>CalendarSimple,Range:()=>Range,SimpleWithChangeViewDate:()=>SimpleWithChangeViewDate,SimpleWithFilterDate:()=>SimpleWithFilterDate,SimpleWithMaxDate:()=>SimpleWithMaxDate,SimpleWithSetActiveViewDate:()=>SimpleWithSetActiveViewDate,SimpleWithSetActiveViewDateAfterChooseYear:()=>SimpleWithSetActiveViewDateAfterChooseYear,SimpleWithSetActiveViewWithoutDay:()=>SimpleWithSetActiveViewWithoutDay,SimpleWithSpecialDates:()=>SimpleWithSpecialDates,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Calendar_stories});var react=__webpack_require__("./node_modules/react/index.js"),Calendar=__webpack_require__("./src/components/Calendar/index.tsx"),borderRadius=__webpack_require__("./src/components/themes/borderRadius.ts"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js");(0,styled_components_browser_esm.iv)(["color:",";"],(p=>p.disabled?p.theme.color["Neutral/Neutral 90"]:p.theme.color["Neutral/Neutral 30"]));const weekendMixin=(0,styled_components_browser_esm.iv)(["color:",";"],(p=>p.disabled?p.theme.color["Error/Error 30"]:p.theme.color["Error/Error 60 Main"]));var createBorderRadiusSwapper=__webpack_require__("./.storybook/createBorderRadiusSwapper.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const startOfDay=date=>(date.setHours(0,0,0,0),date),HOLIDAY="holidays",WEEKEND="weekend",holidayCalendar=[{date:"2022-01-01",type:HOLIDAY},{date:"2022-01-02",type:HOLIDAY},{date:"2022-01-03",type:HOLIDAY},{date:"2022-01-04",type:HOLIDAY},{date:"2022-01-05",type:HOLIDAY},{date:"2022-01-06",type:HOLIDAY},{date:"2022-01-07",type:HOLIDAY},{date:"2022-01-08",type:HOLIDAY},{date:"2022-01-09",type:WEEKEND},{date:"2022-01-15",type:WEEKEND},{date:"2022-01-16",type:WEEKEND},{date:"2022-01-22",type:WEEKEND},{date:"2022-01-23",type:WEEKEND},{date:"2022-01-29",type:WEEKEND},{date:"2022-01-30",type:WEEKEND},{date:"2022-02-05",type:WEEKEND},{date:"2022-02-06",type:WEEKEND},{date:"2022-02-12",type:WEEKEND},{date:"2022-02-13",type:WEEKEND},{date:"2022-02-19",type:WEEKEND},{date:"2022-02-20",type:WEEKEND},{date:"2022-02-23",type:HOLIDAY},{date:"2022-02-26",type:WEEKEND},{date:"2022-02-27",type:WEEKEND},{date:"2022-03-06",type:WEEKEND},{date:"2022-03-07",type:WEEKEND},{date:"2022-03-08",type:HOLIDAY},{date:"2022-03-12",type:WEEKEND},{date:"2022-03-13",type:WEEKEND},{date:"2022-03-19",type:WEEKEND},{date:"2022-03-20",type:WEEKEND},{date:"2022-03-26",type:WEEKEND},{date:"2022-03-27",type:WEEKEND},{date:"2022-04-02",type:WEEKEND},{date:"2022-04-03",type:WEEKEND},{date:"2022-04-09",type:WEEKEND},{date:"2022-04-10",type:WEEKEND},{date:"2022-04-16",type:WEEKEND},{date:"2022-04-17",type:WEEKEND},{date:"2022-04-23",type:WEEKEND},{date:"2022-04-24",type:WEEKEND},{date:"2022-04-30",type:WEEKEND},{date:"2022-05-01",type:HOLIDAY},{date:"2022-05-02",type:WEEKEND},{date:"2022-05-03",type:WEEKEND},{date:"2022-05-07",type:WEEKEND},{date:"2022-05-08",type:WEEKEND},{date:"2022-05-09",type:HOLIDAY},{date:"2022-05-10",type:WEEKEND},{date:"2022-05-14",type:WEEKEND},{date:"2022-05-15",type:WEEKEND},{date:"2022-05-21",type:WEEKEND},{date:"2022-05-22",type:WEEKEND},{date:"2022-05-28",type:WEEKEND},{date:"2022-05-29",type:WEEKEND},{date:"2022-06-04",type:WEEKEND},{date:"2022-06-05",type:WEEKEND},{date:"2022-06-11",type:WEEKEND},{date:"2022-06-12",type:HOLIDAY},{date:"2022-06-13",type:WEEKEND},{date:"2022-06-18",type:WEEKEND},{date:"2022-06-19",type:WEEKEND},{date:"2022-06-25",type:WEEKEND},{date:"2022-06-26",type:WEEKEND},{date:"2022-07-02",type:WEEKEND},{date:"2022-07-03",type:WEEKEND},{date:"2022-07-09",type:WEEKEND},{date:"2022-07-10",type:WEEKEND},{date:"2022-07-16",type:WEEKEND},{date:"2022-07-17",type:WEEKEND},{date:"2022-07-23",type:WEEKEND},{date:"2022-07-24",type:WEEKEND},{date:"2022-07-30",type:WEEKEND},{date:"2022-07-31",type:WEEKEND},{date:"2022-08-06",type:WEEKEND},{date:"2022-08-07",type:WEEKEND},{date:"2022-08-13",type:WEEKEND},{date:"2022-08-14",type:WEEKEND},{date:"2022-08-20",type:WEEKEND},{date:"2022-08-21",type:WEEKEND},{date:"2022-08-27",type:WEEKEND},{date:"2022-08-28",type:WEEKEND},{date:"2022-09-03",type:WEEKEND},{date:"2022-09-04",type:WEEKEND},{date:"2022-09-10",type:WEEKEND},{date:"2022-09-11",type:WEEKEND},{date:"2022-09-17",type:WEEKEND},{date:"2022-09-18",type:WEEKEND},{date:"2022-09-24",type:WEEKEND},{date:"2022-09-25",type:WEEKEND},{date:"2022-10-01",type:WEEKEND},{date:"2022-10-02",type:WEEKEND},{date:"2022-10-08",type:WEEKEND},{date:"2022-10-09",type:WEEKEND},{date:"2022-10-15",type:WEEKEND},{date:"2022-10-16",type:WEEKEND},{date:"2022-10-22",type:WEEKEND},{date:"2022-10-23",type:WEEKEND},{date:"2022-10-29",type:WEEKEND},{date:"2022-10-30",type:WEEKEND},{date:"2022-11-04",type:HOLIDAY},{date:"2022-11-05",type:WEEKEND},{date:"2022-11-06",type:WEEKEND},{date:"2022-11-12",type:WEEKEND},{date:"2022-11-13",type:WEEKEND},{date:"2022-11-19",type:WEEKEND},{date:"2022-11-20",type:WEEKEND},{date:"2022-11-26",type:WEEKEND},{date:"2022-11-27",type:WEEKEND},{date:"2022-12-03",type:WEEKEND},{date:"2022-12-04",type:WEEKEND},{date:"2022-12-10",type:WEEKEND},{date:"2022-12-11",type:WEEKEND},{date:"2022-12-17",type:WEEKEND},{date:"2022-12-18",type:WEEKEND},{date:"2022-12-24",type:WEEKEND},{date:"2022-12-25",type:WEEKEND},{date:"2022-12-31",type:WEEKEND},{date:"2022-02-22",type:"preholidays"},{date:"2022-03-05",type:"preholidays"},{date:"2022-11-03",type:"preholidays"},{date:"2023-01-01",type:HOLIDAY},{date:"2023-01-02",type:HOLIDAY},{date:"2023-01-03",type:HOLIDAY},{date:"2023-01-04",type:HOLIDAY},{date:"2023-01-05",type:HOLIDAY},{date:"2023-01-06",type:HOLIDAY},{date:"2023-01-07",type:HOLIDAY},{date:"2023-01-08",type:HOLIDAY},{date:"2023-01-14",type:WEEKEND},{date:"2023-01-15",type:WEEKEND},{date:"2023-01-21",type:WEEKEND},{date:"2023-01-22",type:WEEKEND},{date:"2023-01-28",type:WEEKEND},{date:"2023-01-29",type:WEEKEND},{date:"2023-02-04",type:WEEKEND},{date:"2023-02-05",type:WEEKEND},{date:"2023-02-11",type:WEEKEND},{date:"2023-02-12",type:WEEKEND},{date:"2023-02-18",type:WEEKEND},{date:"2023-02-19",type:WEEKEND},{date:"2023-02-23",type:HOLIDAY},{date:"2023-02-24",type:WEEKEND},{date:"2023-02-25",type:WEEKEND},{date:"2023-02-26",type:WEEKEND},{date:"2023-03-04",type:WEEKEND},{date:"2023-03-05",type:WEEKEND},{date:"2023-03-08",type:HOLIDAY},{date:"2023-03-11",type:WEEKEND},{date:"2023-03-12",type:WEEKEND},{date:"2023-03-18",type:WEEKEND},{date:"2023-03-19",type:WEEKEND},{date:"2023-03-25",type:WEEKEND},{date:"2023-03-26",type:WEEKEND},{date:"2023-04-01",type:WEEKEND},{date:"2023-04-02",type:WEEKEND},{date:"2023-04-08",type:WEEKEND},{date:"2023-04-09",type:WEEKEND},{date:"2023-04-15",type:WEEKEND},{date:"2023-04-16",type:WEEKEND},{date:"2023-04-22",type:WEEKEND},{date:"2023-04-23",type:WEEKEND},{date:"2023-04-29",type:WEEKEND},{date:"2023-04-30",type:WEEKEND},{date:"2023-05-01",type:HOLIDAY},{date:"2023-05-06",type:WEEKEND},{date:"2023-05-07",type:WEEKEND},{date:"2023-05-08",type:WEEKEND},{date:"2023-05-09",type:HOLIDAY},{date:"2023-05-13",type:WEEKEND},{date:"2023-05-14",type:WEEKEND},{date:"2023-05-20",type:WEEKEND},{date:"2023-05-21",type:WEEKEND},{date:"2023-05-27",type:WEEKEND},{date:"2023-05-28",type:WEEKEND},{date:"2023-06-03",type:WEEKEND},{date:"2023-06-04",type:WEEKEND},{date:"2023-06-10",type:WEEKEND},{date:"2023-06-11",type:WEEKEND},{date:"2023-06-12",type:HOLIDAY},{date:"2023-06-17",type:WEEKEND},{date:"2023-06-18",type:WEEKEND},{date:"2023-06-24",type:WEEKEND},{date:"2023-06-25",type:WEEKEND},{date:"2023-07-01",type:WEEKEND},{date:"2023-07-02",type:WEEKEND},{date:"2023-07-08",type:WEEKEND},{date:"2023-07-09",type:WEEKEND},{date:"2023-07-15",type:WEEKEND},{date:"2023-07-16",type:WEEKEND},{date:"2023-07-22",type:WEEKEND},{date:"2023-07-23",type:WEEKEND},{date:"2023-07-29",type:WEEKEND},{date:"2023-07-30",type:WEEKEND},{date:"2023-08-05",type:WEEKEND},{date:"2023-08-06",type:WEEKEND},{date:"2023-08-12",type:WEEKEND},{date:"2023-08-13",type:WEEKEND},{date:"2023-08-19",type:WEEKEND},{date:"2023-08-20",type:WEEKEND},{date:"2023-08-26",type:WEEKEND},{date:"2023-08-27",type:WEEKEND},{date:"2023-09-02",type:WEEKEND},{date:"2023-09-03",type:WEEKEND},{date:"2023-09-09",type:WEEKEND},{date:"2023-09-10",type:WEEKEND},{date:"2023-09-16",type:WEEKEND},{date:"2023-09-17",type:WEEKEND},{date:"2023-09-23",type:WEEKEND},{date:"2023-09-24",type:WEEKEND},{date:"2023-09-30",type:WEEKEND},{date:"2023-10-01",type:WEEKEND},{date:"2023-10-07",type:WEEKEND},{date:"2023-10-08",type:WEEKEND},{date:"2023-10-14",type:WEEKEND},{date:"2023-10-15",type:WEEKEND},{date:"2023-10-21",type:WEEKEND},{date:"2023-10-22",type:WEEKEND},{date:"2023-10-28",type:WEEKEND},{date:"2023-10-29",type:WEEKEND},{date:"2023-11-04",type:HOLIDAY},{date:"2023-11-05",type:WEEKEND},{date:"2023-11-06",type:WEEKEND},{date:"2023-11-11",type:WEEKEND},{date:"2023-11-12",type:WEEKEND},{date:"2023-11-18",type:WEEKEND},{date:"2023-11-19",type:WEEKEND},{date:"2023-11-25",type:WEEKEND},{date:"2023-11-26",type:WEEKEND},{date:"2023-12-02",type:WEEKEND},{date:"2023-12-03",type:WEEKEND},{date:"2023-12-09",type:WEEKEND},{date:"2023-12-10",type:WEEKEND},{date:"2023-12-16",type:WEEKEND},{date:"2023-12-17",type:WEEKEND},{date:"2023-12-23",type:WEEKEND},{date:"2023-12-24",type:WEEKEND},{date:"2023-12-30",type:WEEKEND},{date:"2023-12-31",type:WEEKEND},{date:"2023-02-22",type:"preholidays"},{date:"2023-03-07",type:"preholidays"},{date:"2023-11-03",type:"preholidays"}],holidayMixin=(0,styled_components_browser_esm.iv)(["color:",";"],(p=>p.disabled?p.theme.color["Success/Success 30"]:p.theme.color["Success/Success 50 Main"])),preHolidayMixin=(0,styled_components_browser_esm.iv)(["color:",";"],(p=>p.disabled?p.theme.color["Attention/Attention 30"]:p.theme.color["Attention/Attention 50 Main"])),holidayDates=new Map(holidayCalendar.map((day=>{const date=new Date(day.date);return[startOfDay(date).getTime(),day.type]}))),SimpleWithSpecialDatesTemplate=({themeBorderKind,...props})=>{const[selected,setSelected]=react.useState(null),[endDate,setEndDate]=react.useState(null),highlightHolidays=day=>{const key=startOfDay(day).getTime();switch(holidayDates.get(key)){case HOLIDAY:return holidayMixin;case"preholidays":return preHolidayMixin;case WEEKEND:return weekendMixin;default:return}};return props.range?(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Calendar.f,{...props,range:!0,startDate:selected,endDate,onChange:value=>{setSelected(value[0]),setEndDate(value[1])},highlightSpecialDay:highlightHolidays})}):(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Calendar.f,{...props,selected,onChange:value=>{setSelected(value)},highlightSpecialDay:highlightHolidays})})};try{SimpleWithSpecialDatesTemplate.displayName="SimpleWithSpecialDatesTemplate",SimpleWithSpecialDatesTemplate.__docgenInfo={description:"",displayName:"SimpleWithSpecialDatesTemplate",props:{tooltipContainer:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal",name:"tooltipContainer",required:!1,type:{name:"undefined"}},currentActiveView:{defaultValue:null,description:"Показать экран выбора дат (месяц/год/день)",name:"currentActiveView",required:!1,type:{name:"ViewScreenType | null"}},currentActiveViewImportant:{defaultValue:null,description:"Приоритет экрана currentActiveView",name:"currentActiveViewImportant",required:!1,type:{name:"boolean"}},onDateIncreaseDecrease:{defaultValue:null,description:"Коллбэк срабатывает при клике на стрелках переключения дат",name:"onDateIncreaseDecrease",required:!1,type:{name:"((date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event>) => void)"}},onMonthSelect:{defaultValue:null,description:"Коллбэк при изменении месяца",name:"onMonthSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onYearSelect:{defaultValue:null,description:"Коллбэк при изменении года",name:"onYearSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onViewEnter:{defaultValue:null,description:"Срабатывает при открытии экрана выбора года",name:"onViewEnter",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewLeave:{defaultValue:null,description:"Срабатывает при открытии экрана выбора месяца",name:"onViewLeave",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewMonthSelect:{defaultValue:null,description:"Выбор вкладки - Месяц",name:"onViewMonthSelect",required:!1,type:{name:"(() => void)"}},onViewYearSelect:{defaultValue:null,description:"Выбор вкладки - Год",name:"onViewYearSelect",required:!1,type:{name:"(() => void)"}},highlightSpecialDay:{defaultValue:null,description:"Позволяет добавлять стили на необходимые даты",name:"highlightSpecialDay",required:!1,type:{name:"((date: Date) => RuleSet<object>)"}},onChange:{defaultValue:null,description:"Коллбэк выбора даты, срабатывает при клике на дне (в режиме диапазона date - это массив из двух дат)",name:"onChange",required:!0,type:{name:"(date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event> | undefined) => void"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ backwardText?: string; forwardText?: string; nextMonthText?: string | undefined; previousMonthText?: string | undefined; returnText?: string | undefined; selectYearText?: string | undefined; selectMonthText?: string | undefined; } | undefined"}},minDate:{defaultValue:null,description:"Минимально возможная для выбора дата",name:"minDate",required:!1,type:{name:"Date"}},maxDate:{defaultValue:null,description:"Максимально возможная для выбора дата",name:"maxDate",required:!1,type:{name:"Date"}},selected:{defaultValue:null,description:"Выбранное значение даты",name:"selected",required:!1,type:{name:"Date | null"}},startDate:{defaultValue:null,description:"Начальная дата диапазона",name:"startDate",required:!1,type:{name:"Date | null"}},endDate:{defaultValue:null,description:"Конечная дата диапазона",name:"endDate",required:!1,type:{name:"Date | null"}},range:{defaultValue:null,description:"Режим выбора диапазона дат",name:"range",required:!1,type:{name:"boolean"}},validator:{defaultValue:null,description:"Предоставляет функции проверки корректности даты, возможности её выбора в календаре.\nЕсли возвращаемое значение не 'null', то дата считается некорректной, а возвращаемое\nфункцией значение является текстом ошибки",name:"validator",required:!1,type:{name:"DateValidator"}},filterDate:{defaultValue:null,description:"Функция фильтрации даты. Если функция возвращает false для конкретного дня, то этот день будет задизейблен и его нельзя будет выбрать\nПример функции https://reactdatepicker.com/#example-filter-dates",name:"filterDate",required:!1,type:{name:"((date: Date) => boolean)"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Calendar/stories/SimpleWithSpecialDates.template.tsx#SimpleWithSpecialDatesTemplate"]={docgenInfo:SimpleWithSpecialDatesTemplate.__docgenInfo,name:"SimpleWithSpecialDatesTemplate",path:"src/components/Calendar/stories/SimpleWithSpecialDates.template.tsx#SimpleWithSpecialDatesTemplate"})}catch(__react_docgen_typescript_loader_error){}var T=__webpack_require__("./src/components/T/index.tsx"),Button=__webpack_require__("./src/components/Button/index.tsx");const SimpleWithSetActiveViewWithoutDayTemplate=({...props})=>{const[selected,setSelected]=react.useState(null),[currentActiveView,setCurrentActiveView]=react.useState("MONTH");return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",style:{marginBottom:"25px"},children:"Показываем только экраны выбора месяца и года"}),(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 2 Long",as:"div",style:{marginBottom:"25px"},children:"Если выставлен currentActiveViewImportant, то необходимо самому управлять открытием экранов"}),(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Button.zx,{onClick:()=>setSelected(new Date),children:"set Date now"})}),(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsx)(Calendar.f,{...props,selected,currentActiveView,currentActiveViewImportant:!0,onDateIncreaseDecrease:date=>{console.log(date,"onIncreaseDecreaseDate"),setSelected(date)},onChange:value=>{setSelected(value),console.log(value,"onChange")},onViewMonthSelect:()=>{console.log("onViewMonthSelect"),setCurrentActiveView("MONTH")},onViewYearSelect:()=>{console.log("onViewYearSelect"),setCurrentActiveView("YEAR")}})]})};try{SimpleWithSetActiveViewWithoutDayTemplate.displayName="SimpleWithSetActiveViewWithoutDayTemplate",SimpleWithSetActiveViewWithoutDayTemplate.__docgenInfo={description:"",displayName:"SimpleWithSetActiveViewWithoutDayTemplate",props:{tooltipContainer:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal",name:"tooltipContainer",required:!1,type:{name:"undefined"}},currentActiveView:{defaultValue:null,description:"Показать экран выбора дат (месяц/год/день)",name:"currentActiveView",required:!1,type:{name:"ViewScreenType | null"}},currentActiveViewImportant:{defaultValue:null,description:"Приоритет экрана currentActiveView",name:"currentActiveViewImportant",required:!1,type:{name:"boolean"}},onDateIncreaseDecrease:{defaultValue:null,description:"Коллбэк срабатывает при клике на стрелках переключения дат",name:"onDateIncreaseDecrease",required:!1,type:{name:"((date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event>) => void)"}},onMonthSelect:{defaultValue:null,description:"Коллбэк при изменении месяца",name:"onMonthSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onYearSelect:{defaultValue:null,description:"Коллбэк при изменении года",name:"onYearSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onViewEnter:{defaultValue:null,description:"Срабатывает при открытии экрана выбора года",name:"onViewEnter",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewLeave:{defaultValue:null,description:"Срабатывает при открытии экрана выбора месяца",name:"onViewLeave",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewMonthSelect:{defaultValue:null,description:"Выбор вкладки - Месяц",name:"onViewMonthSelect",required:!1,type:{name:"(() => void)"}},onViewYearSelect:{defaultValue:null,description:"Выбор вкладки - Год",name:"onViewYearSelect",required:!1,type:{name:"(() => void)"}},highlightSpecialDay:{defaultValue:null,description:"Позволяет добавлять стили на необходимые даты",name:"highlightSpecialDay",required:!1,type:{name:"((date: Date) => RuleSet<object>)"}},onChange:{defaultValue:null,description:"Коллбэк выбора даты, срабатывает при клике на дне (в режиме диапазона date - это массив из двух дат)",name:"onChange",required:!0,type:{name:"(date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event> | undefined) => void"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ backwardText?: string; forwardText?: string; nextMonthText?: string | undefined; previousMonthText?: string | undefined; returnText?: string | undefined; selectYearText?: string | undefined; selectMonthText?: string | undefined; } | undefined"}},minDate:{defaultValue:null,description:"Минимально возможная для выбора дата",name:"minDate",required:!1,type:{name:"Date"}},maxDate:{defaultValue:null,description:"Максимально возможная для выбора дата",name:"maxDate",required:!1,type:{name:"Date"}},selected:{defaultValue:null,description:"Выбранное значение даты",name:"selected",required:!1,type:{name:"Date | null"}},startDate:{defaultValue:null,description:"Начальная дата диапазона",name:"startDate",required:!1,type:{name:"Date | null"}},endDate:{defaultValue:null,description:"Конечная дата диапазона",name:"endDate",required:!1,type:{name:"Date | null"}},range:{defaultValue:null,description:"Режим выбора диапазона дат",name:"range",required:!1,type:{name:"boolean"}},validator:{defaultValue:null,description:"Предоставляет функции проверки корректности даты, возможности её выбора в календаре.\nЕсли возвращаемое значение не 'null', то дата считается некорректной, а возвращаемое\nфункцией значение является текстом ошибки",name:"validator",required:!1,type:{name:"DateValidator"}},filterDate:{defaultValue:null,description:"Функция фильтрации даты. Если функция возвращает false для конкретного дня, то этот день будет задизейблен и его нельзя будет выбрать\nПример функции https://reactdatepicker.com/#example-filter-dates",name:"filterDate",required:!1,type:{name:"((date: Date) => boolean)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Calendar/stories/SimpleWithSetActiveViewWithoutDay.template.tsx#SimpleWithSetActiveViewWithoutDayTemplate"]={docgenInfo:SimpleWithSetActiveViewWithoutDayTemplate.__docgenInfo,name:"SimpleWithSetActiveViewWithoutDayTemplate",path:"src/components/Calendar/stories/SimpleWithSetActiveViewWithoutDay.template.tsx#SimpleWithSetActiveViewWithoutDayTemplate"})}catch(__react_docgen_typescript_loader_error){}const SimpleWithSetActiveViewDateAfterChooseYearTemplate=props=>{const[selected,setSelected]=react.useState(null),[currentActiveView,setActiveViewDateScreen]=react.useState(null);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",style:{marginBottom:"25px"},children:"Открытие экрана выбора месяца после выбора года"}),(0,jsx_runtime.jsx)(Calendar.f,{...props,selected,currentActiveView,onDateIncreaseDecrease:date=>{setActiveViewDateScreen(null),console.log(date,"onIncreaseDecreaseDate")},onChange:value=>{setSelected(value),console.log(value,"onChange")},onYearSelect:()=>{setActiveViewDateScreen("MONTH")}})]})};try{SimpleWithSetActiveViewDateAfterChooseYearTemplate.displayName="SimpleWithSetActiveViewDateAfterChooseYearTemplate",SimpleWithSetActiveViewDateAfterChooseYearTemplate.__docgenInfo={description:"",displayName:"SimpleWithSetActiveViewDateAfterChooseYearTemplate",props:{tooltipContainer:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal",name:"tooltipContainer",required:!1,type:{name:"undefined"}},currentActiveView:{defaultValue:null,description:"Показать экран выбора дат (месяц/год/день)",name:"currentActiveView",required:!1,type:{name:"ViewScreenType | null"}},currentActiveViewImportant:{defaultValue:null,description:"Приоритет экрана currentActiveView",name:"currentActiveViewImportant",required:!1,type:{name:"boolean"}},onDateIncreaseDecrease:{defaultValue:null,description:"Коллбэк срабатывает при клике на стрелках переключения дат",name:"onDateIncreaseDecrease",required:!1,type:{name:"((date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event>) => void)"}},onMonthSelect:{defaultValue:null,description:"Коллбэк при изменении месяца",name:"onMonthSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onYearSelect:{defaultValue:null,description:"Коллбэк при изменении года",name:"onYearSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onViewEnter:{defaultValue:null,description:"Срабатывает при открытии экрана выбора года",name:"onViewEnter",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewLeave:{defaultValue:null,description:"Срабатывает при открытии экрана выбора месяца",name:"onViewLeave",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewMonthSelect:{defaultValue:null,description:"Выбор вкладки - Месяц",name:"onViewMonthSelect",required:!1,type:{name:"(() => void)"}},onViewYearSelect:{defaultValue:null,description:"Выбор вкладки - Год",name:"onViewYearSelect",required:!1,type:{name:"(() => void)"}},highlightSpecialDay:{defaultValue:null,description:"Позволяет добавлять стили на необходимые даты",name:"highlightSpecialDay",required:!1,type:{name:"((date: Date) => RuleSet<object>)"}},onChange:{defaultValue:null,description:"Коллбэк выбора даты, срабатывает при клике на дне (в режиме диапазона date - это массив из двух дат)",name:"onChange",required:!0,type:{name:"(date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event> | undefined) => void"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ backwardText?: string; forwardText?: string; nextMonthText?: string | undefined; previousMonthText?: string | undefined; returnText?: string | undefined; selectYearText?: string | undefined; selectMonthText?: string | undefined; } | undefined"}},minDate:{defaultValue:null,description:"Минимально возможная для выбора дата",name:"minDate",required:!1,type:{name:"Date"}},maxDate:{defaultValue:null,description:"Максимально возможная для выбора дата",name:"maxDate",required:!1,type:{name:"Date"}},selected:{defaultValue:null,description:"Выбранное значение даты",name:"selected",required:!1,type:{name:"Date | null"}},startDate:{defaultValue:null,description:"Начальная дата диапазона",name:"startDate",required:!1,type:{name:"Date | null"}},endDate:{defaultValue:null,description:"Конечная дата диапазона",name:"endDate",required:!1,type:{name:"Date | null"}},range:{defaultValue:null,description:"Режим выбора диапазона дат",name:"range",required:!1,type:{name:"boolean"}},validator:{defaultValue:null,description:"Предоставляет функции проверки корректности даты, возможности её выбора в календаре.\nЕсли возвращаемое значение не 'null', то дата считается некорректной, а возвращаемое\nфункцией значение является текстом ошибки",name:"validator",required:!1,type:{name:"DateValidator"}},filterDate:{defaultValue:null,description:"Функция фильтрации даты. Если функция возвращает false для конкретного дня, то этот день будет задизейблен и его нельзя будет выбрать\nПример функции https://reactdatepicker.com/#example-filter-dates",name:"filterDate",required:!1,type:{name:"((date: Date) => boolean)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Calendar/stories/SimpleWithSetActiveViewDateAfterChooseYear.template.tsx#SimpleWithSetActiveViewDateAfterChooseYearTemplate"]={docgenInfo:SimpleWithSetActiveViewDateAfterChooseYearTemplate.__docgenInfo,name:"SimpleWithSetActiveViewDateAfterChooseYearTemplate",path:"src/components/Calendar/stories/SimpleWithSetActiveViewDateAfterChooseYear.template.tsx#SimpleWithSetActiveViewDateAfterChooseYearTemplate"})}catch(__react_docgen_typescript_loader_error){}const SimpleWithSetActiveViewDateTemplate=({...props})=>{const[selected,setSelected]=react.useState(null),[currentActiveView,setCurrentActiveView]=react.useState(null);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",style:{marginBottom:"25px"},children:"Переключение экранов выбора дат - месяц/год/день"}),(0,jsx_runtime.jsxs)("div",{style:{display:"flex"},children:[(0,jsx_runtime.jsx)(Button.zx,{dimension:"s",onClick:()=>setCurrentActiveView("MONTH"),children:"Month"})," ",(0,jsx_runtime.jsx)(Button.zx,{dimension:"s",onClick:()=>setCurrentActiveView("YEAR"),children:"Year"})," ",(0,jsx_runtime.jsx)(Button.zx,{dimension:"s",onClick:()=>setCurrentActiveView("DAY"),children:"Day"})]}),(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsx)(Calendar.f,{...props,selected,currentActiveView,currentActiveViewImportant:!0,onDateIncreaseDecrease:()=>{setCurrentActiveView(null)},onYearSelect:data=>{setSelected(data),setCurrentActiveView("MONTH")},onMonthSelect:data=>{setSelected(data)},onViewMonthSelect:()=>{console.log("onViewMonthSelect"),setCurrentActiveView("MONTH")},onViewYearSelect:()=>{console.log("onViewYearSelect"),setCurrentActiveView("YEAR")},onChange:value=>{setSelected(value)}})]})};try{SimpleWithSetActiveViewDateTemplate.displayName="SimpleWithSetActiveViewDateTemplate",SimpleWithSetActiveViewDateTemplate.__docgenInfo={description:"",displayName:"SimpleWithSetActiveViewDateTemplate",props:{tooltipContainer:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal",name:"tooltipContainer",required:!1,type:{name:"undefined"}},currentActiveView:{defaultValue:null,description:"Показать экран выбора дат (месяц/год/день)",name:"currentActiveView",required:!1,type:{name:"ViewScreenType | null"}},currentActiveViewImportant:{defaultValue:null,description:"Приоритет экрана currentActiveView",name:"currentActiveViewImportant",required:!1,type:{name:"boolean"}},onDateIncreaseDecrease:{defaultValue:null,description:"Коллбэк срабатывает при клике на стрелках переключения дат",name:"onDateIncreaseDecrease",required:!1,type:{name:"((date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event>) => void)"}},onMonthSelect:{defaultValue:null,description:"Коллбэк при изменении месяца",name:"onMonthSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onYearSelect:{defaultValue:null,description:"Коллбэк при изменении года",name:"onYearSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onViewEnter:{defaultValue:null,description:"Срабатывает при открытии экрана выбора года",name:"onViewEnter",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewLeave:{defaultValue:null,description:"Срабатывает при открытии экрана выбора месяца",name:"onViewLeave",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewMonthSelect:{defaultValue:null,description:"Выбор вкладки - Месяц",name:"onViewMonthSelect",required:!1,type:{name:"(() => void)"}},onViewYearSelect:{defaultValue:null,description:"Выбор вкладки - Год",name:"onViewYearSelect",required:!1,type:{name:"(() => void)"}},highlightSpecialDay:{defaultValue:null,description:"Позволяет добавлять стили на необходимые даты",name:"highlightSpecialDay",required:!1,type:{name:"((date: Date) => RuleSet<object>)"}},onChange:{defaultValue:null,description:"Коллбэк выбора даты, срабатывает при клике на дне (в режиме диапазона date - это массив из двух дат)",name:"onChange",required:!0,type:{name:"(date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event> | undefined) => void"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ backwardText?: string; forwardText?: string; nextMonthText?: string | undefined; previousMonthText?: string | undefined; returnText?: string | undefined; selectYearText?: string | undefined; selectMonthText?: string | undefined; } | undefined"}},minDate:{defaultValue:null,description:"Минимально возможная для выбора дата",name:"minDate",required:!1,type:{name:"Date"}},maxDate:{defaultValue:null,description:"Максимально возможная для выбора дата",name:"maxDate",required:!1,type:{name:"Date"}},selected:{defaultValue:null,description:"Выбранное значение даты",name:"selected",required:!1,type:{name:"Date | null"}},startDate:{defaultValue:null,description:"Начальная дата диапазона",name:"startDate",required:!1,type:{name:"Date | null"}},endDate:{defaultValue:null,description:"Конечная дата диапазона",name:"endDate",required:!1,type:{name:"Date | null"}},range:{defaultValue:null,description:"Режим выбора диапазона дат",name:"range",required:!1,type:{name:"boolean"}},validator:{defaultValue:null,description:"Предоставляет функции проверки корректности даты, возможности её выбора в календаре.\nЕсли возвращаемое значение не 'null', то дата считается некорректной, а возвращаемое\nфункцией значение является текстом ошибки",name:"validator",required:!1,type:{name:"DateValidator"}},filterDate:{defaultValue:null,description:"Функция фильтрации даты. Если функция возвращает false для конкретного дня, то этот день будет задизейблен и его нельзя будет выбрать\nПример функции https://reactdatepicker.com/#example-filter-dates",name:"filterDate",required:!1,type:{name:"((date: Date) => boolean)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Calendar/stories/SimpleWithSetActiveViewDate.template.tsx#SimpleWithSetActiveViewDateTemplate"]={docgenInfo:SimpleWithSetActiveViewDateTemplate.__docgenInfo,name:"SimpleWithSetActiveViewDateTemplate",path:"src/components/Calendar/stories/SimpleWithSetActiveViewDate.template.tsx#SimpleWithSetActiveViewDateTemplate"})}catch(__react_docgen_typescript_loader_error){}const SimpleWithChangeViewDateTemplate=({...props})=>{const[selected,setSelected]=react.useState(null);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 1 Long",as:"div",style:{marginBottom:"25px"},children:"Коллбеки (смотри в консоль)"}),(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 2 Long",as:"div",children:"Открытие экранов выбора года и месяца `(onViewEnter, onViewLeave)`"}),(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 2 Long",as:"div",style:{marginBottom:"25px"},children:"Изменение даты после выбора года или месяца по стрелкам `(onIncreaseDecreaseDate)`"}),(0,jsx_runtime.jsx)(Calendar.f,{...props,selected,onChange:value=>{setSelected(value)},onDateIncreaseDecrease:value=>{console.log("onIncreaseDecreaseDate",value)},onViewEnter:view=>{console.log("onViewEnter",view)},onViewLeave:view=>{console.log("onViewLeave",view)}})]})};try{SimpleWithChangeViewDateTemplate.displayName="SimpleWithChangeViewDateTemplate",SimpleWithChangeViewDateTemplate.__docgenInfo={description:"",displayName:"SimpleWithChangeViewDateTemplate",props:{tooltipContainer:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal",name:"tooltipContainer",required:!1,type:{name:"undefined"}},currentActiveView:{defaultValue:null,description:"Показать экран выбора дат (месяц/год/день)",name:"currentActiveView",required:!1,type:{name:"ViewScreenType | null"}},currentActiveViewImportant:{defaultValue:null,description:"Приоритет экрана currentActiveView",name:"currentActiveViewImportant",required:!1,type:{name:"boolean"}},onDateIncreaseDecrease:{defaultValue:null,description:"Коллбэк срабатывает при клике на стрелках переключения дат",name:"onDateIncreaseDecrease",required:!1,type:{name:"((date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event>) => void)"}},onMonthSelect:{defaultValue:null,description:"Коллбэк при изменении месяца",name:"onMonthSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onYearSelect:{defaultValue:null,description:"Коллбэк при изменении года",name:"onYearSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onViewEnter:{defaultValue:null,description:"Срабатывает при открытии экрана выбора года",name:"onViewEnter",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewLeave:{defaultValue:null,description:"Срабатывает при открытии экрана выбора месяца",name:"onViewLeave",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewMonthSelect:{defaultValue:null,description:"Выбор вкладки - Месяц",name:"onViewMonthSelect",required:!1,type:{name:"(() => void)"}},onViewYearSelect:{defaultValue:null,description:"Выбор вкладки - Год",name:"onViewYearSelect",required:!1,type:{name:"(() => void)"}},highlightSpecialDay:{defaultValue:null,description:"Позволяет добавлять стили на необходимые даты",name:"highlightSpecialDay",required:!1,type:{name:"((date: Date) => RuleSet<object>)"}},onChange:{defaultValue:null,description:"Коллбэк выбора даты, срабатывает при клике на дне (в режиме диапазона date - это массив из двух дат)",name:"onChange",required:!0,type:{name:"(date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event> | undefined) => void"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ backwardText?: string; forwardText?: string; nextMonthText?: string | undefined; previousMonthText?: string | undefined; returnText?: string | undefined; selectYearText?: string | undefined; selectMonthText?: string | undefined; } | undefined"}},minDate:{defaultValue:null,description:"Минимально возможная для выбора дата",name:"minDate",required:!1,type:{name:"Date"}},maxDate:{defaultValue:null,description:"Максимально возможная для выбора дата",name:"maxDate",required:!1,type:{name:"Date"}},selected:{defaultValue:null,description:"Выбранное значение даты",name:"selected",required:!1,type:{name:"Date | null"}},startDate:{defaultValue:null,description:"Начальная дата диапазона",name:"startDate",required:!1,type:{name:"Date | null"}},endDate:{defaultValue:null,description:"Конечная дата диапазона",name:"endDate",required:!1,type:{name:"Date | null"}},range:{defaultValue:null,description:"Режим выбора диапазона дат",name:"range",required:!1,type:{name:"boolean"}},validator:{defaultValue:null,description:"Предоставляет функции проверки корректности даты, возможности её выбора в календаре.\nЕсли возвращаемое значение не 'null', то дата считается некорректной, а возвращаемое\nфункцией значение является текстом ошибки",name:"validator",required:!1,type:{name:"DateValidator"}},filterDate:{defaultValue:null,description:"Функция фильтрации даты. Если функция возвращает false для конкретного дня, то этот день будет задизейблен и его нельзя будет выбрать\nПример функции https://reactdatepicker.com/#example-filter-dates",name:"filterDate",required:!1,type:{name:"((date: Date) => boolean)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Calendar/stories/SimpleWithChangeViewDate.template.tsx#SimpleWithChangeViewDateTemplate"]={docgenInfo:SimpleWithChangeViewDateTemplate.__docgenInfo,name:"SimpleWithChangeViewDateTemplate",path:"src/components/Calendar/stories/SimpleWithChangeViewDate.template.tsx#SimpleWithChangeViewDateTemplate"})}catch(__react_docgen_typescript_loader_error){}const SimpleWithFilterDateTemplate=({range,...props})=>{const[selected,setSelected]=react.useState(null),[endDate,setEndDate]=react.useState(null),isWeekday=date=>{const day=date.getDay();return 0!==day&&6!==day};return range?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)(Calendar.f,{...props,range:!0,startDate:selected,endDate,filterDate:isWeekday,onChange:value=>{setSelected(value[0]),setEndDate(value[1])}})}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)(Calendar.f,{...props,filterDate:isWeekday,selected,onChange:value=>{setSelected(value)}})})};try{SimpleWithFilterDateTemplate.displayName="SimpleWithFilterDateTemplate",SimpleWithFilterDateTemplate.__docgenInfo={description:"",displayName:"SimpleWithFilterDateTemplate",props:{tooltipContainer:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal",name:"tooltipContainer",required:!1,type:{name:"undefined"}},currentActiveView:{defaultValue:null,description:"Показать экран выбора дат (месяц/год/день)",name:"currentActiveView",required:!1,type:{name:"ViewScreenType | null"}},currentActiveViewImportant:{defaultValue:null,description:"Приоритет экрана currentActiveView",name:"currentActiveViewImportant",required:!1,type:{name:"boolean"}},onDateIncreaseDecrease:{defaultValue:null,description:"Коллбэк срабатывает при клике на стрелках переключения дат",name:"onDateIncreaseDecrease",required:!1,type:{name:"((date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event>) => void)"}},onMonthSelect:{defaultValue:null,description:"Коллбэк при изменении месяца",name:"onMonthSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onYearSelect:{defaultValue:null,description:"Коллбэк при изменении года",name:"onYearSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onViewEnter:{defaultValue:null,description:"Срабатывает при открытии экрана выбора года",name:"onViewEnter",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewLeave:{defaultValue:null,description:"Срабатывает при открытии экрана выбора месяца",name:"onViewLeave",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewMonthSelect:{defaultValue:null,description:"Выбор вкладки - Месяц",name:"onViewMonthSelect",required:!1,type:{name:"(() => void)"}},onViewYearSelect:{defaultValue:null,description:"Выбор вкладки - Год",name:"onViewYearSelect",required:!1,type:{name:"(() => void)"}},highlightSpecialDay:{defaultValue:null,description:"Позволяет добавлять стили на необходимые даты",name:"highlightSpecialDay",required:!1,type:{name:"((date: Date) => RuleSet<object>)"}},onChange:{defaultValue:null,description:"Коллбэк выбора даты, срабатывает при клике на дне (в режиме диапазона date - это массив из двух дат)",name:"onChange",required:!0,type:{name:"(date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event> | undefined) => void"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ backwardText?: string; forwardText?: string; nextMonthText?: string | undefined; previousMonthText?: string | undefined; returnText?: string | undefined; selectYearText?: string | undefined; selectMonthText?: string | undefined; } | undefined"}},minDate:{defaultValue:null,description:"Минимально возможная для выбора дата",name:"minDate",required:!1,type:{name:"Date"}},maxDate:{defaultValue:null,description:"Максимально возможная для выбора дата",name:"maxDate",required:!1,type:{name:"Date"}},selected:{defaultValue:null,description:"Выбранное значение даты",name:"selected",required:!1,type:{name:"Date | null"}},startDate:{defaultValue:null,description:"Начальная дата диапазона",name:"startDate",required:!1,type:{name:"Date | null"}},endDate:{defaultValue:null,description:"Конечная дата диапазона",name:"endDate",required:!1,type:{name:"Date | null"}},range:{defaultValue:null,description:"Режим выбора диапазона дат",name:"range",required:!1,type:{name:"boolean"}},validator:{defaultValue:null,description:"Предоставляет функции проверки корректности даты, возможности её выбора в календаре.\nЕсли возвращаемое значение не 'null', то дата считается некорректной, а возвращаемое\nфункцией значение является текстом ошибки",name:"validator",required:!1,type:{name:"DateValidator"}},filterDate:{defaultValue:null,description:"Функция фильтрации даты. Если функция возвращает false для конкретного дня, то этот день будет задизейблен и его нельзя будет выбрать\nПример функции https://reactdatepicker.com/#example-filter-dates",name:"filterDate",required:!1,type:{name:"((date: Date) => boolean)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Calendar/stories/SimpleWithFilterDate.template.tsx#SimpleWithFilterDateTemplate"]={docgenInfo:SimpleWithFilterDateTemplate.__docgenInfo,name:"SimpleWithFilterDateTemplate",path:"src/components/Calendar/stories/SimpleWithFilterDate.template.tsx#SimpleWithFilterDateTemplate"})}catch(__react_docgen_typescript_loader_error){}const SimpleWithMaxDateTemplate=({range,...props})=>{const[selected,setSelected]=react.useState(null),[endDate,setEndDate]=react.useState(null),tomorrow=new Date;return tomorrow.setDate((new Date).getDate()+1),range?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)(Calendar.f,{...props,range:!0,startDate:selected,endDate,maxDate:tomorrow,onChange:value=>{setSelected(value[0]),setEndDate(value[1])}})}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)(Calendar.f,{...props,maxDate:tomorrow,selected,onChange:value=>{setSelected(value)}})})};try{SimpleWithMaxDateTemplate.displayName="SimpleWithMaxDateTemplate",SimpleWithMaxDateTemplate.__docgenInfo={description:"",displayName:"SimpleWithMaxDateTemplate",props:{tooltipContainer:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal",name:"tooltipContainer",required:!1,type:{name:"undefined"}},currentActiveView:{defaultValue:null,description:"Показать экран выбора дат (месяц/год/день)",name:"currentActiveView",required:!1,type:{name:"ViewScreenType | null"}},currentActiveViewImportant:{defaultValue:null,description:"Приоритет экрана currentActiveView",name:"currentActiveViewImportant",required:!1,type:{name:"boolean"}},onDateIncreaseDecrease:{defaultValue:null,description:"Коллбэк срабатывает при клике на стрелках переключения дат",name:"onDateIncreaseDecrease",required:!1,type:{name:"((date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event>) => void)"}},onMonthSelect:{defaultValue:null,description:"Коллбэк при изменении месяца",name:"onMonthSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onYearSelect:{defaultValue:null,description:"Коллбэк при изменении года",name:"onYearSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onViewEnter:{defaultValue:null,description:"Срабатывает при открытии экрана выбора года",name:"onViewEnter",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewLeave:{defaultValue:null,description:"Срабатывает при открытии экрана выбора месяца",name:"onViewLeave",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewMonthSelect:{defaultValue:null,description:"Выбор вкладки - Месяц",name:"onViewMonthSelect",required:!1,type:{name:"(() => void)"}},onViewYearSelect:{defaultValue:null,description:"Выбор вкладки - Год",name:"onViewYearSelect",required:!1,type:{name:"(() => void)"}},highlightSpecialDay:{defaultValue:null,description:"Позволяет добавлять стили на необходимые даты",name:"highlightSpecialDay",required:!1,type:{name:"((date: Date) => RuleSet<object>)"}},onChange:{defaultValue:null,description:"Коллбэк выбора даты, срабатывает при клике на дне (в режиме диапазона date - это массив из двух дат)",name:"onChange",required:!0,type:{name:"(date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event> | undefined) => void"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ backwardText?: string; forwardText?: string; nextMonthText?: string | undefined; previousMonthText?: string | undefined; returnText?: string | undefined; selectYearText?: string | undefined; selectMonthText?: string | undefined; } | undefined"}},minDate:{defaultValue:null,description:"Минимально возможная для выбора дата",name:"minDate",required:!1,type:{name:"Date"}},maxDate:{defaultValue:null,description:"Максимально возможная для выбора дата",name:"maxDate",required:!1,type:{name:"Date"}},selected:{defaultValue:null,description:"Выбранное значение даты",name:"selected",required:!1,type:{name:"Date | null"}},startDate:{defaultValue:null,description:"Начальная дата диапазона",name:"startDate",required:!1,type:{name:"Date | null"}},endDate:{defaultValue:null,description:"Конечная дата диапазона",name:"endDate",required:!1,type:{name:"Date | null"}},range:{defaultValue:null,description:"Режим выбора диапазона дат",name:"range",required:!1,type:{name:"boolean"}},validator:{defaultValue:null,description:"Предоставляет функции проверки корректности даты, возможности её выбора в календаре.\nЕсли возвращаемое значение не 'null', то дата считается некорректной, а возвращаемое\nфункцией значение является текстом ошибки",name:"validator",required:!1,type:{name:"DateValidator"}},filterDate:{defaultValue:null,description:"Функция фильтрации даты. Если функция возвращает false для конкретного дня, то этот день будет задизейблен и его нельзя будет выбрать\nПример функции https://reactdatepicker.com/#example-filter-dates",name:"filterDate",required:!1,type:{name:"((date: Date) => boolean)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Calendar/stories/SimpleWithMaxDate.template.tsx#SimpleWithMaxDateTemplate"]={docgenInfo:SimpleWithMaxDateTemplate.__docgenInfo,name:"SimpleWithMaxDateTemplate",path:"src/components/Calendar/stories/SimpleWithMaxDate.template.tsx#SimpleWithMaxDateTemplate"})}catch(__react_docgen_typescript_loader_error){}const RangeTemplate=props=>{const[startDate,setStartDate]=react.useState(null),[endDate,setEndDate]=react.useState(null);return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)(Calendar.f,{...props,range:!0,startDate,endDate,onChange:value=>{setStartDate(value[0]),setEndDate(value[1])}})})};try{RangeTemplate.displayName="RangeTemplate",RangeTemplate.__docgenInfo={description:"",displayName:"RangeTemplate",props:{tooltipContainer:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal",name:"tooltipContainer",required:!1,type:{name:"undefined"}},currentActiveView:{defaultValue:null,description:"Показать экран выбора дат (месяц/год/день)",name:"currentActiveView",required:!1,type:{name:"ViewScreenType | null"}},currentActiveViewImportant:{defaultValue:null,description:"Приоритет экрана currentActiveView",name:"currentActiveViewImportant",required:!1,type:{name:"boolean"}},onDateIncreaseDecrease:{defaultValue:null,description:"Коллбэк срабатывает при клике на стрелках переключения дат",name:"onDateIncreaseDecrease",required:!1,type:{name:"((date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event>) => void)"}},onMonthSelect:{defaultValue:null,description:"Коллбэк при изменении месяца",name:"onMonthSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onYearSelect:{defaultValue:null,description:"Коллбэк при изменении года",name:"onYearSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onViewEnter:{defaultValue:null,description:"Срабатывает при открытии экрана выбора года",name:"onViewEnter",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewLeave:{defaultValue:null,description:"Срабатывает при открытии экрана выбора месяца",name:"onViewLeave",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewMonthSelect:{defaultValue:null,description:"Выбор вкладки - Месяц",name:"onViewMonthSelect",required:!1,type:{name:"(() => void)"}},onViewYearSelect:{defaultValue:null,description:"Выбор вкладки - Год",name:"onViewYearSelect",required:!1,type:{name:"(() => void)"}},highlightSpecialDay:{defaultValue:null,description:"Позволяет добавлять стили на необходимые даты",name:"highlightSpecialDay",required:!1,type:{name:"((date: Date) => RuleSet<object>)"}},onChange:{defaultValue:null,description:"Коллбэк выбора даты, срабатывает при клике на дне (в режиме диапазона date - это массив из двух дат)",name:"onChange",required:!0,type:{name:"(date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event> | undefined) => void"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ backwardText?: string; forwardText?: string; nextMonthText?: string | undefined; previousMonthText?: string | undefined; returnText?: string | undefined; selectYearText?: string | undefined; selectMonthText?: string | undefined; } | undefined"}},minDate:{defaultValue:null,description:"Минимально возможная для выбора дата",name:"minDate",required:!1,type:{name:"Date"}},maxDate:{defaultValue:null,description:"Максимально возможная для выбора дата",name:"maxDate",required:!1,type:{name:"Date"}},selected:{defaultValue:null,description:"Выбранное значение даты",name:"selected",required:!1,type:{name:"Date | null"}},startDate:{defaultValue:null,description:"Начальная дата диапазона",name:"startDate",required:!1,type:{name:"Date | null"}},endDate:{defaultValue:null,description:"Конечная дата диапазона",name:"endDate",required:!1,type:{name:"Date | null"}},range:{defaultValue:null,description:"Режим выбора диапазона дат",name:"range",required:!1,type:{name:"boolean"}},validator:{defaultValue:null,description:"Предоставляет функции проверки корректности даты, возможности её выбора в календаре.\nЕсли возвращаемое значение не 'null', то дата считается некорректной, а возвращаемое\nфункцией значение является текстом ошибки",name:"validator",required:!1,type:{name:"DateValidator"}},filterDate:{defaultValue:null,description:"Функция фильтрации даты. Если функция возвращает false для конкретного дня, то этот день будет задизейблен и его нельзя будет выбрать\nПример функции https://reactdatepicker.com/#example-filter-dates",name:"filterDate",required:!1,type:{name:"((date: Date) => boolean)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Calendar/stories/Range.template.tsx#RangeTemplate"]={docgenInfo:RangeTemplate.__docgenInfo,name:"RangeTemplate",path:"src/components/Calendar/stories/Range.template.tsx#RangeTemplate"})}catch(__react_docgen_typescript_loader_error){}const CalendarSimpleTemplate=({themeBorderKind,...props})=>{const[selected,setSelected]=react.useState(null),[endDate,setEndDate]=react.useState(null);return props.range?(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Calendar.f,{...props,range:!0,startDate:selected,endDate,onChange:value=>{setSelected(value[0]),setEndDate(value[1])}})}):(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:(0,createBorderRadiusSwapper.z)(themeBorderKind),children:(0,jsx_runtime.jsx)(Calendar.f,{...props,selected,onChange:value=>{setSelected(value)}})})};try{CalendarSimpleTemplate.displayName="CalendarSimpleTemplate",CalendarSimpleTemplate.__docgenInfo={description:"",displayName:"CalendarSimpleTemplate",props:{tooltipContainer:{defaultValue:null,description:"@deprecated Используйте rootRef пропсу на DropdownProvider\nКонтейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal",name:"tooltipContainer",required:!1,type:{name:"undefined"}},currentActiveView:{defaultValue:null,description:"Показать экран выбора дат (месяц/год/день)",name:"currentActiveView",required:!1,type:{name:"ViewScreenType | null"}},currentActiveViewImportant:{defaultValue:null,description:"Приоритет экрана currentActiveView",name:"currentActiveViewImportant",required:!1,type:{name:"boolean"}},onDateIncreaseDecrease:{defaultValue:null,description:"Коллбэк срабатывает при клике на стрелках переключения дат",name:"onDateIncreaseDecrease",required:!1,type:{name:"((date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event>) => void)"}},onMonthSelect:{defaultValue:null,description:"Коллбэк при изменении месяца",name:"onMonthSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onYearSelect:{defaultValue:null,description:"Коллбэк при изменении года",name:"onYearSelect",required:!1,type:{name:"((date: Date | (Date | null)[] | null) => void)"}},onViewEnter:{defaultValue:null,description:"Срабатывает при открытии экрана выбора года",name:"onViewEnter",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewLeave:{defaultValue:null,description:"Срабатывает при открытии экрана выбора месяца",name:"onViewLeave",required:!1,type:{name:"((view: ViewScreenType) => void)"}},onViewMonthSelect:{defaultValue:null,description:"Выбор вкладки - Месяц",name:"onViewMonthSelect",required:!1,type:{name:"(() => void)"}},onViewYearSelect:{defaultValue:null,description:"Выбор вкладки - Год",name:"onViewYearSelect",required:!1,type:{name:"(() => void)"}},highlightSpecialDay:{defaultValue:null,description:"Позволяет добавлять стили на необходимые даты",name:"highlightSpecialDay",required:!1,type:{name:"((date: Date) => RuleSet<object>)"}},onChange:{defaultValue:null,description:"Коллбэк выбора даты, срабатывает при клике на дне (в режиме диапазона date - это массив из двух дат)",name:"onChange",required:!0,type:{name:"(date: Date | (Date | null)[] | null, event?: SyntheticEvent<any, Event> | undefined) => void"}},locale:{defaultValue:null,description:"Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,\nпо умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме",name:"locale",required:!1,type:{name:"{ backwardText?: string; forwardText?: string; nextMonthText?: string | undefined; previousMonthText?: string | undefined; returnText?: string | undefined; selectYearText?: string | undefined; selectMonthText?: string | undefined; } | undefined"}},minDate:{defaultValue:null,description:"Минимально возможная для выбора дата",name:"minDate",required:!1,type:{name:"Date"}},maxDate:{defaultValue:null,description:"Максимально возможная для выбора дата",name:"maxDate",required:!1,type:{name:"Date"}},selected:{defaultValue:null,description:"Выбранное значение даты",name:"selected",required:!1,type:{name:"Date | null"}},startDate:{defaultValue:null,description:"Начальная дата диапазона",name:"startDate",required:!1,type:{name:"Date | null"}},endDate:{defaultValue:null,description:"Конечная дата диапазона",name:"endDate",required:!1,type:{name:"Date | null"}},range:{defaultValue:null,description:"Режим выбора диапазона дат",name:"range",required:!1,type:{name:"boolean"}},validator:{defaultValue:null,description:"Предоставляет функции проверки корректности даты, возможности её выбора в календаре.\nЕсли возвращаемое значение не 'null', то дата считается некорректной, а возвращаемое\nфункцией значение является текстом ошибки",name:"validator",required:!1,type:{name:"DateValidator"}},filterDate:{defaultValue:null,description:"Функция фильтрации даты. Если функция возвращает false для конкретного дня, то этот день будет задизейблен и его нельзя будет выбрать\nПример функции https://reactdatepicker.com/#example-filter-dates",name:"filterDate",required:!1,type:{name:"((date: Date) => boolean)"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Calendar/stories/CalendarSimple.template.tsx#CalendarSimpleTemplate"]={docgenInfo:CalendarSimpleTemplate.__docgenInfo,name:"CalendarSimpleTemplate",path:"src/components/Calendar/stories/CalendarSimple.template.tsx#CalendarSimpleTemplate"})}catch(__react_docgen_typescript_loader_error){}const Calendar_stories={title:"Admiral-2.1/Calendar",decorators:void 0,component:Calendar.f,parameters:{docs:{source:{code:null}},design:{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=39%3A53407"}},argTypes:{range:{control:{type:"boolean"}},currentActiveViewImportant:{control:{type:"boolean"}},currentActiveView:{options:["YEAR","MONTH","DAY"],control:{type:"radio"}},validator:{control:!1},tooltipContainer:{control:!1},startDate:{control:!1},selected:{control:!1},endDate:{control:!1},minDate:{control:!1},maxDate:{control:!1},locale:{control:!1},themeBorderKind:{options:borderRadius.g2,control:{type:"radio"}}}},CalendarSimpleStory=props=>(0,jsx_runtime.jsx)(CalendarSimpleTemplate,{...props});CalendarSimpleStory.displayName="CalendarSimpleStory";const CalendarSimple={render:CalendarSimpleStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport { ThemeProvider } from 'styled-components';\n\nimport type { CalendarPropType, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { Calendar } from '@admiral-ds/react-ui';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nexport const CalendarSimpleTemplate = ({\n  themeBorderKind,\n  ...props\n}: CalendarPropType & { themeBorderKind?: BorderRadiusType }) => {\n  const [selected, setSelected] = React.useState<Date | null>(null);\n  const [endDate, setEndDate] = React.useState<Date | null>(null);\n\n  return props.range ? (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Calendar\n        {...props}\n        range\n        startDate={selected}\n        endDate={endDate}\n        onChange={(value: any) => {\n          setSelected(value[0]);\n          setEndDate(value[1]);\n        }}\n      />\n    </ThemeProvider>\n  ) : (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Calendar\n        {...props}\n        selected={selected}\n        onChange={(value: any) => {\n          setSelected(value);\n        }}\n      />\n    </ThemeProvider>\n  );\n};\n"},description:{story:"Пример календаря с выбором даты>."}}},args:{},name:"Simple."},RangeStory=props=>(0,jsx_runtime.jsx)(RangeTemplate,{...props});RangeStory.displayName="RangeStory";const Range={render:RangeStory,parameters:{docs:{source:{code:"import * as React from 'react';\n\nimport type { CalendarPropType } from '@admiral-ds/react-ui';\nimport { Calendar } from '@admiral-ds/react-ui';\n\nexport const RangeTemplate = (props: CalendarPropType) => {\n  const [startDate, setStartDate] = React.useState<Date | null>(null);\n  const [endDate, setEndDate] = React.useState<Date | null>(null);\n  return (\n    <>\n      <Calendar\n        {...props}\n        range\n        startDate={startDate}\n        endDate={endDate}\n        onChange={(value: any) => {\n          setStartDate(value[0]);\n          setEndDate(value[1]);\n        }}\n      />\n    </>\n  );\n};\n"},description:{story:"Пример с выбором диапазона."}}},args:{},name:"Range."},SimpleWithMaxDateStory=props=>(0,jsx_runtime.jsx)(SimpleWithMaxDateTemplate,{...props});SimpleWithMaxDateStory.displayName="SimpleWithMaxDateStory";const SimpleWithMaxDate={render:SimpleWithMaxDateStory,parameters:{docs:{source:{code:"import * as React from 'react';\n\nimport type { CalendarPropType } from '@admiral-ds/react-ui';\nimport { Calendar } from '@admiral-ds/react-ui';\n\nexport const SimpleWithMaxDateTemplate = ({ range, ...props }: CalendarPropType) => {\n  const [selected, setSelected] = React.useState<Date | null>(null);\n  const [endDate, setEndDate] = React.useState<Date | null>(null);\n  const tomorrow = new Date();\n  tomorrow.setDate(new Date().getDate() + 1);\n  return range ? (\n    <>\n      <Calendar\n        {...props}\n        range\n        startDate={selected}\n        endDate={endDate}\n        maxDate={tomorrow}\n        onChange={(value: any) => {\n          setSelected(value[0]);\n          setEndDate(value[1]);\n        }}\n      />\n    </>\n  ) : (\n    <>\n      <Calendar\n        {...props}\n        maxDate={tomorrow}\n        selected={selected}\n        onChange={(value: any) => {\n          setSelected(value);\n        }}\n      />\n    </>\n  );\n};\n"},description:{story:"Пример с ограничением максимальной даты."}}},args:{},name:"maxDate."},SimpleWithFilterDateStory=props=>(0,jsx_runtime.jsx)(SimpleWithFilterDateTemplate,{...props});SimpleWithFilterDateStory.displayName="SimpleWithFilterDateStory";const SimpleWithFilterDate={render:SimpleWithFilterDateStory,parameters:{docs:{source:{code:"import * as React from 'react';\n\nimport type { CalendarPropType } from '@admiral-ds/react-ui';\nimport { Calendar } from '@admiral-ds/react-ui';\n\nexport const SimpleWithFilterDateTemplate = ({ range, ...props }: CalendarPropType) => {\n  const [selected, setSelected] = React.useState<Date | null>(null);\n  const [endDate, setEndDate] = React.useState<Date | null>(null);\n  const isWeekday = (date: Date) => {\n    const day = date.getDay();\n    return day !== 0 && day !== 6;\n  };\n  return range ? (\n    <>\n      <Calendar\n        {...props}\n        range\n        startDate={selected}\n        endDate={endDate}\n        filterDate={isWeekday}\n        onChange={(value: any) => {\n          setSelected(value[0]);\n          setEndDate(value[1]);\n        }}\n      />\n    </>\n  ) : (\n    <>\n      <Calendar\n        {...props}\n        filterDate={isWeekday}\n        selected={selected}\n        onChange={(value: any) => {\n          setSelected(value);\n        }}\n      />\n    </>\n  );\n};\n"},description:{story:"Пример с недоступными для выбора датами."}}},args:{},name:"FilterDate."},SimpleWithChangeViewDateStory=props=>(0,jsx_runtime.jsx)(SimpleWithChangeViewDateTemplate,{...props});SimpleWithChangeViewDateStory.displayName="SimpleWithChangeViewDateStory";const SimpleWithChangeViewDate={render:SimpleWithChangeViewDateStory,parameters:{docs:{source:{code:"import * as React from 'react';\n\nimport type { CalendarPropType, ViewScreenType } from '@admiral-ds/react-ui';\nimport { Calendar, T } from '@admiral-ds/react-ui';\n\nexport const SimpleWithChangeViewDateTemplate = ({ ...props }: CalendarPropType) => {\n  const [selected, setSelected] = React.useState<Date | null>(null);\n\n  return (\n    <>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '25px' }}>\n        Коллбеки (смотри в консоль)\n      </T>\n      <T font=\"Body/Body 2 Long\" as=\"div\">\n        Открытие экранов выбора года и месяца `(onViewEnter, onViewLeave)`\n      </T>\n      <T font=\"Body/Body 2 Long\" as=\"div\" style={{ marginBottom: '25px' }}>\n        Изменение даты после выбора года или месяца по стрелкам `(onIncreaseDecreaseDate)`\n      </T>\n\n      <Calendar\n        {...props}\n        selected={selected}\n        onChange={(value: any) => {\n          setSelected(value);\n        }}\n        onDateIncreaseDecrease={(value: any) => {\n          console.log('onIncreaseDecreaseDate', value);\n        }}\n        onViewEnter={(view: ViewScreenType) => {\n          console.log('onViewEnter', view);\n        }}\n        onViewLeave={(view: ViewScreenType) => {\n          console.log('onViewLeave', view);\n        }}\n      />\n    </>\n  );\n};\n"},description:{story:"Пример с коллбеками."}}},args:{},name:"Callback"},SimpleWithSetActiveViewDateStory=props=>(0,jsx_runtime.jsx)(SimpleWithSetActiveViewDateTemplate,{...props});SimpleWithSetActiveViewDateStory.displayName="SimpleWithSetActiveViewDateStory";const SimpleWithSetActiveViewDate={render:SimpleWithSetActiveViewDateStory,parameters:{docs:{source:{code:"import * as React from 'react';\n\nimport type { CalendarPropType, ViewScreenType } from '@admiral-ds/react-ui';\nimport { Button, Calendar, T } from '@admiral-ds/react-ui';\n\nexport const SimpleWithSetActiveViewDateTemplate = ({ ...props }: CalendarPropType) => {\n  const [selected, setSelected] = React.useState<Date | null>(null);\n  const [currentActiveView, setCurrentActiveView] = React.useState<ViewScreenType | null>(null);\n\n  return (\n    <>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '25px' }}>\n        Переключение экранов выбора дат - месяц/год/день\n      </T>\n      <div style={{ display: 'flex' }}>\n        <Button dimension=\"s\" onClick={() => setCurrentActiveView('MONTH')}>\n          Month\n        </Button>\n        &nbsp;\n        <Button dimension=\"s\" onClick={() => setCurrentActiveView('YEAR')}>\n          Year\n        </Button>\n        &nbsp;\n        <Button dimension=\"s\" onClick={() => setCurrentActiveView('DAY')}>\n          Day\n        </Button>\n      </div>\n      <br />\n      <Calendar\n        {...props}\n        selected={selected}\n        currentActiveView={currentActiveView}\n        currentActiveViewImportant={true}\n        onDateIncreaseDecrease={() => {\n          setCurrentActiveView(null);\n        }}\n        onYearSelect={(data) => {\n          setSelected(data as Date);\n          setCurrentActiveView('MONTH');\n        }}\n        onMonthSelect={(data) => {\n          setSelected(data as Date);\n        }}\n        onViewMonthSelect={() => {\n          console.log('onViewMonthSelect');\n          setCurrentActiveView('MONTH');\n        }}\n        onViewYearSelect={() => {\n          console.log('onViewYearSelect');\n          setCurrentActiveView('YEAR');\n        }}\n        onChange={(value: any) => {\n          setSelected(value);\n        }}\n      />\n    </>\n  );\n};\n"},description:{story:"Пример с переключением экранов выбора дат."}}},args:{},name:"Active ViewDate screen"},SimpleWithSetActiveViewDateAfterChooseYearStory=props=>(0,jsx_runtime.jsx)(SimpleWithSetActiveViewDateAfterChooseYearTemplate,{...props});SimpleWithSetActiveViewDateAfterChooseYearStory.displayName="SimpleWithSetActiveViewDateAfterChooseYearStory";const SimpleWithSetActiveViewDateAfterChooseYear={render:SimpleWithSetActiveViewDateAfterChooseYearStory,parameters:{docs:{source:{code:"import * as React from 'react';\n\nimport type { CalendarPropType, ViewScreenType } from '@admiral-ds/react-ui';\nimport { Calendar, T } from '@admiral-ds/react-ui';\n\nexport const SimpleWithSetActiveViewDateAfterChooseYearTemplate = (props: CalendarPropType) => {\n  const [selected, setSelected] = React.useState<Date | null>(null);\n  const [currentActiveView, setActiveViewDateScreen] = React.useState<ViewScreenType | null>(null);\n\n  return (\n    <>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '25px' }}>\n        Открытие экрана выбора месяца после выбора года\n      </T>\n      <Calendar\n        {...props}\n        selected={selected}\n        currentActiveView={currentActiveView}\n        onDateIncreaseDecrease={(date: any) => {\n          setActiveViewDateScreen(null);\n          console.log(date, 'onIncreaseDecreaseDate');\n        }}\n        onChange={(value: any) => {\n          setSelected(value);\n          console.log(value, 'onChange');\n        }}\n        onYearSelect={() => {\n          setActiveViewDateScreen('MONTH');\n        }}\n      />\n    </>\n  );\n};\n"},description:{story:"Пример с открытием экрана выбора месяца после выбора года."}}},args:{},name:"ViewDate screen after choose year"},SimpleWithSetActiveViewWithoutDayStory=props=>(0,jsx_runtime.jsx)(SimpleWithSetActiveViewWithoutDayTemplate,{...props});SimpleWithSetActiveViewWithoutDayStory.displayName="SimpleWithSetActiveViewWithoutDayStory";const SimpleWithSetActiveViewWithoutDay={render:SimpleWithSetActiveViewWithoutDayStory,parameters:{docs:{source:{code:"import * as React from 'react';\n\nimport type { CalendarPropType, ViewScreenType } from '@admiral-ds/react-ui';\nimport { Button, Calendar, T } from '@admiral-ds/react-ui';\n\nexport const SimpleWithSetActiveViewWithoutDayTemplate = ({ ...props }: CalendarPropType) => {\n  const [selected, setSelected] = React.useState<Date | null>(null);\n  const [currentActiveView, setCurrentActiveView] = React.useState<ViewScreenType | null>('MONTH');\n\n  return (\n    <>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '25px' }}>\n        Показываем только экраны выбора месяца и года\n      </T>\n      <T font=\"Body/Body 2 Long\" as=\"div\" style={{ marginBottom: '25px' }}>\n        Если выставлен currentActiveViewImportant, то необходимо самому управлять открытием экранов\n      </T>\n      <div>\n        <Button onClick={() => setSelected(new Date())}>set Date now</Button>\n      </div>\n      <br />\n      <Calendar\n        {...props}\n        selected={selected}\n        currentActiveView={currentActiveView}\n        currentActiveViewImportant={true}\n        onDateIncreaseDecrease={(date: any) => {\n          console.log(date, 'onIncreaseDecreaseDate');\n          setSelected(date);\n        }}\n        onChange={(value: any) => {\n          setSelected(value);\n          console.log(value, 'onChange');\n        }}\n        onViewMonthSelect={() => {\n          console.log('onViewMonthSelect');\n          setCurrentActiveView('MONTH');\n        }}\n        onViewYearSelect={() => {\n          console.log('onViewYearSelect');\n          setCurrentActiveView('YEAR');\n        }}\n      />\n    </>\n  );\n};\n"},description:{story:"Пример с выбором только месяца/года."}}},args:{},name:"ViewDate year/month"},SimpleWithSpecialDatesStory=props=>(0,jsx_runtime.jsx)(SimpleWithSpecialDatesTemplate,{...props});SimpleWithSpecialDatesStory.displayName="SimpleWithSpecialDatesStory";const SimpleWithSpecialDates={render:SimpleWithSpecialDatesStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport { css, ThemeProvider } from 'styled-components';\n\nimport { Calendar, weekendMixin } from '@admiral-ds/react-ui';\nimport type { CalendarPropType, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst startOfDay = (date: Date): Date => {\n  date.setHours(0, 0, 0, 0);\n  return date;\n};\n\nconst HOLIDAY = 'holidays';\nconst PRE_HOLIDAY = 'preholidays';\nconst WEEKEND = 'weekend';\nconst holidayCalendar: Array<{ date: string; type: string }> = [\n  { date: '2022-01-01', type: HOLIDAY },\n  { date: '2022-01-02', type: HOLIDAY },\n  { date: '2022-01-03', type: HOLIDAY },\n  { date: '2022-01-04', type: HOLIDAY },\n  { date: '2022-01-05', type: HOLIDAY },\n  { date: '2022-01-06', type: HOLIDAY },\n  { date: '2022-01-07', type: HOLIDAY },\n  { date: '2022-01-08', type: HOLIDAY },\n  { date: '2022-01-09', type: WEEKEND },\n  { date: '2022-01-15', type: WEEKEND },\n  { date: '2022-01-16', type: WEEKEND },\n  { date: '2022-01-22', type: WEEKEND },\n  { date: '2022-01-23', type: WEEKEND },\n  { date: '2022-01-29', type: WEEKEND },\n  { date: '2022-01-30', type: WEEKEND },\n  { date: '2022-02-05', type: WEEKEND },\n  { date: '2022-02-06', type: WEEKEND },\n  { date: '2022-02-12', type: WEEKEND },\n  { date: '2022-02-13', type: WEEKEND },\n  { date: '2022-02-19', type: WEEKEND },\n  { date: '2022-02-20', type: WEEKEND },\n  { date: '2022-02-23', type: HOLIDAY },\n  { date: '2022-02-26', type: WEEKEND },\n  { date: '2022-02-27', type: WEEKEND },\n  { date: '2022-03-06', type: WEEKEND },\n  { date: '2022-03-07', type: WEEKEND },\n  { date: '2022-03-08', type: HOLIDAY },\n  { date: '2022-03-12', type: WEEKEND },\n  { date: '2022-03-13', type: WEEKEND },\n  { date: '2022-03-19', type: WEEKEND },\n  { date: '2022-03-20', type: WEEKEND },\n  { date: '2022-03-26', type: WEEKEND },\n  { date: '2022-03-27', type: WEEKEND },\n  { date: '2022-04-02', type: WEEKEND },\n  { date: '2022-04-03', type: WEEKEND },\n  { date: '2022-04-09', type: WEEKEND },\n  { date: '2022-04-10', type: WEEKEND },\n  { date: '2022-04-16', type: WEEKEND },\n  { date: '2022-04-17', type: WEEKEND },\n  { date: '2022-04-23', type: WEEKEND },\n  { date: '2022-04-24', type: WEEKEND },\n  { date: '2022-04-30', type: WEEKEND },\n  { date: '2022-05-01', type: HOLIDAY },\n  { date: '2022-05-02', type: WEEKEND },\n  { date: '2022-05-03', type: WEEKEND },\n  { date: '2022-05-07', type: WEEKEND },\n  { date: '2022-05-08', type: WEEKEND },\n  { date: '2022-05-09', type: HOLIDAY },\n  { date: '2022-05-10', type: WEEKEND },\n  { date: '2022-05-14', type: WEEKEND },\n  { date: '2022-05-15', type: WEEKEND },\n  { date: '2022-05-21', type: WEEKEND },\n  { date: '2022-05-22', type: WEEKEND },\n  { date: '2022-05-28', type: WEEKEND },\n  { date: '2022-05-29', type: WEEKEND },\n  { date: '2022-06-04', type: WEEKEND },\n  { date: '2022-06-05', type: WEEKEND },\n  { date: '2022-06-11', type: WEEKEND },\n  { date: '2022-06-12', type: HOLIDAY },\n  { date: '2022-06-13', type: WEEKEND },\n  { date: '2022-06-18', type: WEEKEND },\n  { date: '2022-06-19', type: WEEKEND },\n  { date: '2022-06-25', type: WEEKEND },\n  { date: '2022-06-26', type: WEEKEND },\n  { date: '2022-07-02', type: WEEKEND },\n  { date: '2022-07-03', type: WEEKEND },\n  { date: '2022-07-09', type: WEEKEND },\n  { date: '2022-07-10', type: WEEKEND },\n  { date: '2022-07-16', type: WEEKEND },\n  { date: '2022-07-17', type: WEEKEND },\n  { date: '2022-07-23', type: WEEKEND },\n  { date: '2022-07-24', type: WEEKEND },\n  { date: '2022-07-30', type: WEEKEND },\n  { date: '2022-07-31', type: WEEKEND },\n  { date: '2022-08-06', type: WEEKEND },\n  { date: '2022-08-07', type: WEEKEND },\n  { date: '2022-08-13', type: WEEKEND },\n  { date: '2022-08-14', type: WEEKEND },\n  { date: '2022-08-20', type: WEEKEND },\n  { date: '2022-08-21', type: WEEKEND },\n  { date: '2022-08-27', type: WEEKEND },\n  { date: '2022-08-28', type: WEEKEND },\n  { date: '2022-09-03', type: WEEKEND },\n  { date: '2022-09-04', type: WEEKEND },\n  { date: '2022-09-10', type: WEEKEND },\n  { date: '2022-09-11', type: WEEKEND },\n  { date: '2022-09-17', type: WEEKEND },\n  { date: '2022-09-18', type: WEEKEND },\n  { date: '2022-09-24', type: WEEKEND },\n  { date: '2022-09-25', type: WEEKEND },\n  { date: '2022-10-01', type: WEEKEND },\n  { date: '2022-10-02', type: WEEKEND },\n  { date: '2022-10-08', type: WEEKEND },\n  { date: '2022-10-09', type: WEEKEND },\n  { date: '2022-10-15', type: WEEKEND },\n  { date: '2022-10-16', type: WEEKEND },\n  { date: '2022-10-22', type: WEEKEND },\n  { date: '2022-10-23', type: WEEKEND },\n  { date: '2022-10-29', type: WEEKEND },\n  { date: '2022-10-30', type: WEEKEND },\n  { date: '2022-11-04', type: HOLIDAY },\n  { date: '2022-11-05', type: WEEKEND },\n  { date: '2022-11-06', type: WEEKEND },\n  { date: '2022-11-12', type: WEEKEND },\n  { date: '2022-11-13', type: WEEKEND },\n  { date: '2022-11-19', type: WEEKEND },\n  { date: '2022-11-20', type: WEEKEND },\n  { date: '2022-11-26', type: WEEKEND },\n  { date: '2022-11-27', type: WEEKEND },\n  { date: '2022-12-03', type: WEEKEND },\n  { date: '2022-12-04', type: WEEKEND },\n  { date: '2022-12-10', type: WEEKEND },\n  { date: '2022-12-11', type: WEEKEND },\n  { date: '2022-12-17', type: WEEKEND },\n  { date: '2022-12-18', type: WEEKEND },\n  { date: '2022-12-24', type: WEEKEND },\n  { date: '2022-12-25', type: WEEKEND },\n  { date: '2022-12-31', type: WEEKEND },\n  { date: '2022-02-22', type: PRE_HOLIDAY },\n  { date: '2022-03-05', type: PRE_HOLIDAY },\n  { date: '2022-11-03', type: PRE_HOLIDAY },\n  { date: '2023-01-01', type: HOLIDAY },\n  { date: '2023-01-02', type: HOLIDAY },\n  { date: '2023-01-03', type: HOLIDAY },\n  { date: '2023-01-04', type: HOLIDAY },\n  { date: '2023-01-05', type: HOLIDAY },\n  { date: '2023-01-06', type: HOLIDAY },\n  { date: '2023-01-07', type: HOLIDAY },\n  { date: '2023-01-08', type: HOLIDAY },\n  { date: '2023-01-14', type: WEEKEND },\n  { date: '2023-01-15', type: WEEKEND },\n  { date: '2023-01-21', type: WEEKEND },\n  { date: '2023-01-22', type: WEEKEND },\n  { date: '2023-01-28', type: WEEKEND },\n  { date: '2023-01-29', type: WEEKEND },\n  { date: '2023-02-04', type: WEEKEND },\n  { date: '2023-02-05', type: WEEKEND },\n  { date: '2023-02-11', type: WEEKEND },\n  { date: '2023-02-12', type: WEEKEND },\n  { date: '2023-02-18', type: WEEKEND },\n  { date: '2023-02-19', type: WEEKEND },\n  { date: '2023-02-23', type: HOLIDAY },\n  { date: '2023-02-24', type: WEEKEND },\n  { date: '2023-02-25', type: WEEKEND },\n  { date: '2023-02-26', type: WEEKEND },\n  { date: '2023-03-04', type: WEEKEND },\n  { date: '2023-03-05', type: WEEKEND },\n  { date: '2023-03-08', type: HOLIDAY },\n  { date: '2023-03-11', type: WEEKEND },\n  { date: '2023-03-12', type: WEEKEND },\n  { date: '2023-03-18', type: WEEKEND },\n  { date: '2023-03-19', type: WEEKEND },\n  { date: '2023-03-25', type: WEEKEND },\n  { date: '2023-03-26', type: WEEKEND },\n  { date: '2023-04-01', type: WEEKEND },\n  { date: '2023-04-02', type: WEEKEND },\n  { date: '2023-04-08', type: WEEKEND },\n  { date: '2023-04-09', type: WEEKEND },\n  { date: '2023-04-15', type: WEEKEND },\n  { date: '2023-04-16', type: WEEKEND },\n  { date: '2023-04-22', type: WEEKEND },\n  { date: '2023-04-23', type: WEEKEND },\n  { date: '2023-04-29', type: WEEKEND },\n  { date: '2023-04-30', type: WEEKEND },\n  { date: '2023-05-01', type: HOLIDAY },\n  { date: '2023-05-06', type: WEEKEND },\n  { date: '2023-05-07', type: WEEKEND },\n  { date: '2023-05-08', type: WEEKEND },\n  { date: '2023-05-09', type: HOLIDAY },\n  { date: '2023-05-13', type: WEEKEND },\n  { date: '2023-05-14', type: WEEKEND },\n  { date: '2023-05-20', type: WEEKEND },\n  { date: '2023-05-21', type: WEEKEND },\n  { date: '2023-05-27', type: WEEKEND },\n  { date: '2023-05-28', type: WEEKEND },\n  { date: '2023-06-03', type: WEEKEND },\n  { date: '2023-06-04', type: WEEKEND },\n  { date: '2023-06-10', type: WEEKEND },\n  { date: '2023-06-11', type: WEEKEND },\n  { date: '2023-06-12', type: HOLIDAY },\n  { date: '2023-06-17', type: WEEKEND },\n  { date: '2023-06-18', type: WEEKEND },\n  { date: '2023-06-24', type: WEEKEND },\n  { date: '2023-06-25', type: WEEKEND },\n  { date: '2023-07-01', type: WEEKEND },\n  { date: '2023-07-02', type: WEEKEND },\n  { date: '2023-07-08', type: WEEKEND },\n  { date: '2023-07-09', type: WEEKEND },\n  { date: '2023-07-15', type: WEEKEND },\n  { date: '2023-07-16', type: WEEKEND },\n  { date: '2023-07-22', type: WEEKEND },\n  { date: '2023-07-23', type: WEEKEND },\n  { date: '2023-07-29', type: WEEKEND },\n  { date: '2023-07-30', type: WEEKEND },\n  { date: '2023-08-05', type: WEEKEND },\n  { date: '2023-08-06', type: WEEKEND },\n  { date: '2023-08-12', type: WEEKEND },\n  { date: '2023-08-13', type: WEEKEND },\n  { date: '2023-08-19', type: WEEKEND },\n  { date: '2023-08-20', type: WEEKEND },\n  { date: '2023-08-26', type: WEEKEND },\n  { date: '2023-08-27', type: WEEKEND },\n  { date: '2023-09-02', type: WEEKEND },\n  { date: '2023-09-03', type: WEEKEND },\n  { date: '2023-09-09', type: WEEKEND },\n  { date: '2023-09-10', type: WEEKEND },\n  { date: '2023-09-16', type: WEEKEND },\n  { date: '2023-09-17', type: WEEKEND },\n  { date: '2023-09-23', type: WEEKEND },\n  { date: '2023-09-24', type: WEEKEND },\n  { date: '2023-09-30', type: WEEKEND },\n  { date: '2023-10-01', type: WEEKEND },\n  { date: '2023-10-07', type: WEEKEND },\n  { date: '2023-10-08', type: WEEKEND },\n  { date: '2023-10-14', type: WEEKEND },\n  { date: '2023-10-15', type: WEEKEND },\n  { date: '2023-10-21', type: WEEKEND },\n  { date: '2023-10-22', type: WEEKEND },\n  { date: '2023-10-28', type: WEEKEND },\n  { date: '2023-10-29', type: WEEKEND },\n  { date: '2023-11-04', type: HOLIDAY },\n  { date: '2023-11-05', type: WEEKEND },\n  { date: '2023-11-06', type: WEEKEND },\n  { date: '2023-11-11', type: WEEKEND },\n  { date: '2023-11-12', type: WEEKEND },\n  { date: '2023-11-18', type: WEEKEND },\n  { date: '2023-11-19', type: WEEKEND },\n  { date: '2023-11-25', type: WEEKEND },\n  { date: '2023-11-26', type: WEEKEND },\n  { date: '2023-12-02', type: WEEKEND },\n  { date: '2023-12-03', type: WEEKEND },\n  { date: '2023-12-09', type: WEEKEND },\n  { date: '2023-12-10', type: WEEKEND },\n  { date: '2023-12-16', type: WEEKEND },\n  { date: '2023-12-17', type: WEEKEND },\n  { date: '2023-12-23', type: WEEKEND },\n  { date: '2023-12-24', type: WEEKEND },\n  { date: '2023-12-30', type: WEEKEND },\n  { date: '2023-12-31', type: WEEKEND },\n  { date: '2023-02-22', type: PRE_HOLIDAY },\n  { date: '2023-03-07', type: PRE_HOLIDAY },\n  { date: '2023-11-03', type: PRE_HOLIDAY },\n];\n\nconst holidayMixin = css<{ disabled?: boolean }>`\n  color: ${(p) => (p.disabled ? p.theme.color['Success/Success 30'] : p.theme.color['Success/Success 50 Main'])};\n`;\n\nconst preHolidayMixin = css<{ disabled?: boolean }>`\n  color: ${(p) =>\n    p.disabled ? p.theme.color['Attention/Attention 30'] : p.theme.color['Attention/Attention 50 Main']};\n`;\n\nconst holidayDates = new Map(\n  holidayCalendar.map((day) => {\n    const date = new Date(day.date);\n    const keyDate = startOfDay(date);\n    return [keyDate.getTime(), day.type];\n  }),\n);\n\nexport const SimpleWithSpecialDatesTemplate = ({\n  themeBorderKind,\n  ...props\n}: CalendarPropType & { themeBorderKind?: BorderRadiusType }) => {\n  const [selected, setSelected] = React.useState<Date | null>(null);\n  const [endDate, setEndDate] = React.useState<Date | null>(null);\n\n  const highlightHolidays = (day: Date) => {\n    const key = startOfDay(day).getTime();\n    const check = holidayDates.get(key);\n    switch (check) {\n      case HOLIDAY:\n        return holidayMixin;\n      case PRE_HOLIDAY:\n        return preHolidayMixin;\n      case WEEKEND:\n        return weekendMixin;\n      default:\n        return undefined;\n    }\n  };\n\n  return props.range ? (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Calendar\n        {...props}\n        range\n        startDate={selected}\n        endDate={endDate}\n        onChange={(value: any) => {\n          setSelected(value[0]);\n          setEndDate(value[1]);\n        }}\n        highlightSpecialDay={highlightHolidays}\n      />\n    </ThemeProvider>\n  ) : (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind)}>\n      <Calendar\n        {...props}\n        selected={selected}\n        onChange={(value: any) => {\n          setSelected(value);\n        }}\n        highlightSpecialDay={highlightHolidays}\n      />\n    </ThemeProvider>\n  );\n};\n"},description:{story:"Пример с подсветкой выходных, праздничный и специальных дат."}}},args:{},name:"Highlight special dates"};CalendarSimple.parameters={...CalendarSimple.parameters,docs:{...CalendarSimple.parameters?.docs,source:{originalSource:"{\n  render: CalendarSimpleStory,\n  parameters: {\n    docs: {\n      source: {\n        code: CalendarSimpleRaw\n      },\n      description: {\n        story: 'Пример календаря с выбором даты>.'\n      }\n    }\n  },\n  args: {},\n  name: 'Simple.'\n}",...CalendarSimple.parameters?.docs?.source}}},Range.parameters={...Range.parameters,docs:{...Range.parameters?.docs,source:{originalSource:"{\n  render: RangeStory,\n  parameters: {\n    docs: {\n      source: {\n        code: RangeRaw\n      },\n      description: {\n        story: 'Пример с выбором диапазона.'\n      }\n    }\n  },\n  args: {},\n  name: 'Range.'\n}",...Range.parameters?.docs?.source}}},SimpleWithMaxDate.parameters={...SimpleWithMaxDate.parameters,docs:{...SimpleWithMaxDate.parameters?.docs,source:{originalSource:"{\n  render: SimpleWithMaxDateStory,\n  parameters: {\n    docs: {\n      source: {\n        code: SimpleWithMaxDateRaw\n      },\n      description: {\n        story: 'Пример с ограничением максимальной даты.'\n      }\n    }\n  },\n  args: {},\n  name: 'maxDate.'\n}",...SimpleWithMaxDate.parameters?.docs?.source}}},SimpleWithFilterDate.parameters={...SimpleWithFilterDate.parameters,docs:{...SimpleWithFilterDate.parameters?.docs,source:{originalSource:"{\n  render: SimpleWithFilterDateStory,\n  parameters: {\n    docs: {\n      source: {\n        code: SimpleWithFilterDateRaw\n      },\n      description: {\n        story: 'Пример с недоступными для выбора датами.'\n      }\n    }\n  },\n  args: {},\n  name: 'FilterDate.'\n}",...SimpleWithFilterDate.parameters?.docs?.source}}},SimpleWithChangeViewDate.parameters={...SimpleWithChangeViewDate.parameters,docs:{...SimpleWithChangeViewDate.parameters?.docs,source:{originalSource:"{\n  render: SimpleWithChangeViewDateStory,\n  parameters: {\n    docs: {\n      source: {\n        code: SimpleWithChangeViewDateRaw\n      },\n      description: {\n        story: 'Пример с коллбеками.'\n      }\n    }\n  },\n  args: {},\n  name: 'Callback'\n}",...SimpleWithChangeViewDate.parameters?.docs?.source}}},SimpleWithSetActiveViewDate.parameters={...SimpleWithSetActiveViewDate.parameters,docs:{...SimpleWithSetActiveViewDate.parameters?.docs,source:{originalSource:"{\n  render: SimpleWithSetActiveViewDateStory,\n  parameters: {\n    docs: {\n      source: {\n        code: SimpleWithSetActiveViewDateRaw\n      },\n      description: {\n        story: 'Пример с переключением экранов выбора дат.'\n      }\n    }\n  },\n  args: {},\n  name: 'Active ViewDate screen'\n}",...SimpleWithSetActiveViewDate.parameters?.docs?.source}}},SimpleWithSetActiveViewDateAfterChooseYear.parameters={...SimpleWithSetActiveViewDateAfterChooseYear.parameters,docs:{...SimpleWithSetActiveViewDateAfterChooseYear.parameters?.docs,source:{originalSource:"{\n  render: SimpleWithSetActiveViewDateAfterChooseYearStory,\n  parameters: {\n    docs: {\n      source: {\n        code: SimpleWithSetActiveViewDateAfterChooseYearRaw\n      },\n      description: {\n        story: 'Пример с открытием экрана выбора месяца после выбора года.'\n      }\n    }\n  },\n  args: {},\n  name: 'ViewDate screen after choose year'\n}",...SimpleWithSetActiveViewDateAfterChooseYear.parameters?.docs?.source}}},SimpleWithSetActiveViewWithoutDay.parameters={...SimpleWithSetActiveViewWithoutDay.parameters,docs:{...SimpleWithSetActiveViewWithoutDay.parameters?.docs,source:{originalSource:"{\n  render: SimpleWithSetActiveViewWithoutDayStory,\n  parameters: {\n    docs: {\n      source: {\n        code: SimpleWithSetActiveViewWithoutDayRaw\n      },\n      description: {\n        story: 'Пример с выбором только месяца/года.'\n      }\n    }\n  },\n  args: {},\n  name: 'ViewDate year/month'\n}",...SimpleWithSetActiveViewWithoutDay.parameters?.docs?.source}}},SimpleWithSpecialDates.parameters={...SimpleWithSpecialDates.parameters,docs:{...SimpleWithSpecialDates.parameters?.docs,source:{originalSource:"{\n  render: SimpleWithSpecialDatesStory,\n  parameters: {\n    docs: {\n      source: {\n        code: SimpleWithSpecialDatesRaw\n      },\n      description: {\n        story: 'Пример с подсветкой выходных, праздничный и специальных дат.'\n      }\n    }\n  },\n  args: {},\n  name: 'Highlight special dates'\n}",...SimpleWithSpecialDates.parameters?.docs?.source}}};const __namedExportsOrder=["CalendarSimple","Range","SimpleWithMaxDate","SimpleWithFilterDate","SimpleWithChangeViewDate","SimpleWithSetActiveViewDate","SimpleWithSetActiveViewDateAfterChooseYear","SimpleWithSetActiveViewWithoutDay","SimpleWithSpecialDates"]},"./src/components/T/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>T});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),_src_components_Typography__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/components/Typography/typography.ts"),_src_components_themes__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/themes/common/index.ts"),_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/skeleton/animation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const skeletonMixin=(0,styled_components__WEBPACK_IMPORTED_MODULE_2__.iv)(["",";pointer-events:none;"],_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_3__.x),Tspan=styled_components__WEBPACK_IMPORTED_MODULE_2__.ZP.span.withConfig({displayName:"T__Tspan",componentId:"sc-1bd4slr-0"})(["color:",";",";"," ",""],(({$color,theme,$skeleton})=>$skeleton?"transparent":$color?theme.color[$color]?theme.color[$color]:$color:theme.color[_src_components_themes__WEBPACK_IMPORTED_MODULE_4__.rG]),(p=>_src_components_Typography__WEBPACK_IMPORTED_MODULE_5__.c[p.$font]),(p=>p.$cssMixin?p.$cssMixin:""),(p=>p.$skeleton&&skeletonMixin)),T=(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((({font,color,cssMixin,skeleton,...props},ref)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Tspan,{ref,...props,$font:font,$color:color,$cssMixin:cssMixin,$skeleton:skeleton})));T.displayName="T";try{T.displayName="T",T.__docgenInfo={description:"",displayName:"T",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/T/index.tsx#T"]={docgenInfo:T.__docgenInfo,name:"T",path:"src/components/T/index.tsx#T"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/themes/common/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{lI:()=>MainPrimaryColorName,rG:()=>DefaultFontColorName,sl:()=>DefaultBackgroundColorName});const DefaultFontColorName="Neutral/Neutral 90",DefaultBackgroundColorName="Neutral/Neutral 00",MainPrimaryColorName="Primary/Primary 60 Main"}}]);