{"version":3,"file":"components-Tooltip-stories-Tooltip-stories.82a3ae6b.iframe.bundle.js","mappings":";AAmDA;AAAA;AAAA;AAAA;;;;;ACGA;AAAA;AAAA;AAAA;;;;;;;;;ACKA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkDA;AAAA;AAOA;AAAA;AAAA;AAAA;AAoLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://@admiral-ds/react-ui/./src/components/Tooltip/stories/TooltipBase.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Tooltip/stories/TooltipDelay.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Tooltip/stories/TooltipMenuButton.template.tsx","webpack://@admiral-ds/react-ui/"],"sourcesContent":["import * as React from 'react';\nimport { Tooltip, Button } from '@admiral-ds/react-ui';\nimport type { ITooltipProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as DeleteOutline } from '@admiral-ds/icons/build/system/DeleteOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nexport const TooltipBaseTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: ITooltipProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const btnRef = React.useRef<HTMLButtonElement>(null);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    function show() {\n      setVisible(true);\n    }\n    function hide() {\n      setVisible(false);\n    }\n    const button = btnRef.current;\n    if (button) {\n      /** Рекомендуется использовать именно addEventListener, так как React SyntheticEvent onMouseEnter\n       * отрабатывает некорректно в случае, если мышь была наведена на задизейбленный элемент,\n       * а затем была наведена на target элемент\n       * https://github.com/facebook/react/issues/19419 */\n      button.addEventListener('mouseenter', show);\n      button.addEventListener('focus', show);\n      button.addEventListener('mouseleave', hide);\n      button.addEventListener('blur', hide);\n      return () => {\n        button.removeEventListener('mouseenter', show);\n        button.removeEventListener('focus', show);\n        button.removeEventListener('mouseleave', hide);\n        button.removeEventListener('blur', hide);\n      };\n    }\n  }, [setVisible]);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <Button ref={btnRef} dimension=\"m\" displayAsSquare aria-label=\"Delete\" aria-describedby=\"test1\">\n        <DeleteOutline aria-hidden />\n      </Button>\n      {visible && (\n        <Tooltip\n          dimension={props.dimension}\n          targetElement={btnRef.current}\n          renderContent={() =>\n            `Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin\n              literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney\n              College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage,\n              and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem\n              Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum'`\n          }\n          style={{ minWidth: '200px', maxWidth: '300px' }}\n          tooltipPosition={props.tooltipPosition}\n          id=\"test1\"\n        />\n      )}\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Tooltip, TOOLTIP_DELAY, Button } from '@admiral-ds/react-ui';\nimport type { ITooltipProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as DeleteOutline } from '@admiral-ds/icons/build/system/DeleteOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nexport const TooltipDelayTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: ITooltipProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const btnRef = React.useRef<HTMLButtonElement | null>(null);\n  const [visible, setVisible] = React.useState(false);\n  const [timer, setTimer] = React.useState<NodeJS.Timeout>();\n\n  React.useEffect(() => {\n    function show() {\n      setTimer(setTimeout(() => setVisible(true), TOOLTIP_DELAY));\n    }\n    function hide() {\n      clearTimeout(timer);\n      setVisible(false);\n    }\n    const button = btnRef.current;\n    if (button) {\n      /** Рекомендуется использовать именно addEventListener, так как React SyntheticEvent onMouseEnter\n       * отрабатывает некорректно в случае, если мышь была наведена на задизейбленный элемент,\n       * а затем была наведена на target элемент\n       * https://github.com/facebook/react/issues/19419 */\n      button.addEventListener('mouseenter', show);\n      button.addEventListener('focus', show);\n      button.addEventListener('mouseleave', hide);\n      button.addEventListener('blur', hide);\n      return () => {\n        if (timer) clearTimeout(timer);\n        button.removeEventListener('mouseenter', show);\n        button.removeEventListener('focus', show);\n        button.removeEventListener('mouseleave', hide);\n        button.removeEventListener('blur', hide);\n      };\n    }\n  }, [setTimer, setVisible, timer]);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <Button ref={btnRef} dimension=\"m\" displayAsSquare aria-label=\"Delete\" aria-describedby=\"test1\">\n        <DeleteOutline aria-hidden />\n      </Button>\n      {visible && (\n        <Tooltip\n          dimension={props.dimension}\n          targetElement={btnRef.current}\n          renderContent={() =>\n            `Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin\n          literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney\n          College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage,\n          and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem\n          Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum'`\n          }\n          tooltipPosition={props.tooltipPosition}\n          style={{ minWidth: '200px', maxWidth: '300px' }}\n          id=\"test1\"\n        />\n      )}\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Tooltip, MenuButton, MenuItem } from '@admiral-ds/react-ui';\nimport type { BorderRadiusType, ITooltipProps, RenderOptionProps } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst menuItems = [\n  { id: 1, label: 'item-1' },\n  { id: 2, label: 'item-2' },\n  { id: 3, label: 'item-3' },\n];\n\nexport const TooltipMenuButtonTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: ITooltipProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const menuModel = React.useMemo(() => {\n    return menuItems.map((item) => ({\n      id: String(item.id),\n      render: (props: RenderOptionProps) => (\n        <MenuItem {...props} key={item.id}>\n          {item.label}\n        </MenuItem>\n      ),\n    }));\n  }, []);\n\n  const btnRef = React.useRef<HTMLButtonElement | null>(null);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    function show() {\n      setVisible(true);\n    }\n    function hide() {\n      setVisible(false);\n    }\n    const button = btnRef.current;\n    if (button) {\n      /** Рекомендуется использовать именно addEventListener, так как React SyntheticEvent onMouseEnter\n       * отрабатывает некорректно в случае, если мышь была наведена на задизейбленный элемент,\n       * а затем была наведена на target элемент\n       * https://github.com/facebook/react/issues/19419 */\n      button.addEventListener('mouseenter', show);\n      button.addEventListener('focus', show);\n      button.addEventListener('mouseleave', hide);\n      button.addEventListener('blur', hide);\n      return () => {\n        button.removeEventListener('mouseenter', show);\n        button.removeEventListener('focus', show);\n        button.removeEventListener('mouseleave', hide);\n        button.removeEventListener('blur', hide);\n      };\n    }\n  }, [visible, setVisible]);\n\n  const renderTooltipContent = React.useMemo(\n    () => () =>\n      `Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin\n    literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney\n    College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage,\n    and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem\n    Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum'`,\n    [],\n  );\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <MenuButton dimension=\"m\" items={menuModel} style={{ marginRight: 20 }}>\n        TEST\n      </MenuButton>\n      <MenuButton ref={btnRef} dimension=\"m\" items={menuModel}>\n        TEST WITH TOOLTIP\n      </MenuButton>\n      {visible && (\n        <Tooltip\n          dimension={props.dimension}\n          targetElement={btnRef.current}\n          renderContent={renderTooltipContent}\n          tooltipPosition={props.tooltipPosition}\n          style={{ minWidth: '200px', maxWidth: '300px' }}\n          id=\"test1\"\n        />\n      )}\n    </ThemeProvider>\n  );\n};\n"],"names":[],"sourceRoot":""}