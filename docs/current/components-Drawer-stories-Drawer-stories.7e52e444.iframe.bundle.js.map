{"version":3,"file":"components-Drawer-stories-Drawer-stories.7e52e444.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmsources":["webpack://@admiral-ds/react-ui/./src/components/Drawer/index.tsx","webpack://@admiral-ds/react-ui/"],"sourcesContent":["import type { CSSProperties, HTMLAttributes, KeyboardEvent, MouseEvent } from 'react';\nimport { forwardRef, useEffect, useLayoutEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled, { css, useTheme, keyframes } from 'styled-components';\nimport type { DataAttributes } from 'styled-components';\n\nimport { getKeyboardFocusableElements } from '#src/components/common/utils/getKeyboardFocusableElements';\nimport { parseShadow } from '#src/components/common/utils/parseShadowFromTheme';\nimport { refSetter } from '#src/components/common/utils/refSetter';\nimport { LIGHT_THEME } from '#src/components/themes';\nimport { manager } from '#src/components/Modal/manager';\nimport { CloseIconPlacementButton } from '#src/components/IconPlacement';\n\nimport { DrawerContext } from './components';\n\ntype Position = 'right' | 'left';\n\nconst transitionTimingFunc = 'cubic-bezier(0, 0, 0.2, 1)';\nconst transitionDuration = '0.3s';\nconst transitionMixin = `\n  ${transitionDuration} ${transitionTimingFunc} 0ms\n`;\n\nconst fadeInRight = keyframes`\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n`;\n\nconst fadeInLeft = keyframes`\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n`;\n\nconst fadeInMixin = css<{ $position?: Position }>`\n  animation-name: ${({ $position }) => ($position === 'right' ? fadeInRight : fadeInLeft)};\n  animation-duration: ${transitionDuration};\n  animation-timing-function: ${transitionTimingFunc};\n`;\n\nconst Overlay = styled.div<{\n  $overlayCssMixin: ReturnType<typeof css>;\n  $backdrop?: boolean;\n  $position: Position;\n}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  z-index: var(--admiral-z-index-drawer, ${({ theme }) => theme.zIndex.drawer});\n  ${(p) => p.$overlayCssMixin}\n  outline: none;\n  pointer-events: none;\n  background-color: transparent;\n  transition: background-color ${transitionMixin};\n\n  &[data-visible='true'] {\n    ${({ theme, $backdrop }) =>\n      $backdrop && `background-color: var(--admiral-color-Opacity_Modal, ${theme.color['Opacity/Modal']});`}\n    ${({ $backdrop }) => $backdrop && `pointer-events: auto;`}\n\n    & > div {\n      opacity: 1;\n      transform: translateX(0);\n      transition: opacity 0ms linear 0ms;\n      ${fadeInMixin}\n    }\n  }\n`;\n\nconst DrawerComponent = styled.div<{ $position: Position; $mobile?: boolean }>`\n  position: absolute;\n  box-sizing: border-box;\n  top: 0;\n  bottom: 0;\n  ${({ $position }) => ($position === 'right' ? 'right: 0;' : 'left: 0;')}\n  display: flex;\n  flex: 1 0 auto;\n  flex-direction: column;\n  overflow: hidden;\n  padding: 20px 0 24px;\n  ${({ $mobile }) => $mobile && 'min-width: calc(100% - 16px);'}\n  max-width: calc(100% - 16px);\n  background-color: var(--admiral-color-Neutral_Neutral00, ${(p) => p.theme.color['Neutral/Neutral 00']});\n  color: var(--admiral-color-Neutral_Neutral90, ${(p) => p.theme.color['Neutral/Neutral 90']});\n  box-shadow: var(--admiral-box-shadow-Shadow16, ${(p) => parseShadow(p.theme.shadow['Shadow 16'])});\n  outline: none;\n  transform: ${({ $position }) => ($position === 'right' ? 'translateX(100%)' : 'translateX(-100%)')};\n  transition:\n    transform ${transitionMixin},\n    opacity 0ms linear 0.3s;\n  pointer-events: auto;\n  opacity: 0;\n`;\n\nconst CloseButton = styled(CloseIconPlacementButton)<{ $mobile?: boolean }>`\n  position: absolute;\n  top: 20px;\n  right: ${({ $mobile }) => ($mobile ? 16 : 24)}px;\n`;\n\nconst nothing = () => {};\nexport interface DrawerProps extends HTMLAttributes<HTMLDivElement> {\n  /** Состояние компонента: открыт/закрыт */\n  isOpen?: boolean;\n  /** С какой части экрана будет выдвигаться компонент (right по умолчанию) */\n  position?: Position;\n  /** Наличие затемненного фона, блокирующего контент страницы */\n  backdrop?: boolean;\n  /** Контейнер, в котором происходит размещение компонента (BODY по умолчанию) */\n  container?: Element;\n  /** Мобильная версия компонента */\n  mobile?: boolean;\n  /** Закрытие на нажатие клавиши Escape. Происходит только при условии, что фокус находится внутри drawerа.\n   * По умолчанию при открытии компонента фокус проставляется внутри него.\n   * Однако при backdrop = false, пользователь может взаимодействовать с остальной страницей и вывести фокус из drawerа,\n   * в этом случае нажатие на клавишу Escape обработано не будет. */\n  closeOnEscapeKeyDown?: boolean;\n  /** Закрытие на клик по затемненному фону (если backdrop = true) */\n  closeOnBackdropClick?: boolean;\n  /** Отображение иконки крестика в верхнем правом углу */\n  displayCloseIcon?: boolean;\n  /** Обработчик закрытия компонента. Срабатывает:\n   * 1) при клике на крестик в верхнем правому углу\n   * 2) при нажатии Escape и closeOnEscapeKeyDown равным true\n   * 3) при клике по затемненному фону и closeOnBackdropClick равным true\n   */\n  onClose?: () => void;\n\n  /**\n   * Возможность изменять стили для подложки drawerа через миксин, созданный с помощью styled css.\n   * Например цвет фона в зависимости от темы:\n   *  const overlayStyles = css\\`background-color: ${({ theme }) => hexToRgba(theme.color[\"Neutral/Neutral 05\"], 0.6)};\\`\n   * */\n  overlayCssMixin?: ReturnType<typeof css>;\n  /** Позволяет добавлять класс на подложку drawerа  */\n  overlayClassName?: string;\n  /** Позволяет добавлять стили на подложку drawerа  */\n  overlayStyle?: CSSProperties;\n  locale?: {\n    /** Атрибут aria-label, описывающий назначение кнопки с крестиком, закрывающей компонент */\n    closeButtonAriaLabel?: string;\n  };\n  /** Конфиг функция пропсов для кнопки закрытия компонента. На вход получает начальный набор пропсов, на\n   * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */\n  closeButtonPropsConfig?: (\n    props: React.ComponentProps<typeof CloseButton>,\n  ) => Partial<React.ComponentProps<typeof CloseButton> & DataAttributes>;\n}\n\nexport const Drawer = forwardRef<HTMLDivElement, DrawerProps>(\n  (\n    {\n      isOpen = false,\n      position: userPosition = 'right',\n      backdrop = true,\n      overlayCssMixin = css``,\n      overlayClassName,\n      overlayStyle,\n      container,\n      mobile = false,\n      onClose,\n      closeOnEscapeKeyDown = false,\n      closeOnBackdropClick = false,\n      displayCloseIcon = true,\n      children,\n      locale,\n      closeButtonPropsConfig = nothing,\n      ...props\n    },\n    ref,\n  ) => {\n    const position = mobile ? 'right' : userPosition;\n    const theme = useTheme() || LIGHT_THEME;\n    const closeBtnAriaLabel =\n      locale?.closeButtonAriaLabel || theme.locales[theme.currentLocale].modal.closeButtonAriaLabel;\n    const drawer = useRef<any>({});\n    const drawerRef: any = useRef<HTMLDivElement>(null);\n    const overlayRef = useRef<HTMLDivElement>(null);\n    const previousFocusedElement: any = useRef(null);\n\n    useEffect(() => {\n      if (overlayRef.current) {\n        if (isOpen) {\n          overlayRef.current.dataset.visible = 'true';\n        } else {\n          overlayRef.current.dataset.visible = 'false';\n        }\n      }\n    }, [isOpen]);\n\n    const getDrawer = () => {\n      drawer.current.modalEl = drawerRef.current;\n      drawer.current.containerEl = container || document.body;\n      return drawer.current;\n    };\n\n    // manage styles of drawer container\n    useLayoutEffect(() => {\n      if (backdrop && isOpen) {\n        manager.add(getDrawer(), container || document.body);\n        if (drawerRef.current) {\n          manager.mount(getDrawer());\n        }\n        return () => {\n          manager.remove(getDrawer());\n        };\n      }\n    }, [backdrop, isOpen, container]);\n\n    // manage focus\n    useLayoutEffect(() => {\n      if (isOpen) {\n        previousFocusedElement.current = document.activeElement;\n\n        // set focus inside drawer\n        drawerRef.current?.focus();\n\n        return () => {\n          // return focus on close of drawer\n          previousFocusedElement.current?.focus();\n        };\n      }\n    }, [isOpen]);\n\n    const handleKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'Escape' && closeOnEscapeKeyDown) {\n        // prevent browser-specific escape key behavior (Safari exits fullscreen)\n        event.preventDefault();\n        // prevent other overlays from closing\n        event.stopPropagation();\n        onClose?.();\n      } else if (event.key === 'Tab') {\n        // focus trap\n        const focusableEls: any = getKeyboardFocusableElements(drawerRef.current);\n        if (event.shiftKey) {\n          /* shift + tab */\n          if (document.activeElement === focusableEls[0] || document.activeElement === drawerRef.current) {\n            focusableEls[focusableEls.length - 1].focus();\n            event.preventDefault();\n          }\n        } /* tab */ else {\n          if (document.activeElement === focusableEls[focusableEls.length - 1]) {\n            focusableEls[0].focus();\n            event.preventDefault();\n          }\n        }\n      }\n    };\n\n    const handleMouseDown = (event: MouseEvent<HTMLDivElement>) => {\n      closeOnBackdropClick && event.target === overlayRef.current && onClose?.();\n    };\n\n    const handleCloseBtnClick = (event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>) => {\n      event.stopPropagation();\n      onClose?.();\n    };\n\n    const closeButtonProps = {\n      dimension: 'lSmall',\n      'aria-label': closeBtnAriaLabel,\n      $mobile: mobile,\n      onClick: handleCloseBtnClick,\n    } satisfies React.ComponentProps<typeof CloseButton>;\n\n    return createPortal(\n      <Overlay\n        ref={overlayRef}\n        tabIndex={-1}\n        onMouseDown={handleMouseDown}\n        onKeyDown={handleKeyDown}\n        $overlayCssMixin={overlayCssMixin}\n        className={overlayClassName}\n        style={overlayStyle}\n        $backdrop={backdrop}\n        data-visible={false}\n        $position={position}\n      >\n        <DrawerComponent\n          ref={refSetter(ref, drawerRef)}\n          tabIndex={-1}\n          role=\"dialog\"\n          aria-modal\n          $position={position}\n          $mobile={mobile}\n          {...props}\n        >\n          <DrawerContext.Provider value={{ mobile, displayCloseIcon }}>{children}</DrawerContext.Provider>\n          {displayCloseIcon && <CloseButton {...closeButtonProps} {...closeButtonPropsConfig(closeButtonProps)} />}\n        </DrawerComponent>\n      </Overlay>,\n      container || document.body,\n    );\n  },\n);\n\nDrawer.displayName = 'Drawer';\n\nexport { DrawerTitle, DrawerContent, DrawerButtonPanel } from './components';\n"],"names":[],"sourceRoot":""}