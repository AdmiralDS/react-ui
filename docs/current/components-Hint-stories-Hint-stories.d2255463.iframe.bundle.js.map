{"version":3,"file":"components-Hint-stories-Hint-stories.d2255463.iframe.bundle.js","mappingsuGA;AAAA;AAOA;AAAA;AAAA;AAAA;AAwSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://@admiral-ds/react-ui/./src/components/Hint/stories/HintBase.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Hint/stories/HintClassName.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Hint/stories/HintClick.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Hint/stories/HintPosition.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Hint/stories/HintTextButton.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Hint/stories/HintTarget.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Hint/stories/HintAnchorCss.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Hint/stories/HintWithHeader.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Hint/stories/HintDimension.template.tsx","webpack://@admiral-ds/react-ui/"],"sourcesContent":["import * as React from 'react';\nimport { Hint, Button } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nexport const HintBaseTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <Hint\n        {...props}\n        renderContent={() => text}\n        anchorId=\"hint_base\"\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint_base\"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Hint, Button, T } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nexport const HintClassNameTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '24px' }}>\n        На Hint, созданный через портал, добавляется класс через пропс className.\n      </T>\n      <Hint\n        {...props}\n        className=\"custom-hint-class\"\n        renderContent={() => text}\n        anchorId=\"hint-class1\"\n        visibilityTrigger=\"click\"\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint-class1\"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Hint, Button } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nexport const HintClickTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n  const handleButtonClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (visible) {\n      setVisible(false);\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <Hint\n        {...props}\n        renderContent={() => text}\n        anchorId=\"hint_click\"\n        visibilityTrigger=\"click\"\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint_click\"\n          onClick={handleButtonClick}\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Hint, Button, T, UnorderedList, ListItem } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nconst StyledButton = styled(Button)`\n  padding: 4px;\n`;\nconst Separator = styled.div`\n  height: 8px;\n`;\n\nexport const HintPositionTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [visible1, setVisible1] = React.useState(false);\n  const [visible2, setVisible2] = React.useState(false);\n  const [visible3, setVisible3] = React.useState(false);\n  const [visible4, setVisible4] = React.useState(false);\n  const handleVisibilityChange1 = (visible: boolean) => setVisible1(visible);\n  const handleVisibilityChange2 = (visible: boolean) => setVisible2(visible);\n  const handleVisibilityChange3 = (visible: boolean) => setVisible3(visible);\n  const handleVisibilityChange4 = (visible: boolean) => setVisible4(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '24px' }}>\n        Компонент имеет 8 основных вариантов позиционирования: снизу справа, снизу слева, сверху справа, сверху слева,\n        слева внизу, слева вверху, справа внизу и справа вверху. Позиции перечислены в порядке приоритета. По умолчанию\n        компонент сам рассчитывает свою позицию, исходя из приоритета позиций и свободного места на экране. Если хинт не\n        помещается ни в один из перечисленных 8 вариантов позиционирования, то происходит проверка того, можно ли\n        разместить хинт снизу/сверху/слева/справа относительно центра target-элемента или снизу/сверху по центру\n        страницы.\n        <Separator />\n        Также пользователь может сам с помощью параметра hintPosition задать, с какой стороны от target-элемента должен\n        появляться Hint. Параметр hintPosition может принимать следующие значения - bottom|top|left|right. <Separator />\n        <UnorderedList>\n          <ListItem>\n            При hintPosition='bottom' хинт рендерится снизу от target-элемента с возможным сдвигом по горизонтальной\n            оси, т.е. происходит выбор из 4 вариантов позиционирования: снизу справа, снизу слева, снизу по центру\n            target-элемента и снизу по центру страницы (позиции расположены в порядке приоритета);\n          </ListItem>\n          <ListItem>\n            При hintPosition='top' хинт рендерится сверху от target-элемента с возможным сдвигом по горизонтальной оси,\n            т.е. происходит выбор из 4 вариантов позиционирования: сверху справа, сверху слева, сверху по центру\n            target-элемента и сверху по центру страницы (позиции расположены в порядке приоритета);\n          </ListItem>\n          <ListItem>\n            При hintPosition='left' хинт рендерится слева от target-элемента с возможным сдвигом по вертикальной оси,\n            т.е. происходит выбор из 3 вариантов позиционирования: слева снизу, слева сверху и слева по центру\n            target-элемента (позиции расположены в порядке приоритета);\n          </ListItem>\n          <ListItem>\n            При hintPosition='right' хинт рендерится справа от target-элемента с возможным сдвигом по вертикальной оси,\n            т.е. происходит выбор из 3 вариантов позиционирования: справа снизу, справа сверху и справа по центру\n            target-элемента (позиции расположены в порядке приоритета).\n          </ListItem>\n        </UnorderedList>\n        <Separator />\n        На экранах мобильных устройств, меньше 640px, компонент адаптируется по ширине к рабочей области устройства, то\n        есть занимает всю ширину экрана и позиционируется только снизу или сверху от target-элемента.\n        <Separator />\n        Ниже приведен пример с использованием параметра hintPosition.\n      </T>\n      <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>\n        <Hint\n          {...props}\n          visible={visible1}\n          onVisibilityChange={handleVisibilityChange1}\n          renderContent={() => text}\n          anchorId=\"right_pos\"\n          hintPosition=\"right\"\n        >\n          <StyledButton dimension=\"s\" aria-label=\"Additional information\" aria-describedby=\"right_pos\">\n            Right\n          </StyledButton>\n        </Hint>\n        <Hint\n          {...props}\n          visible={visible2}\n          onVisibilityChange={handleVisibilityChange2}\n          renderContent={() => text}\n          id=\"top_pos\"\n          hintPosition=\"top\"\n        >\n          <StyledButton dimension=\"s\" aria-label=\"Additional information\" aria-describedby=\"top_pos\">\n            Top\n          </StyledButton>\n        </Hint>\n        <Hint\n          {...props}\n          visible={visible3}\n          onVisibilityChange={handleVisibilityChange3}\n          renderContent={() => text}\n          anchorId=\"bottom_pos\"\n          hintPosition=\"bottom\"\n        >\n          <StyledButton dimension=\"s\" aria-label=\"Additional information\" aria-describedby=\"bottom_pos\">\n            Bottom\n          </StyledButton>\n        </Hint>\n        <Hint\n          {...props}\n          visible={visible4}\n          onVisibilityChange={handleVisibilityChange4}\n          renderContent={() => text}\n          id=\"left-pos\"\n          hintPosition=\"left\"\n        >\n          <StyledButton dimension=\"s\" aria-label=\"Additional information\" aria-describedby=\"left-pos\">\n            Left\n          </StyledButton>\n        </Hint>\n      </div>\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Hint, Button, TextButton, T } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nconst Separator = styled.div<{ height?: number }>`\n  height: ${({ height }) => (height ? height : 20)}px;\n`;\n\nexport const HintTextButtonTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <T font=\"Body/Body 1 Long\" as=\"div\">\n        В качества контента хинта может выступать любой ReactNode, например допускается использование TextButton внутри\n        хинта. В случае если хинт содержит в себе TextButton, триггером его появления должен быть click.\n      </T>\n      <Separator height={24} />\n      <Hint\n        {...props}\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n        visibilityTrigger=\"click\"\n        renderContent={() => (\n          <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n            {text}\n            <Separator height={4} />\n            <TextButton appearance=\"primary\" dimension=\"s\" text=\"Text Button\" />\n          </div>\n        )}\n        anchorId=\"hint_textbutton\"\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint_textbutton\"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Hint, Button } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nexport const HintTargetTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const btnRef = React.useRef<HTMLButtonElement>(null);\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <Button\n        ref={btnRef}\n        dimension=\"xl\"\n        appearance=\"primary\"\n        iconEnd={\n          <Hint\n            {...props}\n            visible={visible}\n            onVisibilityChange={handleVisibilityChange}\n            renderContent={() => text}\n            targetElement={btnRef.current}\n            anchorId=\"hint_target\"\n          >\n            <HelpOutline tabIndex={0} height={24} width={24} aria-label=\"Help Icon\" aria-describedby=\"hint_target\" />\n          </Hint>\n        }\n      >\n        Hover on icon\n      </Button>\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Hint, Button } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider, css } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nconst anchorCss = css`\n  padding: 10px;\n  border: 2px dotted red;\n`;\n\nexport const HintAnchorCssTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <Hint\n        {...props}\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n        renderContent={() => text}\n        anchorId=\"hint_css\"\n        anchorCssMixin={anchorCss}\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint_css\"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Hint, Button, T } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nconst renderHintContent = () => {\n  return (\n    <div>\n      <T font=\"Subtitle/Subtitle 3\" as=\"div\" style={{ marginBottom: '4px' }}>\n        Hint header\n      </T>\n      {text}\n    </div>\n  );\n};\n\nexport const HintWithHeaderTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [visible, setVisible] = React.useState(false);\n  const handleVisibilityChange = (visible: boolean) => setVisible(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '24px' }}>\n        В качества контента хинта может выступать любой ReactNode, можно добавить, например, заголовок.\n      </T>\n      <Hint\n        {...props}\n        renderContent={renderHintContent}\n        anchorId=\"hint_click\"\n        visibilityTrigger=\"click\"\n        visible={visible}\n        onVisibilityChange={handleVisibilityChange}\n      >\n        <Button\n          dimension=\"xl\"\n          appearance=\"primary\"\n          displayAsSquare\n          iconStart={<HelpOutline aria-hidden />}\n          aria-label=\"Additional information\"\n          aria-describedby=\"hint_click\"\n        />\n      </Hint>\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\nimport { Hint, Button, T } from '@admiral-ds/react-ui';\nimport type { HintProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\n\nconst StyledButton = styled(Button)`\n  padding: 4px;\n`;\nconst Separator = styled.div`\n  height: 8px;\n`;\n\nexport const HintDimensionTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: HintProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [visible1, setVisible1] = React.useState(false);\n  const [visible2, setVisible2] = React.useState(false);\n  const [visible3, setVisible3] = React.useState(false);\n  const [visible4, setVisible4] = React.useState(false);\n  const handleVisibilityChange1 = (visible: boolean) => setVisible1(visible);\n  const handleVisibilityChange2 = (visible: boolean) => setVisible2(visible);\n  const handleVisibilityChange3 = (visible: boolean) => setVisible3(visible);\n  const handleVisibilityChange4 = (visible: boolean) => setVisible4(visible);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '24px' }}>\n        Hint имеет три фиксированных по ширине размера: S - 280px, M - 384px и L - 488px (по умолчанию), которые\n        используются в зависимости от предполагаемого объема текста. Пользователь также может задавать кастомную ширину\n        компонента напрямую через параметр style или используя classname.\n        <Separator />\n        На экранах мобильных устройств, меньше 640px, компонент адаптируется по ширине к рабочей области устройства с\n        учетом стандартных отступов по бокам.\n        <Separator />\n        Высота компонента настраивается автоматически при задании контента. Максимальная высота компонента – 320px,\n        после чего у контента появляется вертикальный скролл.\n      </T>\n      <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>\n        <Hint\n          {...props}\n          visible={visible1}\n          onVisibilityChange={handleVisibilityChange1}\n          renderContent={() => text}\n          anchorId=\"dim_l\"\n        >\n          <StyledButton dimension=\"s\" aria-label=\"Additional information\" aria-describedby=\"dim_l\">\n            Open Hint L\n          </StyledButton>\n        </Hint>\n        <Hint\n          {...props}\n          visible={visible2}\n          onVisibilityChange={handleVisibilityChange2}\n          renderContent={() => text}\n          id=\"dim_m\"\n          dimension=\"m\"\n        >\n          <StyledButton dimension=\"s\" aria-label=\"Additional information\" aria-describedby=\"dim_m\">\n            Open Hint M\n          </StyledButton>\n        </Hint>\n        <Hint\n          {...props}\n          visible={visible3}\n          onVisibilityChange={handleVisibilityChange3}\n          renderContent={() => text}\n          anchorId=\"dim_s\"\n          dimension=\"s\"\n        >\n          <StyledButton dimension=\"s\" aria-label=\"Additional information\" aria-describedby=\"dim_s\">\n            Open Hint S\n          </StyledButton>\n        </Hint>\n        <Hint\n          {...props}\n          visible={visible4}\n          onVisibilityChange={handleVisibilityChange4}\n          renderContent={() => text}\n          id=\"width_custom\"\n          style={{ width: '500px' }}\n        >\n          <StyledButton dimension=\"s\" aria-label=\"Additional information\" aria-describedby=\"width_custom-pos\">\n            Open Hint with custom width\n          </StyledButton>\n        </Hint>\n      </div>\n    </ThemeProvider>\n  );\n};\n"],"names":[],"sourceRoot":""}