{"version":3,"file":"2525.2780f771.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://@admiral-ds/react-ui/./src/components/input/InputBox/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { typography } from '#src/components/Typography';\nimport type { ComponentDimension, InputStatus } from '#src/components/input/types';\nimport { iconSizeValue, horizontalPaddingValue } from '../TimePickerIcons';\nimport { skeletonMixin } from '#src/components/input/Container';\nimport { mediumGroupBorderRadius } from '#src/components/themes/borderRadius';\n\nexport type SizeProps = {\n  $dimension?: ComponentDimension;\n};\n\nconst extraPadding = css<{ $iconsAfterCount?: number } & SizeProps>`\n  padding-right: ${(props) =>\n    horizontalPaddingValue(props) + (iconSizeValue(props) + 8) * (props.$iconsAfterCount ?? 0)}px;\n`;\n\nconst disabledColors = css`\n  background-color: var(--admiral-color-Neutral_Neutral10, ${(p) => p.theme.color['Neutral/Neutral 10']});\n  border-color: transparent;\n`;\n\nconst getBorderColor = css<{ $status?: InputStatus }>`\n  ${({ $status, theme }) => {\n    if (!$status) {\n      return `var(--admiral-color-Neutral_Neutral40, ${theme.color['Neutral/Neutral 40']})`;\n    }\n    switch ($status) {\n      case 'error':\n        return `var(--admiral-color-Error_Error60Main, ${theme.color['Error/Error 60 Main']})`;\n      case 'success':\n        return `var(--admiral-color-Success_Success50Main, ${theme.color['Success/Success 50 Main']})`;\n    }\n  }}\n`;\n\nconst getHoverBorderColor = css<{ $status?: InputStatus }>`\n  ${({ $status, theme }) => {\n    if (!$status) {\n      return `var(--admiral-color-Neutral_Neutral60, ${theme.color['Neutral/Neutral 60']})`;\n    }\n    switch ($status) {\n      case 'error':\n        return `var(--admiral-color-Error_Error70, ${theme.color['Error/Error 70']})`;\n      case 'success':\n        return `var(--admiral-color-Success_Success50Main, ${theme.color['Success/Success 50 Main']})`;\n    }\n  }}\n`;\n\nconst getFocusBorderColor = css<{ $status?: InputStatus }>`\n  ${({ $status, theme }) => {\n    if (!$status) {\n      return `var(--admiral-color-Primary_Primary60Main, ${theme.color['Primary/Primary 60 Main']})`;\n    }\n    switch ($status) {\n      case 'error':\n        return `var(--admiral-color-Error_Error60Main, ${theme.color['Error/Error 60 Main']})`;\n      case 'success':\n        return `var(--admiral-color-Success_Success50Main, ${theme.color['Success/Success 50 Main']})`;\n    }\n  }}\n`;\n\nconst dimensionFocusBoxStyles = {\n  xl: `\n    height: 56px;\n    & * {\n      line-height: 56px;\n    }\n  `,\n  s: `\n    height: 32px;\n    padding-inline-start: 12px;\n    padding-inline-end: 12px;\n    & * {\n      ${typography['Body/Body 2 Long']}\n      line-height: 32px;\n    }\n  `,\n  m: ``,\n};\n\nexport const InputBox = styled.div<\n  SizeProps & {\n    disabled?: boolean;\n    readOnly?: boolean;\n    $status?: InputStatus;\n    $iconsAfterCount?: number;\n    $isLoading?: boolean;\n    $skeleton?: boolean;\n  }\n>`\n  cursor: text;\n  display: inline-flex;\n  overflow: hidden;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  align-items: stretch;\n  width: 280px;\n  position: relative;\n\n  height: 40px;\n  padding: 0;\n  padding-inline-start: 16px;\n  padding-inline-end: 16px;\n\n  & * {\n    ${typography['Body/Body 1 Long']}\n    line-height: 40px;\n  }\n  &[data-size='xl'] {\n    height: 56px;\n    & * {\n      line-height: 56px;\n    }\n  }\n  &[data-size='s'] {\n    height: 32px;\n    padding-inline-start: 12px;\n    padding-inline-end: 12px;\n    & * {\n      ${typography['Body/Body 2 Long']}\n      line-height: 32px;\n    }\n  }\n\n  box-sizing: border-box;\n  border-radius: var(--admiral-border-radius-Medium, ${(p) => mediumGroupBorderRadius(p.theme.shape)});\n\n  background: transparent;\n  /* https://stackoverflow.com/questions/69658462/inset-box-shadow-visual-artifacts-in-google-chrome */\n  transform: translate3d(0, 0, 0);\n  box-shadow: 0px 0px 0px 1px ${getBorderColor} inset;\n\n  &:hover:not(:focus-within):not([data-disabled]):not([data-read-only]):not([data-skeleton]) {\n    box-shadow: 0px 0px 0px 1px ${getHoverBorderColor} inset;\n  }\n  &:focus-within:not([data-disabled]):not([data-read-only]):not([data-skeleton]) {\n    box-shadow: 0px 0px 0px 2px ${getFocusBorderColor} inset;\n  }\n\n  transition: box-shadow 0.3s ease-in-out;\n\n  ${(p) => (p.disabled || p.readOnly) && disabledColors}\n  ${(p) => (p.disabled ? 'cursor: not-allowed;' : p.$isLoading ? 'cursor: default;' : '')}\n\n  &[data-disabled],\n  &[data-read-only] {\n    ${disabledColors}\n  }\n\n  &[data-disabled] {\n    cursor: not-allowed;\n  }\n\n  &[data-loading] {\n    cursor: default;\n  }\n\n  [data-loading] &&&,\n  &&&:disabled {\n    cursor: not-allowed;\n    pointer-events: none;\n  }\n\n  &[data-disable-copying] input {\n    user-select: none;\n    &::selection {\n      background-color: transparent;\n    }\n  }\n\n  ${(p) => p.$skeleton && skeletonMixin}\n  ${(p) => p.$skeleton && 'border-radius: 0; box-shadow: none;'}\n  \n  &[data-skeleton] {\n    ${skeletonMixin}\n    border-radius: 0;\n    box-shadow: none;\n    cursor: default;\n  }\n\n  ${({ $dimension }) => $dimension && dimensionFocusBoxStyles[$dimension]}\n  ${extraPadding}\n`;\n"],"names":[],"sourceRoot":""}