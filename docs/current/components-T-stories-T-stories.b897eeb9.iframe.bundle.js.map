{"version":3,"file":"components-T-stories-T-stories.b897eeb9.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3IA;AAAA;AAAA;AAAA;AA6FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://@admiral-ds/react-ui/./src/components/T/stories/TFontsDemo.template.tsx","webpack://@admiral-ds/react-ui/"],"sourcesContent":["import { forwardRef } from 'react';\nimport styled, { useTheme } from 'styled-components';\n\nimport { DefaultFontColorName, LIGHT_THEME, T, TooltipHoc, typography } from '@admiral-ds/react-ui';\nimport { ReactComponent as CopyOutline } from '@admiral-ds/icons/build/documents/CopyOutline.svg';\n\nimport { FONTS, NEW_FONTS } from '#src/components/T/stories/storyDescriptions';\n\nconst Separator = styled.div<{ $height?: number }>`\n  height: ${(p) => p.$height || 20}px;\n`;\n\nconst Wrapper = styled.div`\n  overflow: scroll;\n`;\n\nconst Table = styled.table`\n  ${typography['Body/Body 2 Long']}\n  border-collapse: collapse;\n  border-spacing: 0;\n  width: 100%;\n  color: var(--admiral-color-Neutral_Neutral90, ${(p) => p.theme.color[DefaultFontColorName]});\n\n  th,\n  td[data-label] {\n    text-align: left;\n    padding: 8px 60px 8px 8px;\n    border-bottom: 1px solid var(--admiral-color-Neutral_Neutral70, ${(p) => p.theme.color['Neutral/Neutral 70']});\n  }\n  th {\n    ${typography['Header/H3']}\n    color: var(--admiral-color-Neutral_Neutral50, ${(p) => p.theme.color['Neutral/Neutral 50']});\n  }\n  td[data-label]:last-child {\n    padding: 8px;\n  }\n\n  td[data-label='Manual'] {\n    min-width: 300px;\n    width: 300px;\n  }\n`;\n\nconst FontDesc = styled.table`\n  td {\n    padding: 0;\n    border-top: none;\n    white-space: nowrap;\n  }\n  td:first-child {\n    color: var(--admiral-color-Neutral_Neutral50, ${(p) => p.theme.color['Neutral/Neutral 50']});\n    padding-right: 16px;\n  }\n`;\n\nconst CopyOutlineWrapper = styled.div`\n  display: inline-flex;\n  cursor: pointer;\n`;\n\nconst CopyIcon = forwardRef<HTMLDivElement, { text: string }>(({ text }, ref) => {\n  const theme = useTheme() || LIGHT_THEME;\n  const copyToClipboard = () => {\n    const el = document.createElement('textarea');\n    el.value = text;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  };\n  return (\n    <CopyOutlineWrapper ref={ref}>\n      <CopyOutline\n        width={16}\n        height={16}\n        onClick={copyToClipboard}\n        fill={`var(--admiral-color-Neutral_Neutral90, ${theme.color['Neutral/Neutral 90']})`}\n      />\n    </CopyOutlineWrapper>\n  );\n});\n\nconst CopyButton = TooltipHoc(CopyIcon);\n\nexport const TFontsDemoTemplate = () => {\n  const theme = useTheme() || LIGHT_THEME;\n  return (\n    <>\n      <T font=\"Body/Body 1 Long\" as=\"div\">\n        Ниже представлены таблицы стилей типографики, старая и обновленная версия, на которую постепенно будет\n        произведен перевод библиотеки. Каждый из этих стилей можно передавать в компонент T в виде параметра font и в\n        качестве результата получать StyledComponent с необходимыми стилями.\n        <Separator $height={8} />\n        Также возможен случай, когда пользователю нужен css миксин (ThemedCssFunction) с определенными стилями\n        типографики для последующего использования этого миксина в своих styled-компонентах. В таком случае можно\n        воспользоваться объектом typography, экспортируемым из нашей библиотеки. Ключами этого объекта служат названия\n        стилей типографики, а значениями css миксины.\n        <Separator $height={8} />\n        Рядом с названием стиля типографики находится иконка копирования, по нажатию на которую можно будет скопировать\n        пример кода для каждого стиля в отдельности.\n      </T>\n      <Separator $height={24} />\n      <Wrapper>\n        <Table>\n          <thead>\n            <tr>\n              <th data-label=\"Style\">Стиль</th>\n              <th data-label=\"Props\">Характеристики</th>\n              <th data-label=\"Manual\">Применение</th>\n            </tr>\n          </thead>\n          <tbody>\n            {NEW_FONTS.map((item, index: number) => {\n              const text = `\n            import { T, typography } from '@admiral-ds/react-ui';\n            import styled from 'styled-components';\n\n            const Paragraph = styled.p\\`\n              \\${typography['${item.name}']}\n              color: #2B313B;\n            \\`\n\n            const Example = () => {\n              return(\n                <>\n                  <T font='${item.name}'>Использование StyledComponent</T>\n                  <Paragraph>Использование ThemedCssFunction</Paragraph>\n                </>\n              );\n             }\n            `;\n              return (\n                <tr key={index}>\n                  <td data-label=\"Style\">\n                    <T font={item.name} as=\"div\">\n                      {item.name}\n                    </T>\n                    <CopyButton text={text} renderContent={() => 'Копировать пример использования'} />\n                  </td>\n                  <td data-label=\"Props\">\n                    <FontDesc>\n                      <tbody>\n                        <tr>\n                          <td>Шрифт:</td>\n                          <td>{theme.fontFamily}</td>\n                        </tr>\n                        {item.style.map((st, index: number) => (\n                          <tr key={index}>\n                            <td>{st.name}</td>\n                            <td>{st.value}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </FontDesc>\n                  </td>\n                  <td data-label=\"Manual\">{item.description}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n        <Separator />\n        <T font=\"Header/H1\" as=\"p\">\n          Old version\n        </T>\n        <Table>\n          <thead>\n            <tr>\n              <th data-label=\"Style\">Стиль</th>\n              <th data-label=\"Props\">Характеристики</th>\n              <th data-label=\"Manual\">Применение</th>\n            </tr>\n          </thead>\n          <tbody>\n            {FONTS.map((item, index: number) => {\n              const text = `\n            import { T, typography } from '@admiral-ds/react-ui';\n            import styled from 'styled-components';\n\n            const Paragraph = styled.p\\`\n              \\${typography['${item.name}']}\n              color: #2B313B;\n            \\`\n\n            const Example = () => {\n              return(\n                <>\n                  <T font='${item.name}'>Использование StyledComponent</T>\n                  <Paragraph>Использование ThemedCssFunction</Paragraph>\n                </>\n              );\n             }\n            `;\n              return (\n                <tr key={index}>\n                  <td data-label=\"Style\">\n                    <T font={item.name} as=\"div\">\n                      {item.name}\n                    </T>\n                    <CopyButton text={text} renderContent={() => 'Копировать пример использования'} />\n                  </td>\n                  <td data-label=\"Props\">\n                    <FontDesc>\n                      <tbody>\n                        <tr>\n                          <td>Шрифт:</td>\n                          <td>{theme.fontFamily}</td>\n                        </tr>\n                        {item.style.map((st, index: number) => (\n                          <tr key={index}>\n                            <td>{st.name}</td>\n                            <td>{st.value}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </FontDesc>\n                  </td>\n                  <td data-label=\"Manual\">{item.description}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Wrapper>\n    </>\n  );\n};\n"],"names":[],"sourceRoot":""}