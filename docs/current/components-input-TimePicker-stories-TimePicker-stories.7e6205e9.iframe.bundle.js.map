{"version":3,"file":"components-input-TimePicker-stories-TimePicker-stories.7e6205e9.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyCA;AAAA;AAAA;AAAA;AAOA;AAAA;AA0PA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://@admiral-ds/react-ui/./src/components/input/TimePicker/index.tsx","webpack://@admiral-ds/react-ui/"],"sourcesContent":["import * as React from 'react';\nimport type { HTMLAttributes, ComponentProps } from 'react';\nimport { useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { ReactComponent as TimeSVG } from '@admiral-ds/icons/build/system/TimeOutline.svg';\nimport { ReactComponent as CloseOutlineSvg } from '@admiral-ds/icons/build/service/CloseOutline.svg';\nimport type { TextInputProps } from '../TextInput';\nimport { InputLine } from '../InputLine';\nimport { refSetter } from '#src/components/common/utils/refSetter';\nimport { defaultTimePickerHandle } from '#src/components/input/TimePicker/defaultTimePickerHandle';\nimport { changeInputData, isInputDataDifferent } from '#src/components/common/dom/changeInputData';\nimport { getTimeInMinutes, parseStringToTime, generateTimeArray } from './utils';\nimport { typography } from '#src/components/Typography';\nimport { InputIconButton } from '#src/components/InputIconButton';\nimport type { DropContainerStyles } from '#src/components/DropdownContainer';\nimport { StyledDropdownContainer } from '#src/components/DropdownContainer';\nimport type { RenderOptionProps } from '#src/components/Menu/MenuItem';\nimport { MenuItem } from '#src/components/Menu/MenuItem';\nimport { Menu } from '#src/components/Menu';\nimport { mediumGroupBorderRadius } from '#src/components/themes/borderRadius';\nimport type { ComponentDimension, ExtraProps, InputStatus } from '#src/components/input/types';\n\ninterface SlotProps extends HTMLAttributes<HTMLElement>, RenderOptionProps {\n  value: string;\n}\n\ntype SizeProps = {\n  $dimension?: ComponentDimension;\n};\n\nexport type InputBoxProps = ComponentProps<'div'> & SizeProps;\n\nconst defaultSlots: SlotProps[] = generateTimeArray();\n\nconst iconSizeValue = (props: SizeProps) => {\n  switch (props.$dimension) {\n    case 'xl':\n      return 24;\n    case 's':\n      return 20;\n    default:\n      return 24;\n  }\n};\nconst horizontalPaddingValue = (props: SizeProps) => {\n  switch (props.$dimension) {\n    case 'xl':\n      return 16;\n    case 's':\n      return 12;\n    default:\n      return 16;\n  }\n};\n\nconst extraPadding = css<Omit<ExtraProps, '$iconsBeforeCount'>>`\n  padding-right: ${(props) =>\n    horizontalPaddingValue(props) + (iconSizeValue(props) + 8) * (props.$iconsAfterCount ?? 0)}px;\n`;\n\nconst dimensionFocusBoxStyles = {\n  xl: `\n    height: 56px;\n    & * {\n      line-height: 56px;\n    }\n  `,\n  s: `\n    height: 32px;\n    padding-inline-start: 12px;\n    padding-inline-end: 12px;\n    & * {\n      ${typography['Body/Body 2 Long']}\n      line-height: 32px;\n    }\n  `,\n  m: ``,\n};\n\nexport const FocusBox = styled.div<\n  Omit<ExtraProps, '$iconsBeforeCount'> &\n    SizeProps & { disabled?: boolean; $status?: InputStatus; readOnly?: boolean; $isLoading?: boolean }\n>`\n  cursor: text;\n  display: inline-flex;\n  overflow: hidden;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  align-items: stretch;\n  width: 280px;\n  min-width: 136px;\n  height: 40px;\n  padding: 0;\n  padding-inline-start: 16px;\n  padding-inline-end: 16px;\n  transition: box-shadow 0.3s ease-in-out;\n  box-sizing: border-box;\n  border-radius: 4px;\n  background: transparent;\n  /* https://stackoverflow.com/questions/69658462/inset-box-shadow-visual-artifacts-in-google-chrome */\n  transform: translate3d(0, 0, 0);\n  box-shadow: 0px 0px 0px 1px var(--admiral-color-Neutral_Neutral40, ${(p) => p.theme.color['Neutral/Neutral 40']})\n    inset;\n\n  &:hover:not(:focus-within) {\n    box-shadow: 0px 0px 0px 1px var(--admiral-color-Neutral_Neutral60, ${(p) => p.theme.color['Neutral/Neutral 60']})\n      inset;\n  }\n  &:focus-within {\n    box-shadow: 0px 0px 0px 2px\n      var(--admiral-color-Primary_Primary60Main, ${(p) => p.theme.color['Primary/Primary 60 Main']}) inset;\n  }\n  ${(p) => p.disabled && 'border-color: transparent;'};\n\n  & * {\n    ${typography['Body/Body 1 Long']}\n    line-height: 40px;\n  }\n\n  ${({ $dimension }) => $dimension && dimensionFocusBoxStyles[$dimension]}\n  ${extraPadding}\n`;\n\nconst StyledMenu = styled(Menu)`\n  &[data-dimension='xl'] {\n    ${typography['Body/Body 1 Long']};\n    height: 288px;\n  }\n  &[data-dimension='m'] {\n    ${typography['Body/Body 1 Long']};\n    height: 240px;\n  }\n  &[data-dimension='s'] {\n    ${typography['Body/Body 2 Long']};\n    height: 192px;\n  }\n`;\n\nconst StyledMenuItem = styled(MenuItem)`\n  justify-content: center;\n`;\n\nconst IconPanel = styled.div<{ disabled?: boolean; $dimension?: ComponentDimension }>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n\n  display: flex;\n  align-items: center;\n\n  & svg {\n    border-radius: var(--admiral-border-radius-Medium, ${(p) => mediumGroupBorderRadius(p.theme.shape)});\n    display: block;\n    width: ${iconSizeValue}px;\n\n    &:focus {\n      outline: none;\n    }\n\n    &:focus-visible {\n      outline-offset: 2px;\n      outline: var(--admiral-color-Primary_Primary60Main, ${(p) => p.theme.color['Primary/Primary 60 Main']}) solid 2px;\n    }\n  }\n`;\nconst IconPanelAfter = styled(IconPanel)`\n  right: 0;\n  padding-right: ${horizontalPaddingValue}px;\n  gap: 8px;\n`;\n\nexport interface TimePickerProps\n  extends Omit<\n      TextInputProps,\n      | 'value'\n      | 'iconsBefore'\n      | 'icons'\n      | 'containerPropsConfig'\n      | 'clearInputIconButtonPropsConfig'\n      | 'visiblePasswordInputIconButtonPropsConfig'\n    >,\n    DropContainerStyles {\n  /** Выбранное значение времени */\n  value?: string;\n  /** Начало временного диапазона */\n  startTime?: string;\n  /** Конец временного диапазона */\n  endTime?: string;\n  /** Задизейбленный инпут */\n  disabled?: boolean;\n  /** Возможные значения временного диапозона */\n  slots?: SlotProps[];\n  /** Задизейбленное значение временного диапозона */\n  disabledSlots?: string[];\n  /** Альтернативная иконка компонента */\n  icon?: React.FunctionComponent<React.SVGProps<SVGSVGElement>>;\n  /** Отображать иконку очистки поля */\n  displayClearIcon?: boolean;\n  /** Статус поля */\n  status?: InputStatus;\n  /** Отображать статус загрузки данных */\n  isLoading?: boolean;\n  /** Позволяет обрабатывать введенные значения */\n  parser?: (time?: string) => string;\n  /** Позволяет выравнивать позицию дропдаун контейнера относительно селекта */\n  alignSelf?: 'auto' | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';\n}\n\nexport const TimePicker = React.forwardRef<HTMLInputElement, TimePickerProps>(\n  (\n    {\n      startTime,\n      endTime,\n      dimension = 'm',\n      disabled = false,\n      slots = defaultSlots,\n      disabledSlots = [],\n      parser = parseStringToTime,\n      icon = TimeSVG,\n      iconsAfter,\n      displayClearIcon,\n      isLoading,\n      status,\n      alignSelf = 'flex-end',\n      skeleton = false,\n      dropContainerCssMixin,\n      dropContainerClassName,\n      dropContainerStyle,\n      ...props\n    },\n    ref,\n  ) => {\n    const handleInput = props.handleInput || defaultTimePickerHandle;\n    const [timeValue, setTimeValue] = useState<string>('');\n    const [activeOption, setActiveOption] = React.useState<string | undefined>('');\n    const inputContainerRef = useRef<HTMLDivElement>(null);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [isOpened, setIsOpened] = useState<boolean>(false);\n\n    const menuDimension = dimension === 'xl' ? 'l' : dimension;\n\n    useLayoutEffect(() => {\n      const nullHandledValue = handleInput(null);\n\n      function oninput(this: HTMLInputElement, e: Event) {\n        const { value, selectionStart, selectionEnd } = this;\n        const currentInputData = { value, selectionStart, selectionEnd };\n\n        const inputData = handleInput(currentInputData, e as InputEvent);\n\n        if (!isInputDataDifferent(nullHandledValue, inputData)) {\n          changeInputData(this, { ...inputData, value: '' });\n        } else {\n          changeInputData(this, inputData);\n        }\n      }\n\n      // Чтение selectionStart в Safari при type='date' вызывает ошибку\n      if (inputRef.current) {\n        const node = inputRef.current;\n        node.addEventListener('input', oninput);\n\n        const { value, selectionStart, selectionEnd } = node;\n        const currentInputData = { value, selectionStart, selectionEnd };\n        const inputData = handleInput(currentInputData);\n\n        if (!isInputDataDifferent(nullHandledValue, inputData)) {\n          changeInputData(node, { ...inputData, value: '' });\n        } else {\n          changeInputData(node, inputData);\n        }\n\n        return () => {\n          node.removeEventListener('input', oninput);\n        };\n      }\n    }, [handleInput]);\n\n    const handleButtonClick = (e: React.MouseEvent) => {\n      e.preventDefault();\n      if (inputRef.current !== document.activeElement) {\n        inputRef.current?.focus();\n      }\n      if (!isOpened) {\n        const inputTimeValue = parser(inputRef.current?.value);\n        setTimeValue(inputTimeValue);\n        if (availableSlots) {\n          if (availableSlots.find((slot) => slot.value === inputTimeValue)) {\n            setActiveOption(inputTimeValue);\n          } else {\n            setActiveOption(availableSlots[0].value);\n          }\n        } else {\n          setActiveOption('');\n        }\n      }\n      setIsOpened(!isOpened);\n    };\n\n    const iconArray = React.Children.toArray(iconsAfter);\n\n    if (!props.readOnly && displayClearIcon && !!timeValue) {\n      iconArray.unshift(\n        <InputIconButton\n          icon={CloseOutlineSvg}\n          key=\"clear-icon\"\n          onMouseDown={(e) => {\n            // запрет на перемещение фокуса при клике по иконке\n            e.preventDefault();\n          }}\n          onClick={() => {\n            if (inputRef.current) {\n              changeInputData(inputRef.current, { value: '' });\n            }\n          }}\n          aria-hidden\n        />,\n      );\n    }\n\n    if (!props.readOnly) {\n      iconArray.push(<InputIconButton icon={icon} onMouseDown={handleButtonClick} tabIndex={0} />);\n    }\n\n    const disableSlots = (defaultArray: SlotProps[], disabledArr: string[]) => {\n      if (disabledArr.length === 1) {\n        const disabledTime = defaultArray.find((slot) => slot.value === disabledArr[0]);\n        if (disabledTime) {\n          disabledTime.disabled = true;\n          return [...defaultArray, disabledTime];\n        }\n      } else {\n        return defaultArray.map((slot) => ({ ...slot, disabled: disabledArr.includes(slot.value) }));\n      }\n    };\n\n    const filterTime = (t: string, start?: string | null, end?: string | null) => {\n      if (start && !end) {\n        if (getTimeInMinutes(start) <= getTimeInMinutes(t)) {\n          return t;\n        }\n      } else if (!start && end) {\n        if (getTimeInMinutes(t) <= getTimeInMinutes(end)) {\n          return t;\n        }\n      } else if (start && end) {\n        if (getTimeInMinutes(start) <= getTimeInMinutes(t) && getTimeInMinutes(t) <= getTimeInMinutes(end)) {\n          return t;\n        }\n      }\n    };\n\n    const availableSlots =\n      !disabledSlots?.length && (startTime || endTime || (startTime && endTime))\n        ? slots.filter((slot) => filterTime(slot.value, startTime, endTime))\n        : disabledSlots?.length > 0 && !(startTime || endTime || (startTime && endTime))\n          ? disableSlots(slots, disabledSlots)\n          : disabledSlots?.length > 0 && (startTime || endTime || (startTime && endTime))\n            ? disableSlots(slots, disabledSlots)?.filter((slot) => filterTime(slot.value, startTime, endTime))\n            : slots;\n\n    const handleSelectOption = (option: string) => {\n      if (inputRef.current) {\n        setTimeValue(option);\n        changeInputData(inputRef.current, { value: option });\n        setIsOpened(false);\n      }\n    };\n\n    const clickOutside = (e: Event) => {\n      if (e.target && inputContainerRef.current?.contains(e.target as Node)) {\n        return;\n      }\n      setIsOpened(false);\n    };\n\n    const model = React.useMemo(() => {\n      if (availableSlots) {\n        return availableSlots.map((slot, index) => ({\n          id: slot.value,\n          render: (options: RenderOptionProps) => (\n            <StyledMenuItem\n              key={index}\n              dimension={menuDimension}\n              data-dimension={dimension}\n              disabled={slot.disabled}\n              {...options}\n            >\n              {slot.value}\n            </StyledMenuItem>\n          ),\n          disabled: slot.disabled,\n        }));\n      } else {\n        return [];\n      }\n    }, [availableSlots, dimension]);\n\n    const selectedPos = React.useRef<number | undefined>();\n\n    useEffect(() => {\n      let focused = false;\n\n      function handleClick() {\n        if (focused) return;\n\n        const input = inputRef.current;\n\n        focused = true;\n\n        if (input && input.selectionStart !== null && input.selectionStart === input.selectionEnd) {\n          const result = /[^:|\\d]/gm.exec(input.value);\n          if (result) {\n            const notDigitalPos = result.index;\n            const position = notDigitalPos < input.selectionStart ? notDigitalPos : input.selectionStart;\n            selectedPos.current = undefined;\n            if (position >= 0) {\n              input.selectionStart = position;\n              input.selectionEnd = position;\n            }\n          }\n        }\n      }\n\n      function handleBlur() {\n        focused = false;\n      }\n\n      inputRef.current?.parentNode?.addEventListener('click', handleClick);\n      inputRef.current?.addEventListener('blur', handleBlur);\n\n      return () => {\n        inputRef.current?.parentNode?.removeEventListener('click', handleClick);\n        inputRef.current?.removeEventListener('blur', handleBlur);\n      };\n    }, []);\n\n    return (\n      <>\n        <FocusBox\n          $dimension={dimension}\n          $iconsAfterCount={iconArray.length}\n          $status={status}\n          disabled={disabled}\n          readOnly={props.readOnly}\n          $isLoading={isLoading}\n        >\n          <InputLine\n            {...props}\n            ref={refSetter(ref, inputRef)}\n            placeholder=\"чч:мм\"\n            dataPlaceholder=\"чч:мм\"\n            onInput={(e) => setTimeValue(e.currentTarget.value)}\n            value={timeValue}\n            disabled={disabled}\n            readOnly={props.readOnly}\n          />\n          {iconArray.length > 0 && (\n            <IconPanelAfter disabled={disabled} $dimension={dimension}>\n              {iconArray}\n            </IconPanelAfter>\n          )}\n        </FocusBox>\n        {availableSlots && isOpened && !disabled && !skeleton && (\n          <StyledDropdownContainer\n            targetElement={inputRef.current}\n            alignSelf={alignSelf}\n            onClickOutside={clickOutside}\n            dropContainerCssMixin={dropContainerCssMixin}\n            className={dropContainerClassName}\n            style={dropContainerStyle}\n          >\n            <StyledMenu\n              selected={timeValue}\n              active={activeOption}\n              model={model}\n              dimension={menuDimension}\n              data-dimension={dimension}\n              onSelectItem={handleSelectOption}\n              onActivateItem={setActiveOption}\n              preventFocusSteal\n            />\n          </StyledDropdownContainer>\n        )}\n      </>\n    );\n  },\n);\n\nTimePicker.displayName = 'TimePicker';\n"],"names":[],"sourceRoot":""}