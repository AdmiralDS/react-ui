{"version":3,"file":"components-form-InputField-stories-InputField-stories.4e09692c.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://@admiral-ds/react-ui/./src/components/form/InputField/stories/InputFieldInput.template.tsx","webpack://@admiral-ds/react-ui/"],"sourcesContent":["import type { MouseEvent, ChangeEvent } from 'react';\nimport { useState, useRef } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\n\nimport { Hint, InputField, InputIconButton } from '@admiral-ds/react-ui';\nimport type { InputFieldProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { ReactComponent as HelpOutline } from '@admiral-ds/icons/build/service/HelpOutline.svg';\nimport { createBorderRadiusSwapper } from '../../../../../.storybook/createBorderRadiusSwapper';\n\nconst DisplayContainer = styled.div`\n  > * {\n    margin-bottom: 24px;\n  }\n`;\n\nconst text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples\nof mini units map to fluid grid column widths and row heights.`;\ninterface IconWithHintProps {\n  targetElement?: Element | null;\n}\nconst IconWithHint = ({ targetElement }: IconWithHintProps) => {\n  const [visible, setVisible] = useState(false);\n  const handleVisibilityChange = (isVisible: boolean) => {\n    if (!isVisible) {\n      setVisible(isVisible);\n    }\n  };\n  const handleIconMouseDown = (e: MouseEvent<SVGSVGElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setVisible((prevState) => !prevState);\n  };\n\n  return (\n    <Hint\n      dimension=\"s\"\n      visible={visible}\n      onVisibilityChange={handleVisibilityChange}\n      visibilityTrigger=\"click\"\n      preventFocusSteal\n      renderContent={() => text}\n      targetElement={targetElement}\n      anchorId=\"hint_target\"\n    >\n      <InputIconButton icon={HelpOutline} onMouseDown={handleIconMouseDown} />\n    </Hint>\n  );\n};\n\nexport const InputFieldInputTemplate = ({\n  value = 'Привет',\n  label = 'Label',\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: InputFieldProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [localValue, setValue] = useState<string>(String(value) ?? '');\n  const [invalidInputValue, setInvalidInputValue] = useState<string>('Hello');\n\n  const informerInputRef1 = useRef<HTMLDivElement>(null);\n  const informerInputRef2 = useRef<HTMLDivElement>(null);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    setValue(inputValue);\n    props.onChange?.(e);\n  };\n\n  const handleInvalidInputValueChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const invalidInputValue = e.target.value;\n    setInvalidInputValue(invalidInputValue);\n    props.onChange?.(e);\n  };\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <DisplayContainer>\n        <InputField\n          data-container-id=\"inputFieldIdOne\"\n          {...props}\n          value={localValue}\n          onChange={handleChange}\n          label={label}\n        />\n        <InputField data-container-id=\"inputFieldIdTwo\" required label=\"Поле необходимо заполнить\" />\n        <InputField\n          data-container-id=\"inputFieldIdThree\"\n          readOnly\n          aria-readonly\n          label=\"Поле с атрибутом readOnly\"\n          defaultValue=\"Этот текст не редактируемый\"\n        />\n        <InputField\n          data-container-id=\"inputFieldIdFour\"\n          disabled\n          aria-disabled\n          label=\"Поле с атрибутом disabled\"\n          placeholder=\"Placeholder\"\n        />\n        <InputField\n          data-container-id=\"inputFieldIdFiveInvalid\"\n          label=\"Поле с ошибкой (invalid)\"\n          pattern=\"[a-z]+\"\n          value={invalidInputValue}\n          onChange={handleInvalidInputValueChange}\n        />\n        <InputField\n          data-container-id=\"inputFieldIdFive\"\n          status=\"error\"\n          label=\"Поле с ошибкой (status = error)\"\n          extraText=\"Поле не прошло валидацию, необходимо ввести корректное значение\"\n        />\n        <InputField\n          data-container-id=\"inputFieldIdSix\"\n          status=\"success\"\n          label=\"Поле с индикацией успеха (status = success)\"\n          extraText=\"Поле успешно прошло валидацию\"\n        />\n        <InputField\n          data-container-id=\"inputFieldIdSeven\"\n          displayClearIcon\n          placeholder=\"идет поиск ...\"\n          label=\"Поле с иконкой загрузки\"\n          isLoading\n        />\n        <InputField\n          data-container-id=\"inputFieldIdEight\"\n          label=\"Поле для ввода пароля (type='password')\"\n          type=\"password\"\n        />\n        <InputField\n          containerRef={informerInputRef1}\n          data-container-id=\"inputFieldIdNine\"\n          label=\"Поле с информером\"\n          iconsAfter={<IconWithHint targetElement={informerInputRef1.current} />}\n        />\n        <InputField\n          containerRef={informerInputRef2}\n          data-container-id=\"inputFieldIdNine\"\n          label=\"Поле с иконкой в начале\"\n          iconsBefore={<IconWithHint targetElement={informerInputRef2.current} />}\n        />\n      </DisplayContainer>\n    </ThemeProvider>\n  );\n};\n"],"names":[],"sourceRoot":""}