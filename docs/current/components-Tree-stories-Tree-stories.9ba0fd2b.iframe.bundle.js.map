{"version":3,"file":"components-Tree-stories-Tree-stories.9ba0fd2b.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AAAA;;;ACryJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://@admiral-ds/react-ui/./src/components/Tree/stories/TreeWithCheckboxes.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Tree/stories/TreeWithControlCheckCount.template.tsx","webpack://@admiral-ds/react-ui/./src/components/Tree/stories/TreeWithOnChangeHandler.template.tsx","webpack://@admiral-ds/react-ui/"],"sourcesContent":["import { useState } from 'react';\nimport { Tree, TreeNode, T } from '@admiral-ds/react-ui';\nimport type { TreeItemProps, TreeNodeRenderOptionProps, TreeProps } from '@admiral-ds/react-ui';\nimport { ReactComponent as FolderSolid } from '@admiral-ds/icons/build/documents/FolderSolid.svg';\n\nconst demo1_TreeModel: Array<TreeItemProps> = [\n  {\n    render: (options: TreeNodeRenderOptionProps) => (\n      <TreeNode\n        key={'1'}\n        icon={FolderSolid}\n        label={'Текст заголовка, первый уровень компонента, размер M 40 1'}\n        {...options}\n      />\n    ),\n    id: '1',\n    checked: false,\n    children: [\n      {\n        render: (options: TreeNodeRenderOptionProps) => (\n          <TreeNode\n            key={'1-3'}\n            icon={FolderSolid}\n            label={'Текст раскрывающейся строки, второй уровень компонента 3'}\n            {...options}\n          />\n        ),\n        id: '1-3',\n        checked: false,\n        children: [\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode\n                key={'2-2'}\n                icon={FolderSolid}\n                label={'Текст  строки, третий уровень компонента 2'}\n                {...options}\n              />\n            ),\n            id: '2-2',\n            disabled: true,\n            checked: true,\n          },\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode\n                key={'2-3'}\n                icon={FolderSolid}\n                label={'Текст  строки, третий уровень компонента 3'}\n                {...options}\n              />\n            ),\n            id: '2-3',\n            disabled: true,\n            checked: false,\n          },\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode\n                key={'2-4'}\n                icon={FolderSolid}\n                label={'Текст  строки, третий уровень компонента 4'}\n                {...options}\n              />\n            ),\n            id: '2-4',\n          },\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode\n                key={'2-5'}\n                icon={FolderSolid}\n                label={'Текст  строки с чекбоксом, третий уровень компонента 5'}\n                {...options}\n              />\n            ),\n            id: '2-5',\n            checked: false,\n            children: [\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    key={'3-1'}\n                    label={'Текст  строки с чекбоксом, четвертый уровень компонента 1'}\n                    {...options}\n                  />\n                ),\n                id: '3-1',\n                checked: false,\n              },\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    {...options}\n                    label={'Текст  строки с чекбоксом, четвертый уровень компонента 2'}\n                    key={'3-2'}\n                  />\n                ),\n                id: '3-2',\n                checked: false,\n              },\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    {...options}\n                    label={\n                      'Текст  строки с чекбоксом, четвертый уровень компонента. Компонент используется для отображения дерева вложенных списков с возможностью выбора отдельных пунктов по логике\\n' +\n                      '    чекбоксов. Ширина строки настравивается вручную, по умолчанию это 768px. В настройках присутствует до 6ти уровней\\n' +\n                      '    вложенности.'\n                    }\n                    key={'3-3'}\n                  />\n                ),\n                id: '3-3',\n                checked: false,\n              },\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    {...options}\n                    label={'Текст  строки с чекбоксом, четвертый уровень компонента 4'}\n                    key={'3-4'}\n                  />\n                ),\n                id: '3-4',\n                checked: false,\n                children: [\n                  {\n                    render: (options: TreeNodeRenderOptionProps) => (\n                      <TreeNode\n                        {...options}\n                        label={'Текст  строки с чекбоксом, пятый уровень компонента 1'}\n                        key={'4-1'}\n                      />\n                    ),\n                    id: '4-1',\n                    checked: false,\n                  },\n                  {\n                    render: (options: TreeNodeRenderOptionProps) => (\n                      <TreeNode\n                        {...options}\n                        label={'Текст  строки с чекбоксом, пятый уровень компонента 2'}\n                        key={'4-2'}\n                      />\n                    ),\n                    id: '4-2',\n                    checked: false,\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: '1-1',\n        checked: false,\n        render: (options: TreeNodeRenderOptionProps) => (\n          <TreeNode\n            {...options}\n            icon={FolderSolid}\n            label={'Текст раскрывающейся строки, второй уровень компонента 1'}\n            key={'1-1'}\n          />\n        ),\n      },\n      {\n        id: '1-2',\n        checked: false,\n        render: (options: TreeNodeRenderOptionProps) => (\n          <TreeNode\n            {...options}\n            icon={FolderSolid}\n            label={'Текст раскрывающейся строки, второй уровень компонента 2'}\n            key={'1-2'}\n          />\n        ),\n      },\n    ],\n  },\n  {\n    render: (options: TreeNodeRenderOptionProps) => (\n      <TreeNode\n        {...options}\n        icon={FolderSolid}\n        label={'Текст заголовка, первый уровень компонента, размер M 40 2'}\n        key={'2'}\n      />\n    ),\n    id: '2',\n    checked: false,\n  },\n  {\n    render: (options: TreeNodeRenderOptionProps) => (\n      <TreeNode\n        {...options}\n        icon={FolderSolid}\n        label={'Текст заголовка, первый уровень компонента, размер M 40 3'}\n        key={'3'}\n      />\n    ),\n    id: '3',\n  },\n  {\n    render: (options: TreeNodeRenderOptionProps) => (\n      <TreeNode\n        {...options}\n        icon={FolderSolid}\n        label={'Текст заголовка, первый уровень компонента, размер M 40 4'}\n        key={'4'}\n      />\n    ),\n    id: '4',\n    disabled: true,\n  },\n  {\n    render: (options: TreeNodeRenderOptionProps) => (\n      <TreeNode\n        {...options}\n        icon={FolderSolid}\n        label={'Текст заголовка, первый уровень компонента, с пустым массивом children'}\n        key={'5'}\n      />\n    ),\n    id: '5',\n    children: [],\n  },\n];\n\nexport const TreeWithCheckboxesTemplate = (props: TreeProps) => {\n  const [dataList, setDataList] = useState<TreeItemProps[]>(demo1_TreeModel);\n\n  const handleChange = (dataList: TreeItemProps[]) => {\n    setDataList(dataList);\n  };\n\n  return (\n    <>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '24px' }}>\n        Контролируемое дерево с checkbox.\n      </T>\n      <Tree {...props} model={dataList} onChange={handleChange} />\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { T, Tree, TreeNode } from '@admiral-ds/react-ui';\nimport type { TreeItemProps, TreeNodeRenderOptionProps, TreeProps } from '@admiral-ds/react-ui';\n\nconst demo1_TreeModel: Array<TreeItemProps> = [\n  {\n    render: (options: TreeNodeRenderOptionProps) => <TreeNode key={'1'} label={'Корневой элемент'} {...options} />,\n    id: '1',\n    checked: false,\n    children: [\n      {\n        render: (options: TreeNodeRenderOptionProps) => (\n          <TreeNode key={'1-3'} label={'Первый дочерний элемент'} {...options} />\n        ),\n        id: '1-3',\n        checked: false,\n        children: [\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode key={'2-2'} label={'Текст  строки, третий уровень компонента 2'} {...options} />\n            ),\n            id: '2-2',\n          },\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode key={'2-3'} label={'Текст  строки, третий уровень компонента 3'} {...options} />\n            ),\n            id: '2-3',\n          },\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode key={'2-4'} label={'Текст  строки, третий уровень компонента 4'} {...options} />\n            ),\n            id: '2-4',\n          },\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode key={'2-5'} label={'Текст  строки с чекбоксом, третий уровень компонента 5'} {...options} />\n            ),\n            id: '2-5',\n            checked: false,\n            children: [\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    key={'3-1'}\n                    label={'Текст  строки с чекбоксом, четвертый уровень компонента 1'}\n                    {...options}\n                  />\n                ),\n                id: '3-1',\n                checked: false,\n              },\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    {...options}\n                    label={'Текст  строки с чекбоксом, четвертый уровень компонента 2'}\n                    key={'3-2'}\n                  />\n                ),\n                id: '3-2',\n                checked: false,\n              },\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    {...options}\n                    label={\n                      'Текст  строки с чекбоксом, четвертый уровень компонента. Компонент используется для отображения дерева вложенных списков с возможностью выбора отдельных пунктов по логике\\n' +\n                      '    чекбоксов. Ширина строки настравивается вручную, по умолчанию это 768px. В настройках присутствует до 6ти уровней\\n' +\n                      '    вложенности.'\n                    }\n                    key={'3-3'}\n                  />\n                ),\n                id: '3-3',\n                checked: false,\n              },\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    {...options}\n                    label={'Текст  строки с чекбоксом, четвертый уровень компонента 4'}\n                    key={'3-4'}\n                  />\n                ),\n                id: '3-4',\n                checked: false,\n                children: [\n                  {\n                    render: (options: TreeNodeRenderOptionProps) => (\n                      <TreeNode\n                        {...options}\n                        label={'Текст  строки с чекбоксом, пятый уровень компонента 1'}\n                        key={'4-1'}\n                      />\n                    ),\n                    id: '4-1',\n                    checked: false,\n                  },\n                  {\n                    render: (options: TreeNodeRenderOptionProps) => (\n                      <TreeNode\n                        {...options}\n                        label={'Текст  строки с чекбоксом, пятый уровень компонента 2'}\n                        key={'4-2'}\n                      />\n                    ),\n                    id: '4-2',\n                    checked: false,\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: '1-1',\n        checked: false,\n        render: (options: TreeNodeRenderOptionProps) => (\n          <TreeNode {...options} label={'Текст раскрывающейся строки, второй уровень компонента 1'} key={'1-1'} />\n        ),\n      },\n      {\n        id: '1-2',\n        checked: false,\n        render: (options: TreeNodeRenderOptionProps) => (\n          <TreeNode {...options} label={'Текст раскрывающейся строки, второй уровень компонента 2'} key={'1-2'} />\n        ),\n      },\n    ],\n  },\n];\n\nexport const TreeWithControlCheckCountTemplate = (props: TreeProps) => {\n  const [dataList, setDataList] = useState<TreeItemProps[]>(demo1_TreeModel);\n  const [countSelected, setCountSelected] = useState(0);\n  const changeTreeValues = (newDataList: Array<TreeItemProps>) => {\n    // eslint-disable-next-line no-console\n    console.log(newDataList);\n    const findChecked = (arr: Array<TreeItemProps>, checked: Array<string>) => {\n      arr.forEach((el: TreeItemProps) => {\n        if (el?.checked) {\n          checked.push(el.id);\n        }\n        if (Array.isArray(el?.children)) {\n          findChecked(el.children, checked);\n        }\n      });\n\n      return checked;\n    };\n    const checkedList = findChecked(dataList, []);\n    setCountSelected(checkedList.length);\n    setDataList(newDataList);\n  };\n\n  return (\n    <>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '24px' }}>\n        Пример показывает обработку состояния checked в модели. Checked являются узлы, которые непосредственно выбраны,\n        либо узлы, у которых все дочерние элементы находятся в состоянии checked.\n      </T>\n      <T font=\"Subtitle/Subtitle 1\" as=\"p\">\n        Выбрано элементов: {countSelected}\n      </T>\n      <Tree {...props} dimension=\"s\" model={dataList} onChange={changeTreeValues} />\n    </>\n  );\n};\n","import { Tree, TreeNode, T } from '@admiral-ds/react-ui';\nimport type { TreeItemProps, TreeNodeRenderOptionProps, TreeProps } from '@admiral-ds/react-ui';\n\nconst demo1_TreeModel: Array<TreeItemProps> = [\n  {\n    render: (options: TreeNodeRenderOptionProps) => <TreeNode key={'1'} label={'Корневой элемент'} {...options} />,\n    id: '1',\n    checked: false,\n    children: [\n      {\n        render: (options: TreeNodeRenderOptionProps) => (\n          <TreeNode key={'1-3'} label={'Первый дочерний элемент'} {...options} />\n        ),\n        id: '1-3',\n        checked: false,\n        children: [\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode key={'2-2'} label={'Текст  строки, третий уровень компонента 2'} {...options} />\n            ),\n            id: '2-2',\n          },\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode key={'2-3'} label={'Текст  строки, третий уровень компонента 3'} {...options} />\n            ),\n            id: '2-3',\n          },\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode key={'2-4'} label={'Текст  строки, третий уровень компонента 4'} {...options} />\n            ),\n            id: '2-4',\n          },\n          {\n            render: (options: TreeNodeRenderOptionProps) => (\n              <TreeNode key={'2-5'} label={'Текст  строки с чекбоксом, третий уровень компонента 5'} {...options} />\n            ),\n            id: '2-5',\n            checked: false,\n            children: [\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    key={'3-1'}\n                    label={'Текст  строки с чекбоксом, четвертый уровень компонента 1'}\n                    {...options}\n                  />\n                ),\n                id: '3-1',\n                checked: false,\n              },\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    {...options}\n                    label={'Текст  строки с чекбоксом, четвертый уровень компонента 2'}\n                    key={'3-2'}\n                  />\n                ),\n                id: '3-2',\n                checked: false,\n              },\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    {...options}\n                    label={\n                      'Текст  строки с чекбоксом, четвертый уровень компонента. Компонент используется для отображения дерева вложенных списков с возможностью выбора отдельных пунктов по логике\\n' +\n                      '    чекбоксов. Ширина строки настравивается вручную, по умолчанию это 768px. В настройках присутствует до 6ти уровней\\n' +\n                      '    вложенности.'\n                    }\n                    key={'3-3'}\n                  />\n                ),\n                id: '3-3',\n                checked: false,\n              },\n              {\n                render: (options: TreeNodeRenderOptionProps) => (\n                  <TreeNode\n                    {...options}\n                    label={'Текст  строки с чекбоксом, четвертый уровень компонента 4'}\n                    key={'3-4'}\n                  />\n                ),\n                id: '3-4',\n                checked: false,\n                children: [\n                  {\n                    render: (options: TreeNodeRenderOptionProps) => (\n                      <TreeNode\n                        {...options}\n                        label={'Текст  строки с чекбоксом, пятый уровень компонента 1'}\n                        key={'4-1'}\n                      />\n                    ),\n                    id: '4-1',\n                    checked: false,\n                  },\n                  {\n                    render: (options: TreeNodeRenderOptionProps) => (\n                      <TreeNode\n                        {...options}\n                        label={'Текст  строки с чекбоксом, пятый уровень компонента 2'}\n                        key={'4-2'}\n                      />\n                    ),\n                    id: '4-2',\n                    checked: false,\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: '1-1',\n        checked: false,\n        render: (options: TreeNodeRenderOptionProps) => (\n          <TreeNode {...options} label={'Текст раскрывающейся строки, второй уровень компонента 1'} key={'1-1'} />\n        ),\n      },\n      {\n        id: '1-2',\n        checked: false,\n        render: (options: TreeNodeRenderOptionProps) => (\n          <TreeNode {...options} label={'Текст раскрывающейся строки, второй уровень компонента 2'} key={'1-2'} />\n        ),\n      },\n    ],\n  },\n];\n\nexport const TreeWithOnChangeHandlerTemplate = (props: TreeProps) => {\n  const handleCheckedChange = (ids: Array<string>) => {\n    // eslint-disable-next-line no-console\n    console.log('Выбранные элементы:', ids.toString());\n    // eslint-disable-next-line no-console\n  };\n  const handleExpandedChange = (ids: Array<string>) => {\n    // eslint-disable-next-line no-console\n    console.log('Развернутые узлы:', ids.toString());\n  };\n\n  return (\n    <>\n      <T font=\"Body/Body 1 Long\" as=\"div\" style={{ marginBottom: '24px' }}>\n        События onExpandedChange и onCheckedChange добавлены для упрощения обработки изменений дерева в контролируемом\n        состоянии.\n      </T>\n      <Tree\n        {...props}\n        dimension=\"s\"\n        defaultModel={demo1_TreeModel}\n        onCheckedChange={handleCheckedChange}\n        onExpandedChange={handleExpandedChange}\n      />\n    </>\n  );\n};\n"],"names":[],"sourceRoot":""}