"use strict";(self.webpackChunk_admiral_ds_react_ui=self.webpackChunk_admiral_ds_react_ui||[]).push([[5684],{"./src/components/input/NumberInput/stories/NumberInput.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ControlledExample:()=>ControlledExample,CustomExample:()=>CustomExample,DisabledExample:()=>DisabledExample,MinMaxExample:()=>MinMaxExample,Playground:()=>Playground,__namedExportsOrder:()=>__namedExportsOrder,default:()=>NumberInput_stories});var react=__webpack_require__("./node_modules/react/index.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),NumberInput=__webpack_require__("./src/components/input/NumberInput/index.tsx"),borderRadius=__webpack_require__("./src/components/themes/borderRadius.ts"),createBorderRadiusSwapper=__webpack_require__("./.storybook/createBorderRadiusSwapper.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const NumberInputPlaygroundTemplate=({themeBorderKind,CSSCustomProps,...props})=>(0,jsx_runtime.jsx)(styled_components_browser_esm.NP,{theme:(0,createBorderRadiusSwapper.j)(themeBorderKind,CSSCustomProps),children:(0,jsx_runtime.jsx)(NumberInput.Q7,{prefix:"От",suffix:"₽",placeholder:"От 0 ₽",defaultValue:"2,00",onChange:event=>{console.log(event.target.value)},...props})});NumberInputPlaygroundTemplate.displayName="NumberInputPlaygroundTemplate";try{NumberInputPlaygroundTemplate.displayName="NumberInputPlaygroundTemplate",NumberInputPlaygroundTemplate.__docgenInfo={description:"",displayName:"NumberInputPlaygroundTemplate",props:{precision:{defaultValue:null,description:"точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"префикс (строка, которая выводится перед числовым значением)",name:"prefix",required:!1,type:{name:"string"}},suffix:{defaultValue:null,description:"суффикс (строка, которая выводится после числового значения)",name:"suffix",required:!1,type:{name:"string"}},thousand:{defaultValue:null,description:"разделитель между тысячами. Если значение не задано,\nто оно определяется согласно локали, в русской локали thousand - это пробел",name:"thousand",required:!1,type:{name:"string"}},decimal:{defaultValue:null,description:"разделитель между целым и десятичным. Если значение не задано,\nто оно определяется согласно локали, в русской локали decimal - это запятая",name:"decimal",required:!1,type:{name:"string"}},step:{defaultValue:null,description:"Шаг инпута. Если шаг - это дробное число, то количество знаков в десятичной части step должно быть равно precision",name:"step",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"Минимальное значение. При minValue >= 0, ввод знака минус блокируется",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:null,description:"Максимальное значение",name:"maxValue",required:!1,type:{name:"number"}},displayPlusMinusIcons:{defaultValue:null,description:"Отображать иконки плюса и минуса",name:"displayPlusMinusIcons",required:!1,type:{name:"boolean"}},align:{defaultValue:null,description:"Выравнивание контента. По умолчанию выравнивание происходит по левому краю",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},dimension:{defaultValue:null,description:"Делает высоту компонента больше или меньше обычной",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'}]}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"error"'},{value:'"success"'}]}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},icons:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.13.0, будет удалено в 10.x.x версии.\nВзамен используйте iconsAfter\n\nИконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},iconsAfter:{defaultValue:null,description:"Иконки для отображения в конце поля",name:"iconsAfter",required:!1,type:{name:"ReactNode"}},displayClearIcon:{defaultValue:null,description:"Отображать иконку очистки поля",name:"displayClearIcon",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}},CSSCustomProps:{defaultValue:null,description:"",name:"CSSCustomProps",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/NumberInput/stories/NumberInputPlayground.template.tsx#NumberInputPlaygroundTemplate"]={docgenInfo:NumberInputPlaygroundTemplate.__docgenInfo,name:"NumberInputPlaygroundTemplate",path:"src/components/input/NumberInput/stories/NumberInputPlayground.template.tsx#NumberInputPlaygroundTemplate"})}catch(__react_docgen_typescript_loader_error){}const NumberInputDisabledTemplate=({themeBorderKind,CSSCustomProps,...props})=>(0,jsx_runtime.jsx)(styled_components_browser_esm.NP,{theme:(0,createBorderRadiusSwapper.j)(themeBorderKind,CSSCustomProps),children:(0,jsx_runtime.jsx)(NumberInput.Q7,{...props,disabled:!0,placeholder:"0 ₽"})});NumberInputDisabledTemplate.displayName="NumberInputDisabledTemplate";try{NumberInputDisabledTemplate.displayName="NumberInputDisabledTemplate",NumberInputDisabledTemplate.__docgenInfo={description:"",displayName:"NumberInputDisabledTemplate",props:{precision:{defaultValue:null,description:"точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"префикс (строка, которая выводится перед числовым значением)",name:"prefix",required:!1,type:{name:"string"}},suffix:{defaultValue:null,description:"суффикс (строка, которая выводится после числового значения)",name:"suffix",required:!1,type:{name:"string"}},thousand:{defaultValue:null,description:"разделитель между тысячами. Если значение не задано,\nто оно определяется согласно локали, в русской локали thousand - это пробел",name:"thousand",required:!1,type:{name:"string"}},decimal:{defaultValue:null,description:"разделитель между целым и десятичным. Если значение не задано,\nто оно определяется согласно локали, в русской локали decimal - это запятая",name:"decimal",required:!1,type:{name:"string"}},step:{defaultValue:null,description:"Шаг инпута. Если шаг - это дробное число, то количество знаков в десятичной части step должно быть равно precision",name:"step",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"Минимальное значение. При minValue >= 0, ввод знака минус блокируется",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:null,description:"Максимальное значение",name:"maxValue",required:!1,type:{name:"number"}},displayPlusMinusIcons:{defaultValue:null,description:"Отображать иконки плюса и минуса",name:"displayPlusMinusIcons",required:!1,type:{name:"boolean"}},align:{defaultValue:null,description:"Выравнивание контента. По умолчанию выравнивание происходит по левому краю",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},dimension:{defaultValue:null,description:"Делает высоту компонента больше или меньше обычной",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'}]}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"error"'},{value:'"success"'}]}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},icons:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.13.0, будет удалено в 10.x.x версии.\nВзамен используйте iconsAfter\n\nИконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},iconsAfter:{defaultValue:null,description:"Иконки для отображения в конце поля",name:"iconsAfter",required:!1,type:{name:"ReactNode"}},displayClearIcon:{defaultValue:null,description:"Отображать иконку очистки поля",name:"displayClearIcon",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}},CSSCustomProps:{defaultValue:null,description:"",name:"CSSCustomProps",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/NumberInput/stories/NumberInputDisabled.template.tsx#NumberInputDisabledTemplate"]={docgenInfo:NumberInputDisabledTemplate.__docgenInfo,name:"NumberInputDisabledTemplate",path:"src/components/input/NumberInput/stories/NumberInputDisabled.template.tsx#NumberInputDisabledTemplate"})}catch(__react_docgen_typescript_loader_error){}var utils=__webpack_require__("./src/components/input/NumberInput/utils.ts"),T=__webpack_require__("./src/components/T/index.tsx");const NumberInputMinMaxTemplate=({minValue=-1e3,maxValue=2e3,precision=2,decimal=",",themeBorderKind,CSSCustomProps,...props})=>{const[status,setStatus]=(0,react.useState)(void 0);return(0,jsx_runtime.jsxs)(styled_components_browser_esm.NP,{theme:(0,createBorderRadiusSwapper.j)(themeBorderKind,CSSCustomProps),children:[(0,jsx_runtime.jsx)(T.T,{font:"Body/Body 2 Long",as:"div",style:{marginBottom:"24px"},children:"В данном примере, если введенное значение выходит за границы диапазона minValue-maxValue, компонент переходит в состояние ошибки."}),(0,jsx_runtime.jsx)(NumberInput.Q7,{...props,onChange:event=>{const numValue=function convertStrToNum(str,precision,decimal){return Number((0,utils.Zv)(str,precision,decimal).replace(decimal,"."))}(event.target.value,precision,decimal);event.target.value&&(numValue<minValue||numValue>maxValue)?setStatus("error"):setStatus(void 0)},minValue,maxValue,status,precision,decimal,placeholder:"Введите число"})]})};NumberInputMinMaxTemplate.displayName="NumberInputMinMaxTemplate";try{NumberInputMinMaxTemplate.displayName="NumberInputMinMaxTemplate",NumberInputMinMaxTemplate.__docgenInfo={description:"",displayName:"NumberInputMinMaxTemplate",props:{precision:{defaultValue:{value:"2"},description:"точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"префикс (строка, которая выводится перед числовым значением)",name:"prefix",required:!1,type:{name:"string"}},suffix:{defaultValue:null,description:"суффикс (строка, которая выводится после числового значения)",name:"suffix",required:!1,type:{name:"string"}},thousand:{defaultValue:null,description:"разделитель между тысячами. Если значение не задано,\nто оно определяется согласно локали, в русской локали thousand - это пробел",name:"thousand",required:!1,type:{name:"string"}},decimal:{defaultValue:{value:","},description:"разделитель между целым и десятичным. Если значение не задано,\nто оно определяется согласно локали, в русской локали decimal - это запятая",name:"decimal",required:!1,type:{name:"string"}},step:{defaultValue:null,description:"Шаг инпута. Если шаг - это дробное число, то количество знаков в десятичной части step должно быть равно precision",name:"step",required:!1,type:{name:"number"}},minValue:{defaultValue:{value:"-1000"},description:"Минимальное значение. При minValue >= 0, ввод знака минус блокируется",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:{value:"2000"},description:"Максимальное значение",name:"maxValue",required:!1,type:{name:"number"}},displayPlusMinusIcons:{defaultValue:null,description:"Отображать иконки плюса и минуса",name:"displayPlusMinusIcons",required:!1,type:{name:"boolean"}},align:{defaultValue:null,description:"Выравнивание контента. По умолчанию выравнивание происходит по левому краю",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},dimension:{defaultValue:null,description:"Делает высоту компонента больше или меньше обычной",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'}]}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"error"'},{value:'"success"'}]}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},icons:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.13.0, будет удалено в 10.x.x версии.\nВзамен используйте iconsAfter\n\nИконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},iconsAfter:{defaultValue:null,description:"Иконки для отображения в конце поля",name:"iconsAfter",required:!1,type:{name:"ReactNode"}},displayClearIcon:{defaultValue:null,description:"Отображать иконку очистки поля",name:"displayClearIcon",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}},CSSCustomProps:{defaultValue:null,description:"",name:"CSSCustomProps",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/NumberInput/stories/NumberInputMinMax.template.tsx#NumberInputMinMaxTemplate"]={docgenInfo:NumberInputMinMaxTemplate.__docgenInfo,name:"NumberInputMinMaxTemplate",path:"src/components/input/NumberInput/stories/NumberInputMinMax.template.tsx#NumberInputMinMaxTemplate"})}catch(__react_docgen_typescript_loader_error){}const NumberInputCustomisedTemplate=({themeBorderKind,CSSCustomProps,...props})=>(0,jsx_runtime.jsx)(styled_components_browser_esm.NP,{theme:(0,createBorderRadiusSwapper.j)(themeBorderKind,CSSCustomProps),children:(0,jsx_runtime.jsx)(NumberInput.Q7,{...props,onChange:event=>{console.log(event.target.value)},suffix:"$",thousand:",",decimal:".",precision:1,placeholder:"0.0 $"})});NumberInputCustomisedTemplate.displayName="NumberInputCustomisedTemplate";try{NumberInputCustomisedTemplate.displayName="NumberInputCustomisedTemplate",NumberInputCustomisedTemplate.__docgenInfo={description:"",displayName:"NumberInputCustomisedTemplate",props:{precision:{defaultValue:null,description:"точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"префикс (строка, которая выводится перед числовым значением)",name:"prefix",required:!1,type:{name:"string"}},suffix:{defaultValue:null,description:"суффикс (строка, которая выводится после числового значения)",name:"suffix",required:!1,type:{name:"string"}},thousand:{defaultValue:null,description:"разделитель между тысячами. Если значение не задано,\nто оно определяется согласно локали, в русской локали thousand - это пробел",name:"thousand",required:!1,type:{name:"string"}},decimal:{defaultValue:null,description:"разделитель между целым и десятичным. Если значение не задано,\nто оно определяется согласно локали, в русской локали decimal - это запятая",name:"decimal",required:!1,type:{name:"string"}},step:{defaultValue:null,description:"Шаг инпута. Если шаг - это дробное число, то количество знаков в десятичной части step должно быть равно precision",name:"step",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"Минимальное значение. При minValue >= 0, ввод знака минус блокируется",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:null,description:"Максимальное значение",name:"maxValue",required:!1,type:{name:"number"}},displayPlusMinusIcons:{defaultValue:null,description:"Отображать иконки плюса и минуса",name:"displayPlusMinusIcons",required:!1,type:{name:"boolean"}},align:{defaultValue:null,description:"Выравнивание контента. По умолчанию выравнивание происходит по левому краю",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},dimension:{defaultValue:null,description:"Делает высоту компонента больше или меньше обычной",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"xl"'}]}},status:{defaultValue:null,description:"Статус поля",name:"status",required:!1,type:{name:"enum",value:[{value:'"error"'},{value:'"success"'}]}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},icons:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.13.0, будет удалено в 10.x.x версии.\nВзамен используйте iconsAfter\n\nИконки для отображения в правом углу поля",name:"icons",required:!1,type:{name:"ReactNode"}},iconsAfter:{defaultValue:null,description:"Иконки для отображения в конце поля",name:"iconsAfter",required:!1,type:{name:"ReactNode"}},displayClearIcon:{defaultValue:null,description:"Отображать иконку очистки поля",name:"displayClearIcon",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"Отображать статус загрузки данных",name:"isLoading",required:!1,type:{name:"boolean"}},containerRef:{defaultValue:null,description:"Ref контейнера компонента",name:"containerRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},handleInput:{defaultValue:null,description:"Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.\nИспользуется для создания масок ввода",name:"handleInput",required:!1,type:{name:"CustomInputHandler"}},disableCopying:{defaultValue:null,description:"Наличие этого атрибута отключает возможность выделения и копирования значения поля",name:"disableCopying",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"Отображение тултипа, по умолчанию true",name:"showTooltip",required:!1,type:{name:"boolean"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}},CSSCustomProps:{defaultValue:null,description:"",name:"CSSCustomProps",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/input/NumberInput/stories/NumberInputCustomised.template.tsx#NumberInputCustomisedTemplate"]={docgenInfo:NumberInputCustomisedTemplate.__docgenInfo,name:"NumberInputCustomisedTemplate",path:"src/components/input/NumberInput/stories/NumberInputCustomised.template.tsx#NumberInputCustomisedTemplate"})}catch(__react_docgen_typescript_loader_error){}const NumberInputControlledTemplate=()=>{const[value1,setValue1]=(0,react.useState)("50,00"),[value2,setValue2]=(0,react.useState)("1"),[suffix,setSuffix]=(0,react.useState)("минута");return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(NumberInput.Q7,{value:value1,onChange:event=>{console.log(event.target.value),setValue1(event.target.value)},prefix:"От",suffix:"₽",placeholder:"От 0 ₽",style:{marginBottom:"40px"}}),(0,jsx_runtime.jsx)(NumberInput.Q7,{value:value2,onChange:event=>{console.log(event.target.value),setValue2(event.target.value),setSuffix(function declOfNum(n,text_forms){const n1=(n=Math.abs(n)%100)%10;return n>10&&n<20?text_forms[2]:n1>1&&n1<5?text_forms[1]:1==n1?text_forms[0]:text_forms[2]}(Number((0,utils.Zv)(event.target.value,0)),["минута","минуты","минут"]))},suffix,precision:0,placeholder:"0 минут"})]})},Desc=styled_components_browser_esm.Ay.div.withConfig({displayName:"NumberInputstories__Desc",componentId:"sc-6imdcb-0"})(["font-family:'VTB Group UI';font-size:16px;line-height:24px;"]),Description=()=>(0,jsx_runtime.jsx)(Desc,{children:"Поле ввода с возможностью ввода числовых значений через нажатие с заданным шагом"});Description.displayName="Description";const NumberInput_stories={title:"Admiral-2.1/Input/NumberInput",component:NumberInput.Q7,parameters:{docs:{source:{code:null}},componentSubtitle:(0,jsx_runtime.jsx)(Description,{}),design:[{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=39%3A60588"},{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=39%3A60694"},{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=39%3A60723"}]},argTypes:{placeholder:{control:{type:"text"}},thousand:{control:{type:"text"}},prefix:{control:{type:"text"}},suffix:{control:{type:"text"}},decimal:{control:{type:"text"}},precision:{type:"number"},minValue:{type:"number"},maxValue:{type:"number"},step:{type:"number"},displayPlusMinusIcons:{control:{type:"boolean"}},displayClearIcon:{control:{type:"boolean"}},disabled:{control:{type:"boolean"}},readOnly:{control:{type:"boolean"}},disableCopying:{control:{type:"boolean"}},showTooltip:{control:{type:"boolean"}},isLoading:{control:{type:"boolean"}},icons:{control:!1},containerRef:{control:!1},handleInput:{control:!1},themeBorderKind:{options:borderRadius.$t,control:{type:"radio"}},skeleton:{control:{type:"boolean"}}}},PlaygroundStory=props=>{const[{CSSCustomProps}]=(0,external_STORYBOOK_MODULE_PREVIEW_API_.useGlobals)();return(0,jsx_runtime.jsx)(NumberInputPlaygroundTemplate,{...props,CSSCustomProps})};PlaygroundStory.displayName="PlaygroundStory";const Playground={render:PlaygroundStory,parameters:{docs:{source:{code:"import { NumberInput } from '@admiral-ds/react-ui';\nimport type { BorderRadiusType, NumberInputProps } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../../.storybook/createBorderRadiusSwapper';\n\nexport const NumberInputPlaygroundTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: NumberInputProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <NumberInput\n        prefix=\"От\"\n        suffix=\"₽\"\n        placeholder=\"От 0 ₽\"\n        defaultValue=\"2,00\"\n        onChange={(event) => {\n          console.log(event.target.value);\n        }}\n        {...props}\n      />\n    </ThemeProvider>\n  );\n};\n"}}}},DisabledStory=props=>{const[{CSSCustomProps}]=(0,external_STORYBOOK_MODULE_PREVIEW_API_.useGlobals)();return(0,jsx_runtime.jsx)(NumberInputDisabledTemplate,{...props,CSSCustomProps})};DisabledStory.displayName="DisabledStory";const DisabledExample={render:DisabledStory,parameters:{docs:{source:{code:"import { NumberInput } from '@admiral-ds/react-ui';\nimport type { BorderRadiusType, NumberInputProps } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../../.storybook/createBorderRadiusSwapper';\n\nexport const NumberInputDisabledTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: NumberInputProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <NumberInput {...props} disabled placeholder=\"0 ₽\" />\n    </ThemeProvider>\n  );\n};\n"}}},name:"NumberInput. Задизейбленный."},MinMaxStory=props=>{const[{CSSCustomProps}]=(0,external_STORYBOOK_MODULE_PREVIEW_API_.useGlobals)();return(0,jsx_runtime.jsx)(NumberInputMinMaxTemplate,{...props,CSSCustomProps})};MinMaxStory.displayName="MinMaxStory";const MinMaxExample={render:MinMaxStory,parameters:{docs:{source:{code:"import { useState } from 'react';\nimport { NumberInput, T, clearValue } from '@admiral-ds/react-ui';\nimport type { BorderRadiusType, NumberInputProps } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../../.storybook/createBorderRadiusSwapper';\n\nfunction convertStrToNum(str: string, precision: number, decimal: string) {\n  return Number(clearValue(str, precision, decimal).replace(decimal, '.'));\n}\n\nexport const NumberInputMinMaxTemplate = ({\n  minValue = -1000,\n  maxValue = 2000,\n  precision = 2,\n  decimal = ',',\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: NumberInputProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [status, setStatus] = useState<NumberInputProps['status'] | undefined>(undefined);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const numValue = convertStrToNum(event.target.value, precision, decimal);\n    if (event.target.value && (numValue < minValue || numValue > maxValue)) {\n      setStatus('error');\n    } else {\n      setStatus(undefined);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <T font=\"Body/Body 2 Long\" as=\"div\" style={{ marginBottom: '24px' }}>\n        В данном примере, если введенное значение выходит за границы диапазона minValue-maxValue, компонент переходит в\n        состояние ошибки.\n      </T>\n      <NumberInput\n        {...props}\n        onChange={handleChange}\n        minValue={minValue}\n        maxValue={maxValue}\n        status={status}\n        precision={precision}\n        decimal={decimal}\n        placeholder=\"Введите число\"\n      />\n    </ThemeProvider>\n  );\n};\n"},description:{story:"Параметры максимальное (maxValue) и минимальное (minValue) значение применяются для того, чтобы обозначить \n      диапазон допустимых чисел для ввода. При достижении лимита, кнопки “+” или “-” принимают состояние Disabled. Если \n      вручную введенное значение больше или меньше указанного диапазона, то автокоррекции значения при выводе фокуса из поля не происходит \n      (в предыдущей реализации, от которой библиотека отказалась, значение автоматически корректировалось, принимая наиболее близкое значение из допустимого диапазона). \n      Предполагается, что необходимая валидация и корректировка значения будут происходить на стороне пользователя. Также, если minValue >= 0, то\n      ввод знака минус блокируется."}}},name:"NumberInput. Пример с minValue, maxValue."},CustomStory=props=>{const[{CSSCustomProps}]=(0,external_STORYBOOK_MODULE_PREVIEW_API_.useGlobals)();return(0,jsx_runtime.jsx)(NumberInputCustomisedTemplate,{...props,CSSCustomProps})};CustomStory.displayName="CustomStory";const CustomExample={render:CustomStory,parameters:{docs:{source:{code:"import { NumberInput } from '@admiral-ds/react-ui';\nimport type { BorderRadiusType, NumberInputProps } from '@admiral-ds/react-ui';\nimport { ThemeProvider } from 'styled-components';\nimport { createBorderRadiusSwapper } from '../../../../../.storybook/createBorderRadiusSwapper';\n\nexport const NumberInputCustomisedTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: NumberInputProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <NumberInput\n        {...props}\n        onChange={(event) => {\n          console.log(event.target.value);\n        }}\n        suffix=\"$\"\n        thousand=\",\"\n        decimal=\".\"\n        precision={1}\n        placeholder=\"0.0 $\"\n      />\n    </ThemeProvider>\n  );\n};\n"},description:{story:"Пользователь может указать с помощью параметра precision (по умолчанию равен 2), \n      с какой точностью компонент должен выводить число (сколько разрядов должно быть в дробной части числа). \n      В этом случае при потере фокуса, если число содержит не все разряды в дробной части или дробная \n      часть отсутствует, должна произойти корректировка значения и недостающее количество разрядов должно быть заполнено нулями."}}},name:"NumberInput. Пример изменения настроек (suffix, precision, thousand)."},ControlledStory=()=>(0,jsx_runtime.jsx)(NumberInputControlledTemplate,{});ControlledStory.displayName="ControlledStory";const ControlledExample={render:ControlledStory,parameters:{docs:{source:{code:"import { useState } from 'react';\nimport { NumberInput, clearValue } from '@admiral-ds/react-ui';\n\nfunction declOfNum(n: number, text_forms: Array<string>) {\n  n = Math.abs(n) % 100;\n  const n1 = n % 10;\n  if (n > 10 && n < 20) {\n    return text_forms[2];\n  }\n  if (n1 > 1 && n1 < 5) {\n    return text_forms[1];\n  }\n  if (n1 == 1) {\n    return text_forms[0];\n  }\n  return text_forms[2];\n}\n\nexport const NumberInputControlledTemplate = () => {\n  const [value1, setValue1] = useState<string | undefined>('50,00');\n  const [value2, setValue2] = useState<string | undefined>('1');\n  const [suffix, setSuffix] = useState('минута');\n\n  return (\n    <>\n      <NumberInput\n        value={value1}\n        onChange={(event) => {\n          console.log(event.target.value);\n          setValue1(event.target.value);\n        }}\n        prefix=\"От\"\n        suffix=\"₽\"\n        placeholder=\"От 0 ₽\"\n        style={{ marginBottom: '40px' }}\n      />\n      <NumberInput\n        value={value2}\n        onChange={(event) => {\n          console.log(event.target.value);\n          setValue2(event.target.value);\n          setSuffix(declOfNum(Number(clearValue(event.target.value, 0)), ['минута', 'минуты', 'минут']));\n        }}\n        suffix={suffix}\n        precision={0}\n        placeholder=\"0 минут\"\n      />\n    </>\n  );\n};\n"},description:{story:"В качестве значений параметров value и defaultValue в NumberInput необходимо передавать уже\n      отформатированную строку с разделителями тысяч (суффикс/префикс в value/defaultValue вносить не нужно).\n\nЕсли вы используете \n      контролируемый NumberInput, то в качестве значения value вам досточно указывать event.target.value, где event - это нативное событие \n      инпута, передаваемое к качестве параметра в колбек onChange. \n\nКроме того, библиотека предоставляет утилиту fitToCurrency, \n      которая возвращает строку отформатированную в денежном формате. В качестве параметров \n      данная утилита принимает value - значение, которое надо отформатировать, а также параметры precision, decimal, thousand. \n      Также библиотека предоставляет утилиту clearValue, которая возвращает входную строку, из которой удалены все символы кроме \n      цифр, символа decimal и минуса."}}},name:"NumberInput. Примеры контролируемого инпута."};Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:"{\n  render: PlaygroundStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputPlaygroundRaw\n      }\n    }\n  }\n}",...Playground.parameters?.docs?.source}}},DisabledExample.parameters={...DisabledExample.parameters,docs:{...DisabledExample.parameters?.docs,source:{originalSource:"{\n  render: DisabledStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputDisabledRaw\n      }\n    }\n  },\n  name: 'NumberInput. Задизейбленный.'\n}",...DisabledExample.parameters?.docs?.source}}},MinMaxExample.parameters={...MinMaxExample.parameters,docs:{...MinMaxExample.parameters?.docs,source:{originalSource:"{\n  render: MinMaxStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputMinMaxRaw\n      },\n      description: {\n        story: `Параметры максимальное (maxValue) и минимальное (minValue) значение применяются для того, чтобы обозначить \n      диапазон допустимых чисел для ввода. При достижении лимита, кнопки “+” или “-” принимают состояние Disabled. Если \n      вручную введенное значение больше или меньше указанного диапазона, то автокоррекции значения при выводе фокуса из поля не происходит \n      (в предыдущей реализации, от которой библиотека отказалась, значение автоматически корректировалось, принимая наиболее близкое значение из допустимого диапазона). \n      Предполагается, что необходимая валидация и корректировка значения будут происходить на стороне пользователя. Также, если minValue >= 0, то\n      ввод знака минус блокируется.`\n      }\n    }\n  },\n  name: 'NumberInput. Пример с minValue, maxValue.'\n}",...MinMaxExample.parameters?.docs?.source}}},CustomExample.parameters={...CustomExample.parameters,docs:{...CustomExample.parameters?.docs,source:{originalSource:"{\n  render: CustomStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputCustomisedRaw\n      },\n      description: {\n        story: `Пользователь может указать с помощью параметра precision (по умолчанию равен 2), \n      с какой точностью компонент должен выводить число (сколько разрядов должно быть в дробной части числа). \n      В этом случае при потере фокуса, если число содержит не все разряды в дробной части или дробная \n      часть отсутствует, должна произойти корректировка значения и недостающее количество разрядов должно быть заполнено нулями.`\n      }\n    }\n  },\n  name: 'NumberInput. Пример изменения настроек (suffix, precision, thousand).'\n}",...CustomExample.parameters?.docs?.source}}},ControlledExample.parameters={...ControlledExample.parameters,docs:{...ControlledExample.parameters?.docs,source:{originalSource:"{\n  render: ControlledStory,\n  parameters: {\n    docs: {\n      source: {\n        code: NumberInputControlledRaw\n      },\n      description: {\n        story: `В качестве значений параметров value и defaultValue в NumberInput необходимо передавать уже\n      отформатированную строку с разделителями тысяч (суффикс/префикс в value/defaultValue вносить не нужно).\\n\\nЕсли вы используете \n      контролируемый NumberInput, то в качестве значения value вам досточно указывать event.target.value, где event - это нативное событие \n      инпута, передаваемое к качестве параметра в колбек onChange. \\n\\nКроме того, библиотека предоставляет утилиту fitToCurrency, \n      которая возвращает строку отформатированную в денежном формате. В качестве параметров \n      данная утилита принимает value - значение, которое надо отформатировать, а также параметры precision, decimal, thousand. \n      Также библиотека предоставляет утилиту clearValue, которая возвращает входную строку, из которой удалены все символы кроме \n      цифр, символа decimal и минуса.`\n      }\n    }\n  },\n  name: 'NumberInput. Примеры контролируемого инпута.'\n}",...ControlledExample.parameters?.docs?.source}}};const __namedExportsOrder=["Playground","DisabledExample","MinMaxExample","CustomExample","ControlledExample"]},"./src/components/T/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>T});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),_src_components_themes__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/themes/common/index.ts"),_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/skeleton/animation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const skeletonMixin=(0,styled_components__WEBPACK_IMPORTED_MODULE_2__.AH)(["",";pointer-events:none;"],_src_components_skeleton_animation__WEBPACK_IMPORTED_MODULE_3__.h),Tspan=styled_components__WEBPACK_IMPORTED_MODULE_2__.Ay.span.withConfig({displayName:"T__Tspan",componentId:"sc-1bd4slr-0"})(["color:",";",";"," ",""],(({$color,theme,$skeleton})=>{const cssVar=`--admiral-color-${$color?.replace("/","_").replaceAll(" ","")}`;return $skeleton?"transparent":$color?theme.color[$color]?`var(${cssVar}, ${theme.color[$color]})`:$color:`var(--admiral-color-Neutral_Neutral90, ${theme.color[_src_components_themes__WEBPACK_IMPORTED_MODULE_4__.jn]})`}),(p=>p.theme.typography[p.$font]),(p=>p.$cssMixin?p.$cssMixin:""),(p=>p.$skeleton&&skeletonMixin)),T=(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((({font,color,cssMixin,skeleton,...props},ref)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Tspan,{ref,...props,$font:font,$color:color,$cssMixin:cssMixin,$skeleton:skeleton})));T.displayName="T";try{T.displayName="T",T.__docgenInfo={description:"",displayName:"T",props:{font:{defaultValue:null,description:"Имя шрифта из списка дизайн системы",name:"font",required:!0,type:{name:"enum",value:[{value:'"Main/XXL"'},{value:'"Main/XL"'},{value:'"Main/L"'},{value:'"Main/M"'},{value:'"Main/S"'},{value:'"Main/XS-bold"'},{value:'"Main/XS"'},{value:'"Additional/L-bold"'},{value:'"Additional/L"'},{value:'"Additional/M"'},{value:'"Additional/S"'},{value:'"Additional/S-bold"'},{value:'"Additional/XS"'},{value:'"Button/M"'},{value:'"Button/S"'},{value:'"Caption/XS"'},{value:'"Header/HL1"'},{value:'"Header/HL2"'},{value:'"Header/HL3"'},{value:'"Header/H1"'},{value:'"Header/H2"'},{value:'"Header/H3"'},{value:'"Header/H4"'},{value:'"Header/H5"'},{value:'"Header/H6"'},{value:'"Subtitle/Subtitle 1"'},{value:'"Subtitle/Subtitle 2"'},{value:'"Subtitle/Subtitle 3"'},{value:'"Body/Body 1 Long"'},{value:'"Body/Body 1 Short"'},{value:'"Body/Body 2 Long"'},{value:'"Body/Body 2 Short"'},{value:'"Button/Button 1"'},{value:'"Button/Button 2"'},{value:'"Caption/Caption 1"'},{value:'"Caption/Caption 2"'}]}},color:{defaultValue:null,description:"Имя цвета шрифта из палитры темы *",name:"color",required:!1,type:{name:"enum",value:[{value:'"Neutral/Neutral 00"'},{value:'"Neutral/Neutral 05"'},{value:'"Neutral/Neutral 10"'},{value:'"Neutral/Neutral 20"'},{value:'"Neutral/Neutral 30"'},{value:'"Neutral/Neutral 40"'},{value:'"Neutral/Neutral 50"'},{value:'"Neutral/Neutral 60"'},{value:'"Neutral/Neutral 70"'},{value:'"Neutral/Neutral 80"'},{value:'"Neutral/Neutral 90"'},{value:'"Primary/Primary 10"'},{value:'"Primary/Primary 20"'},{value:'"Primary/Primary 30"'},{value:'"Primary/Primary 40"'},{value:'"Primary/Primary 50"'},{value:'"Primary/Primary 60 Main"'},{value:'"Primary/Primary 70"'},{value:'"Primary/Primary 80"'},{value:'"Special/Static White"'},{value:'"Special/Elevated BG"'},{value:'"Special/Dark Static Neutral 00"'},{value:'"Special/Dark Static Neutral 05"'},{value:'"Special/Dark Static Neutral 10"'},{value:'"Special/Dark Static Neutral 20"'},{value:'"Special/Dark Static Neutral 30"'},{value:'"Special/Dark Static Neutral 50"'},{value:'"Special/Dark Static Neutral 70"'},{value:'"Special/Dark Static Neutral 80"'},{value:'"Special/Dark Static Neutral 90"'},{value:'"Special/Dark Static Primary 60"'},{value:'"Special/Dark Static Primary 70"'},{value:'"Special/Dark Static Primary 80"'},{value:'"Special/Dark Static Error 60"'},{value:'"Special/Dark Static Success 50"'},{value:'"Opacity/Hover"'},{value:'"Opacity/Focus"'},{value:'"Opacity/Press"'},{value:'"Opacity/Modal"'},{value:'"Opacity/Dark Static Hover"'},{value:'"Opacity/Dark Static Focus"'},{value:'"Opacity/Dark Static Press"'},{value:'"Opacity/Neutral 8"'},{value:'"Opacity/Neutral 12"'},{value:'"Opacity/Neutral 16"'},{value:'"Error/Error 10"'},{value:'"Error/Error 20"'},{value:'"Error/Error 30"'},{value:'"Error/Error 40"'},{value:'"Error/Error 50"'},{value:'"Error/Error 60 Main"'},{value:'"Error/Error 70"'},{value:'"Error/Error 80"'},{value:'"Success/Success 10"'},{value:'"Success/Success 20"'},{value:'"Success/Success 30"'},{value:'"Success/Success 40"'},{value:'"Success/Success 50 Main"'},{value:'"Success/Success 60"'},{value:'"Success/Success 70"'},{value:'"Warning/Warning 10"'},{value:'"Warning/Warning 20"'},{value:'"Warning/Warning 30"'},{value:'"Warning/Warning 40"'},{value:'"Warning/Warning 50 Main"'},{value:'"Warning/Warning 60"'},{value:'"Warning/Warning 70"'},{value:'"Attention/Attention 10"'},{value:'"Attention/Attention 20"'},{value:'"Attention/Attention 30"'},{value:'"Attention/Attention 40"'},{value:'"Attention/Attention 50 Main"'},{value:'"Attention/Attention 60"'},{value:'"Attention/Attention 70"'},{value:'"Purple/Purple 10"'},{value:'"Purple/Purple 20"'},{value:'"Purple/Purple 30"'},{value:'"Purple/Purple 40"'},{value:'"Purple/Purple 50"'},{value:'"Purple/Purple 60 Main"'},{value:'"Purple/Purple 70"'},{value:'"Purple/Purple 80"'},{value:'"Magenta/Magenta 10"'},{value:'"Magenta/Magenta 20"'},{value:'"Magenta/Magenta 30"'},{value:'"Magenta/Magenta 40"'},{value:'"Magenta/Magenta 50"'},{value:'"Magenta/Magenta 60 Main"'},{value:'"Magenta/Magenta 70"'},{value:'"Magenta/Magenta 80"'},{value:'"Cyan/Cyan 10"'},{value:'"Cyan/Cyan 20"'},{value:'"Cyan/Cyan 30"'},{value:'"Cyan/Cyan 40"'},{value:'"Cyan/Cyan 50"'},{value:'"Cyan/Cyan 60 Main"'},{value:'"Cyan/Cyan 70"'},{value:'"Cyan/Cyan 80"'},{value:'"Teal/Teal 10"'},{value:'"Teal/Teal 20"'},{value:'"Teal/Teal 30"'},{value:'"Teal/Teal 40"'},{value:'"Teal/Teal 50"'},{value:'"Teal/Teal 60 Main"'},{value:'"Teal/Teal 70"'},{value:'"Teal/Teal 80"'}]}},cssMixin:{defaultValue:null,description:"Позволяет добавлять  миксин созданный с помощью styled css",name:"cssMixin",required:!1,type:{name:"RuleSet<object>"}},skeleton:{defaultValue:null,description:"Состояние skeleton",name:"skeleton",required:!1,type:{name:"boolean"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/T/index.tsx#T"]={docgenInfo:T.__docgenInfo,name:"T",path:"src/components/T/index.tsx#T"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/themes/common/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Gz:()=>DefaultBackgroundColorName,jn:()=>DefaultFontColorName,yL:()=>MainPrimaryColorName});const DefaultFontColorName="Neutral/Neutral 90",DefaultBackgroundColorName="Neutral/Neutral 00",MainPrimaryColorName="Primary/Primary 60 Main"}}]);