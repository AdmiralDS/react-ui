"use strict";(self.webpackChunk_admiral_ds_react_ui=self.webpackChunk_admiral_ds_react_ui||[]).push([[9225],{"./src/components/DropMenu/stories/DropMenu.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CategoryExample:()=>CategoryExample,DropMenuCheckboxExample:()=>DropMenuCheckboxExample,DropMenuRadiobuttonExample:()=>DropMenuRadiobuttonExample,DropMenuTooltipExample:()=>DropMenuTooltipExample,SimpleExample:()=>SimpleExample,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DropMenu_stories});var react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api"),DropMenu=__webpack_require__("./src/components/DropMenu/index.tsx"),borderRadius=__webpack_require__("./src/components/themes/borderRadius.ts"),MenuItem=__webpack_require__("./src/components/Menu/MenuItem.tsx"),Button=__webpack_require__("./src/components/Button/index.tsx"),createBorderRadiusSwapper=__webpack_require__("./.storybook/createBorderRadiusSwapper.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const STORY_ITEMS=[{id:"1",label:"Option one",value:1},{id:"2",label:"Option two",value:2},{id:"3",label:"Option three",value:3},{id:"4",label:"Option four",value:4,disabled:!0},{id:"5",label:"Option five with long item",value:5},{id:"6",label:"Option six",value:6},{id:"7",label:"Option seven",value:7}],WrapperVertical=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuSimpletemplate__WrapperVertical",componentId:"sc-lhqf5w-0"})(["display:flex;flex-direction:column;justify-content:flex-start;align-items:center;gap:20px;"]),Desc=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuSimpletemplate__Desc",componentId:"sc-lhqf5w-1"})(["font-family:'VTB Group UI';color:var(--admiral-color-Neutral_Neutral90,",");font-size:16px;line-height:24px;"],(p=>p.theme.color["Neutral/Neutral 90"])),handleVisibilityChangeUnControlledState=isVisible=>{console.log("onVisibilityChange with uncontrolled state"),isVisible?console.log("Menu opened"):console.log("Menu closed")},DropMenuSimpleTemplate=({themeBorderKind,CSSCustomProps,...props})=>{const[selected,setSelected]=react.useState(void 0),model=react.useMemo((()=>STORY_ITEMS.map((item=>({id:item.id,render:options=>(0,react.createElement)(MenuItem.D,{dimension:props.dimension,...options,key:item.id},item.label)})))),[props.dimension]);return(0,jsx_runtime.jsx)(styled_components_browser_esm.NP,{theme:(0,createBorderRadiusSwapper.j)(themeBorderKind,CSSCustomProps),children:(0,jsx_runtime.jsxs)(WrapperVertical,{children:[(0,jsx_runtime.jsxs)(Desc,{children:["Неконтроллируемое состояние видимости меню:",(0,jsx_runtime.jsx)("br",{}),"- isVisible не передается в DropMenu, ",(0,jsx_runtime.jsx)("br",{}),"- обработчик onVisibilityChange выполняется из DropMenu",(0,jsx_runtime.jsx)("br",{}),"- для открытия/закрытия меню при клике на кнопке используется обработчик handleClick из DropMenu",(0,jsx_runtime.jsx)("br",{}),"По умолчанию DropMenu открывает/закрывает выпадающий список при нажатии на переданный компонент, а также закрывает выпадающий список при выборе опции"]}),(0,jsx_runtime.jsx)(DropMenu.f,{...props,items:model,onSelectItem:id=>{console.log(`selected: ${id}`),setSelected(id)},onVisibilityChange:handleVisibilityChangeUnControlledState,selected,dropContainerClassName:"dropContainerClass",renderContentProp:({buttonRef,handleKeyDown,handleClick,statusIcon,disabled})=>(0,jsx_runtime.jsxs)(Button.$n,{ref:buttonRef,loading:props.loading,disabled,onKeyDown:handleKeyDown,onClick:handleClick,dimension:props.dimension,children:["Нажми",statusIcon]})})]})})};DropMenuSimpleTemplate.displayName="DropMenuSimpleTemplate";try{DropMenuSimpleTemplate.displayName="DropMenuSimpleTemplate",DropMenuSimpleTemplate.__docgenInfo={description:"",displayName:"DropMenuSimpleTemplate",props:{dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},loading:{defaultValue:null,description:"Состояние загрузки",name:"loading",required:!1,type:{name:"boolean"}},items:{defaultValue:null,description:"Опции выпадающего списка",name:"items",required:!0,type:{name:"MenuModelItemProps[]"}},selected:{defaultValue:null,description:"Выбранная опция",name:"selected",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте onSelectItem\n\nКолбек на изменение выбранной опции",name:"onChange",required:!1,type:{name:"((id: string) => void)"}},onOpen:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на открытие меню",name:"onOpen",required:!1,type:{name:"(() => void)"}},onClose:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на закрытие меню",name:"onClose",required:!1,type:{name:"(() => void)"}},disabled:{defaultValue:null,description:"Отключение компонента",name:"disabled",required:!1,type:{name:"boolean"}},alignMenuRef:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.\nВзамен используйте параметр targetElement.\n\nКомпонент, относительно которого необходимо выравнивать выпадающее меню",name:"alignMenuRef",required:!1,type:{name:"RefObject<HTMLElement>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого позиционируется выпадающее меню",name:"targetElement",required:!1,type:{name:"Element | null"}},renderContentProp:{defaultValue:null,description:"Компонент, для которого необходимо Menu",name:"renderContentProp",required:!0,type:{name:"(options: RenderContentProps) => ReactNode"}},isVisible:{defaultValue:null,description:"Видимость выпадающего меню",name:"isVisible",required:!1,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости меню",name:"onVisibilityChange",required:!1,type:{name:"((isVisible: boolean) => void)"}},active:{defaultValue:null,description:"Активная секция Menu",name:"active",required:!1,type:{name:"string"}},onActivateItem:{defaultValue:null,description:"Обработчик активации (hover) item в меню",name:"onActivateItem",required:!1,type:{name:"((id?: string) => void)"}},onSelectItem:{defaultValue:null,description:"Обработчик выбора item в меню",name:"onSelectItem",required:!1,type:{name:"((id: string) => void)"}},disableSelectedOptionHighlight:{defaultValue:null,description:"Возможность отключить подсветку выбранной опции\n(например, при множественном выборе, когда у каждой опции есть Checkbox)",name:"disableSelectedOptionHighlight",required:!1,type:{name:"boolean"}},renderTopPanel:{defaultValue:null,description:"Позволяет добавить панель сверху над выпадающим списком",name:"renderTopPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},renderBottomPanel:{defaultValue:null,description:"Позволяет добавить панель внизу под выпадающим списком",name:"renderBottomPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},onForwardCycleApprove:{defaultValue:null,description:"",name:"onForwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},onBackwardCycleApprove:{defaultValue:null,description:"",name:"onBackwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},multiSelection:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 4.9.1, будет удалено в 10.x.x версии.\nВзамен используйте disableSelectedOptionHighlight\n\nВозможность множественного выбора (опции с Checkbox)",name:"multiSelection",required:!1,type:{name:"boolean"}},onClickOutside:{defaultValue:null,description:"Позволяет обработать событие при клике вне компонента",name:"onClickOutside",required:!1,type:{name:"((e: Event) => void)"}},alignSelf:{defaultValue:null,description:"Выравнивание выпадающего меню относительно компонента https://developer.mozilla.org/en-US/docs/Web/CSS/align-self",name:"alignSelf",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"auto"'},{value:'"flex-start"'},{value:'"flex-end"'},{value:'"baseline"'},{value:'"stretch"'}]}},menuWidth:{defaultValue:null,description:"Ширина меню",name:"menuWidth",required:!1,type:{name:"string"}},menuMaxHeight:{defaultValue:null,description:"Задает максимальную высоту меню",name:"menuMaxHeight",required:!1,type:{name:"string | number"}},dropContainerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css",name:"dropContainerCssMixin",required:!1,type:{name:"RuleSet<object>"}},dropContainerClassName:{defaultValue:null,description:"Позволяет добавлять класс на контейнер выпадающего меню",name:"dropContainerClassName",required:!1,type:{name:"string"}},dropContainerStyle:{defaultValue:null,description:"Позволяет добавлять стили на контейнер выпадающего меню",name:"dropContainerStyle",required:!1,type:{name:"CSSProperties"}},themeBorderKind:{defaultValue:null,description:"",name:"themeBorderKind",required:!1,type:{name:"enum",value:[{value:'"Border radius 0"'},{value:'"Border radius 2"'},{value:'"Border radius 4"'},{value:'"Border radius 6"'},{value:'"Border radius 8"'},{value:'"Border radius 10"'}]}},CSSCustomProps:{defaultValue:null,description:"",name:"CSSCustomProps",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/DropMenu/stories/DropMenuSimple.template.tsx#DropMenuSimpleTemplate"]={docgenInfo:DropMenuSimpleTemplate.__docgenInfo,name:"DropMenuSimpleTemplate",path:"src/components/DropMenu/stories/DropMenuSimple.template.tsx#DropMenuSimpleTemplate"})}catch(__react_docgen_typescript_loader_error){}var typography=__webpack_require__("./src/components/Typography/typography.ts"),CategoryMenuItem=__webpack_require__("./src/components/Menu/CategoryMenuItem.tsx"),CardSolid=__webpack_require__("./node_modules/@admiral-ds/icons/build/finance/CardSolid.svg");const DropMenuCategory_template_WrapperVertical=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuCategorytemplate__WrapperVertical",componentId:"sc-wistvr-0"})(["display:flex;flex-direction:column;justify-content:flex-start;align-items:center;gap:20px;"]),DropMenuCategory_template_Desc=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuCategorytemplate__Desc",componentId:"sc-wistvr-1"})(["font-family:'VTB Group UI';color:var(--admiral-color-Neutral_Neutral90,",");font-size:16px;line-height:24px;"],(p=>p.theme.color["Neutral/Neutral 90"])),DropMenuCategory_template_handleVisibilityChangeUnControlledState=isVisible=>{console.log("onVisibilityChange with uncontrolled state"),isVisible?console.log("Menu opened"):console.log("Menu closed")},StyledAdditionalText=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuCategorytemplate__StyledAdditionalText",componentId:"sc-wistvr-2"})([""," color:var(--admiral-color-Neutral_Neutral50,",");pointer-events:none;"],typography.Il["Body/Body 2 Long"],(p=>p.theme.color["Neutral/Neutral 50"])),StyledMenuItem=(0,styled_components_browser_esm.Ay)(MenuItem.D).withConfig({displayName:"DropMenuCategorytemplate__StyledMenuItem",componentId:"sc-wistvr-3"})(["padding:0;"]),InnerContainer=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuCategorytemplate__InnerContainer",componentId:"sc-wistvr-4"})(["display:flex;width:100%;padding:6px 8px;margin:0 8px 0 24px;border-bottom:1px solid var(--admiral-color-Neutral_Neutral20,",");flex-direction:column;align-items:flex-start;"],(p=>p.theme.color["Neutral/Neutral 20"])),StyledDropMenu=(0,styled_components_browser_esm.Ay)(DropMenu.f).withConfig({displayName:"DropMenuCategorytemplate__StyledDropMenu",componentId:"sc-wistvr-5"})(["min-width:400px;"]),CATEGORIES=[{name:"Категория 1",id:"1",content:[{id:"2",label:"Номер Карты /****45",value:1},{id:"3",label:"Номер Карты /****75",value:2},{id:"4",label:"Номер Карты /****22",value:3},{id:"5",label:"Номер Карты /****33",value:4}]},{name:"Категория 2",id:"9",content:[{id:"10",label:"Номер Карты /****21",value:5},{id:"11",label:"Номер Карты /****35",value:6},{id:"12",label:"Номер Карты /****39",value:7},{id:"13",label:"Номер Карты /****41",value:8}]}],DropMenuCategoryTemplate=props=>{const model=react.useMemo((()=>CATEGORIES.reduce(((acc,item)=>(acc.push({id:item.id,render:options=>(0,jsx_runtime.jsx)(CategoryMenuItem.h,{dimension:props.dimension,...options,children:item.name},item.id)}),acc.concat(item.content.map((subitem=>({id:subitem.id,render:options=>(0,jsx_runtime.jsx)(StyledMenuItem,{dimension:props.dimension,...options,children:(0,jsx_runtime.jsxs)(InnerContainer,{children:[(0,jsx_runtime.jsxs)("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-between"},children:[subitem.label," ",(0,jsx_runtime.jsx)(CardSolid.h,{width:24,height:24})]}),(0,jsx_runtime.jsx)(StyledAdditionalText,{children:"Дополнительный текст"})]})},subitem.id)})))))),[])),[props.dimension]),[selected,setSelected]=react.useState(""),[active,setActive]=react.useState("");return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsxs)(DropMenuCategory_template_WrapperVertical,{children:[(0,jsx_runtime.jsxs)(DropMenuCategory_template_Desc,{children:["Неконтроллируемое состояние видимости меню:",(0,jsx_runtime.jsx)("br",{}),"- isVisible не передается в DropMenu; ",(0,jsx_runtime.jsx)("br",{}),"- обработчик onVisibilityChange выполняется из DropMenu;",(0,jsx_runtime.jsx)("br",{}),"- для открытия/закрытия меню при клике на кнопке используется обработчик handleClick из DropMenu.",(0,jsx_runtime.jsx)("br",{}),"По умолчанию DropMenu открывает/закрывает выпадающий список при нажатии на переданный компонент, а также закрывает выпадающий список при выборе опции."]}),(0,jsx_runtime.jsx)(StyledDropMenu,{...props,items:model,onSelectItem:id=>{console.log(`selected: ${id}`),setSelected(id)},onVisibilityChange:DropMenuCategory_template_handleVisibilityChangeUnControlledState,selected,active,onActivateItem:setActive,renderContentProp:({buttonRef,handleKeyDown,handleClick,statusIcon,disabled})=>(0,jsx_runtime.jsxs)(Button.$n,{ref:buttonRef,loading:props.loading,disabled,onKeyDown:handleKeyDown,onClick:handleClick,dimension:props.dimension,children:["Нажми",statusIcon]})})]})})};try{DropMenuCategoryTemplate.displayName="DropMenuCategoryTemplate",DropMenuCategoryTemplate.__docgenInfo={description:"",displayName:"DropMenuCategoryTemplate",props:{dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},loading:{defaultValue:null,description:"Состояние загрузки",name:"loading",required:!1,type:{name:"boolean"}},items:{defaultValue:null,description:"Опции выпадающего списка",name:"items",required:!0,type:{name:"MenuModelItemProps[]"}},selected:{defaultValue:null,description:"Выбранная опция",name:"selected",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте onSelectItem\n\nКолбек на изменение выбранной опции",name:"onChange",required:!1,type:{name:"((id: string) => void)"}},onOpen:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на открытие меню",name:"onOpen",required:!1,type:{name:"(() => void)"}},onClose:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на закрытие меню",name:"onClose",required:!1,type:{name:"(() => void)"}},disabled:{defaultValue:null,description:"Отключение компонента",name:"disabled",required:!1,type:{name:"boolean"}},alignMenuRef:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.\nВзамен используйте параметр targetElement.\n\nКомпонент, относительно которого необходимо выравнивать выпадающее меню",name:"alignMenuRef",required:!1,type:{name:"RefObject<HTMLElement>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого позиционируется выпадающее меню",name:"targetElement",required:!1,type:{name:"Element | null"}},renderContentProp:{defaultValue:null,description:"Компонент, для которого необходимо Menu",name:"renderContentProp",required:!0,type:{name:"(options: RenderContentProps) => ReactNode"}},isVisible:{defaultValue:null,description:"Видимость выпадающего меню",name:"isVisible",required:!1,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости меню",name:"onVisibilityChange",required:!1,type:{name:"((isVisible: boolean) => void)"}},active:{defaultValue:null,description:"Активная секция Menu",name:"active",required:!1,type:{name:"string"}},onActivateItem:{defaultValue:null,description:"Обработчик активации (hover) item в меню",name:"onActivateItem",required:!1,type:{name:"((id?: string) => void)"}},onSelectItem:{defaultValue:null,description:"Обработчик выбора item в меню",name:"onSelectItem",required:!1,type:{name:"((id: string) => void)"}},disableSelectedOptionHighlight:{defaultValue:null,description:"Возможность отключить подсветку выбранной опции\n(например, при множественном выборе, когда у каждой опции есть Checkbox)",name:"disableSelectedOptionHighlight",required:!1,type:{name:"boolean"}},renderTopPanel:{defaultValue:null,description:"Позволяет добавить панель сверху над выпадающим списком",name:"renderTopPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},renderBottomPanel:{defaultValue:null,description:"Позволяет добавить панель внизу под выпадающим списком",name:"renderBottomPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},onForwardCycleApprove:{defaultValue:null,description:"",name:"onForwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},onBackwardCycleApprove:{defaultValue:null,description:"",name:"onBackwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},multiSelection:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 4.9.1, будет удалено в 10.x.x версии.\nВзамен используйте disableSelectedOptionHighlight\n\nВозможность множественного выбора (опции с Checkbox)",name:"multiSelection",required:!1,type:{name:"boolean"}},onClickOutside:{defaultValue:null,description:"Позволяет обработать событие при клике вне компонента",name:"onClickOutside",required:!1,type:{name:"((e: Event) => void)"}},alignSelf:{defaultValue:null,description:"Выравнивание выпадающего меню относительно компонента https://developer.mozilla.org/en-US/docs/Web/CSS/align-self",name:"alignSelf",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"auto"'},{value:'"flex-start"'},{value:'"flex-end"'},{value:'"baseline"'},{value:'"stretch"'}]}},menuWidth:{defaultValue:null,description:"Ширина меню",name:"menuWidth",required:!1,type:{name:"string"}},menuMaxHeight:{defaultValue:null,description:"Задает максимальную высоту меню",name:"menuMaxHeight",required:!1,type:{name:"string | number"}},dropContainerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css",name:"dropContainerCssMixin",required:!1,type:{name:"RuleSet<object>"}},dropContainerClassName:{defaultValue:null,description:"Позволяет добавлять класс на контейнер выпадающего меню",name:"dropContainerClassName",required:!1,type:{name:"string"}},dropContainerStyle:{defaultValue:null,description:"Позволяет добавлять стили на контейнер выпадающего меню",name:"dropContainerStyle",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/DropMenu/stories/DropMenuCategory.template.tsx#DropMenuCategoryTemplate"]={docgenInfo:DropMenuCategoryTemplate.__docgenInfo,name:"DropMenuCategoryTemplate",path:"src/components/DropMenu/stories/DropMenuCategory.template.tsx#DropMenuCategoryTemplate"})}catch(__react_docgen_typescript_loader_error){}var TooltipHOC=__webpack_require__("./src/components/TooltipHOC/index.tsx");const DropMenuTooltip_template_STORY_ITEMS=[{id:"1",label:"Option one",value:1},{id:"2",label:"Option two",value:2},{id:"3",label:"Привет, пупсик! Хотел тебе сказать, что ты андроид.",value:3},{id:"4",label:"Option four",value:4},{id:"5",label:"Option five",value:5},{id:"6",label:"Option six",value:7},{id:"7",label:"Option seven",value:6}],DropMenuTooltip_template_WrapperVertical=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuTooltiptemplate__WrapperVertical",componentId:"sc-fbcyyr-0"})(["display:flex;flex-direction:column;justify-content:flex-start;align-items:center;gap:20px;"]),DropMenuTooltip_template_Desc=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuTooltiptemplate__Desc",componentId:"sc-fbcyyr-1"})(["font-family:'VTB Group UI';color:var(--admiral-color-Neutral_Neutral90,",");font-size:16px;line-height:24px;"],(p=>p.theme.color["Neutral/Neutral 90"])),MenuItemWithTooltip=(0,TooltipHOC.K)(MenuItem.D),DropMenuTooltipTemplate=props=>{const[selected,setSelected]=react.useState(void 0),[isVisible,setIsVisible]=react.useState(!1),model=react.useMemo((()=>DropMenuTooltip_template_STORY_ITEMS.map((item=>{const tooltip=item.label.length>20;return{id:item.id,render:options=>tooltip?(0,react.createElement)(MenuItemWithTooltip,{renderContent:()=>item.label,dimension:props.dimension,...options,key:item.id},item.label.slice(0,17)+"..."):(0,react.createElement)(MenuItem.D,{dimension:props.dimension,...options,key:item.id},item.label)}}))),[props.dimension]),handleVisibilityChange=isVisible=>{(isVisible=>{console.log("onVisibilityChange with controlled state"),isVisible?console.log("Menu opened"):console.log("Menu closed")})(isVisible),setIsVisible(isVisible)},handleButtonClick=e=>{handleVisibilityChange(!isVisible),props.onClick?.(e)};return(0,jsx_runtime.jsxs)(DropMenuTooltip_template_WrapperVertical,{children:[(0,jsx_runtime.jsxs)(DropMenuTooltip_template_Desc,{children:["Состояние видимости меню полностью контроллируется вне DropMenu:",(0,jsx_runtime.jsx)("br",{}),"- используется кастомный обработчик клика по кнопке (handleButtonClick) для открытия/закрытия выпадающего списка;",(0,jsx_runtime.jsx)("br",{}),"- после выбора опции из выпадающего списка (handleSelectItem) происходит закрытие меню;",(0,jsx_runtime.jsx)("br",{}),"- используется кастомный обработчик при клике вне области выпадающего списка (handleClickOutside)."]}),(0,jsx_runtime.jsx)(DropMenu.f,{...props,items:model,isVisible,onVisibilityChange:handleVisibilityChange,onSelectItem:id=>{console.log(`Option ${id} clicked`),setSelected(id),handleVisibilityChange(!1)},onClickOutside:()=>{console.log("handleClickOutside from stories"),handleVisibilityChange(!1)},selected,renderContentProp:({buttonRef,handleKeyDown,statusIcon,disabled})=>(0,jsx_runtime.jsxs)(Button.$n,{ref:buttonRef,loading:props.loading,disabled,onKeyDown:handleKeyDown,onClick:handleButtonClick,dimension:props.dimension,children:["Нажми",statusIcon]})})]})};DropMenuTooltipTemplate.displayName="DropMenuTooltipTemplate";try{DropMenuTooltipTemplate.displayName="DropMenuTooltipTemplate",DropMenuTooltipTemplate.__docgenInfo={description:"",displayName:"DropMenuTooltipTemplate",props:{dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},loading:{defaultValue:null,description:"Состояние загрузки",name:"loading",required:!1,type:{name:"boolean"}},items:{defaultValue:null,description:"Опции выпадающего списка",name:"items",required:!0,type:{name:"MenuModelItemProps[]"}},selected:{defaultValue:null,description:"Выбранная опция",name:"selected",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте onSelectItem\n\nКолбек на изменение выбранной опции",name:"onChange",required:!1,type:{name:"((id: string) => void)"}},onOpen:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на открытие меню",name:"onOpen",required:!1,type:{name:"(() => void)"}},onClose:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на закрытие меню",name:"onClose",required:!1,type:{name:"(() => void)"}},disabled:{defaultValue:null,description:"Отключение компонента",name:"disabled",required:!1,type:{name:"boolean"}},alignMenuRef:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.\nВзамен используйте параметр targetElement.\n\nКомпонент, относительно которого необходимо выравнивать выпадающее меню",name:"alignMenuRef",required:!1,type:{name:"RefObject<HTMLElement>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого позиционируется выпадающее меню",name:"targetElement",required:!1,type:{name:"Element | null"}},renderContentProp:{defaultValue:null,description:"Компонент, для которого необходимо Menu",name:"renderContentProp",required:!0,type:{name:"(options: RenderContentProps) => ReactNode"}},isVisible:{defaultValue:null,description:"Видимость выпадающего меню",name:"isVisible",required:!1,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости меню",name:"onVisibilityChange",required:!1,type:{name:"((isVisible: boolean) => void)"}},active:{defaultValue:null,description:"Активная секция Menu",name:"active",required:!1,type:{name:"string"}},onActivateItem:{defaultValue:null,description:"Обработчик активации (hover) item в меню",name:"onActivateItem",required:!1,type:{name:"((id?: string) => void)"}},onSelectItem:{defaultValue:null,description:"Обработчик выбора item в меню",name:"onSelectItem",required:!1,type:{name:"((id: string) => void)"}},disableSelectedOptionHighlight:{defaultValue:null,description:"Возможность отключить подсветку выбранной опции\n(например, при множественном выборе, когда у каждой опции есть Checkbox)",name:"disableSelectedOptionHighlight",required:!1,type:{name:"boolean"}},renderTopPanel:{defaultValue:null,description:"Позволяет добавить панель сверху над выпадающим списком",name:"renderTopPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},renderBottomPanel:{defaultValue:null,description:"Позволяет добавить панель внизу под выпадающим списком",name:"renderBottomPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},onForwardCycleApprove:{defaultValue:null,description:"",name:"onForwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},onBackwardCycleApprove:{defaultValue:null,description:"",name:"onBackwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},multiSelection:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 4.9.1, будет удалено в 10.x.x версии.\nВзамен используйте disableSelectedOptionHighlight\n\nВозможность множественного выбора (опции с Checkbox)",name:"multiSelection",required:!1,type:{name:"boolean"}},onClickOutside:{defaultValue:null,description:"Позволяет обработать событие при клике вне компонента",name:"onClickOutside",required:!1,type:{name:"((e: Event) => void)"}},alignSelf:{defaultValue:null,description:"Выравнивание выпадающего меню относительно компонента https://developer.mozilla.org/en-US/docs/Web/CSS/align-self",name:"alignSelf",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"auto"'},{value:'"flex-start"'},{value:'"flex-end"'},{value:'"baseline"'},{value:'"stretch"'}]}},menuWidth:{defaultValue:null,description:"Ширина меню",name:"menuWidth",required:!1,type:{name:"string"}},menuMaxHeight:{defaultValue:null,description:"Задает максимальную высоту меню",name:"menuMaxHeight",required:!1,type:{name:"string | number"}},dropContainerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css",name:"dropContainerCssMixin",required:!1,type:{name:"RuleSet<object>"}},dropContainerClassName:{defaultValue:null,description:"Позволяет добавлять класс на контейнер выпадающего меню",name:"dropContainerClassName",required:!1,type:{name:"string"}},dropContainerStyle:{defaultValue:null,description:"Позволяет добавлять стили на контейнер выпадающего меню",name:"dropContainerStyle",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/DropMenu/stories/DropMenuTooltip.template.tsx#DropMenuTooltipTemplate"]={docgenInfo:DropMenuTooltipTemplate.__docgenInfo,name:"DropMenuTooltipTemplate",path:"src/components/DropMenu/stories/DropMenuTooltip.template.tsx#DropMenuTooltipTemplate"})}catch(__react_docgen_typescript_loader_error){}var MenuItemWithCheckbox=__webpack_require__("./src/components/Menu/MenuItemWithCheckbox.tsx");const DropMenuCheckbox_template_STORY_ITEMS=[{id:"1",label:"Option one"},{id:"2",label:"Option two"},{id:"3",label:"Option three"},{id:"4",label:"Option four"},{id:"5",label:"Option five"},{id:"6",label:"Option six"},{id:"7",label:"Option seven"}],DropMenuCheckbox_template_WrapperVertical=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuCheckboxtemplate__WrapperVertical",componentId:"sc-1iupyjl-0"})(["display:flex;flex-direction:column;justify-content:flex-start;align-items:center;gap:20px;"]),DropMenuCheckbox_template_Desc=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuCheckboxtemplate__Desc",componentId:"sc-1iupyjl-1"})(["font-family:'VTB Group UI';color:var(--admiral-color-Neutral_Neutral90,",");font-size:16px;line-height:24px;"],(p=>p.theme.color["Neutral/Neutral 90"])),DropMenuCheckboxTemplate=props=>{const[innerState,setInnerState]=react.useState(DropMenuCheckbox_template_STORY_ITEMS.map((item=>item))),[activeOption,setActiveOption]=react.useState(innerState[0].id),[selectedOption,setSelectedOption]=react.useState(),[isVisible,setIsVisible]=react.useState(!1),model=react.useMemo((()=>innerState.map((item=>({id:item.id,render:options=>(0,jsx_runtime.jsx)(MenuItemWithCheckbox.I,{id:item.id,dimension:props.dimension,checked:!!item.checked,...options,children:item.label},item.id)})))),[innerState,activeOption,props.dimension]),handleVisibilityChange=isVisible=>{(isVisible=>{console.log("onVisibilityChange with controlled state"),isVisible?console.log("Menu opened"):console.log("Menu closed")})(isVisible),setIsVisible(isVisible)},handleButtonClick=e=>{handleVisibilityChange(!isVisible),props.onClick?.(e)};return(0,jsx_runtime.jsxs)(DropMenuCheckbox_template_WrapperVertical,{children:[(0,jsx_runtime.jsxs)(DropMenuCheckbox_template_Desc,{children:["Состояние видимости меню полностью контроллируется вне DropMenu:",(0,jsx_runtime.jsx)("br",{}),"- используется кастомный обработчик клика по кнопке (handleButtonClick) для открытия/закрытия выпадающего списка;",(0,jsx_runtime.jsx)("br",{}),"- после выбора опции из выпадающего списка (handleSelectItem) происходит закрытие меню;",(0,jsx_runtime.jsx)("br",{}),"- используется кастомный обработчик при клике вне области выпадающего списка (handleClickOutside)."]}),(0,jsx_runtime.jsx)(DropMenu.f,{...props,items:model,active:activeOption,onActivateItem:id=>{setActiveOption(id)},selected:selectedOption,onSelectItem:id=>{console.log(`Option ${id} clicked`);const updatedInnerState=[...innerState],itemToUpdate=updatedInnerState.find((item=>item.id===id));itemToUpdate&&(itemToUpdate.checked=!itemToUpdate.checked),setInnerState(updatedInnerState),setSelectedOption(void 0)},isVisible,onVisibilityChange:handleVisibilityChange,onClickOutside:()=>{console.log("handleClickOutside from stories"),handleVisibilityChange(!1)},disableSelectedOptionHighlight:!0,renderContentProp:({buttonRef,handleKeyDown,statusIcon,disabled})=>(0,jsx_runtime.jsxs)(Button.$n,{ref:buttonRef,loading:props.loading,disabled,onKeyDown:handleKeyDown,onClick:handleButtonClick,dimension:props.dimension,children:["Нажми",statusIcon]})})]})};DropMenuCheckboxTemplate.displayName="DropMenuCheckboxTemplate";try{DropMenuCheckboxTemplate.displayName="DropMenuCheckboxTemplate",DropMenuCheckboxTemplate.__docgenInfo={description:"",displayName:"DropMenuCheckboxTemplate",props:{dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},loading:{defaultValue:null,description:"Состояние загрузки",name:"loading",required:!1,type:{name:"boolean"}},items:{defaultValue:null,description:"Опции выпадающего списка",name:"items",required:!0,type:{name:"MenuModelItemProps[]"}},selected:{defaultValue:null,description:"Выбранная опция",name:"selected",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте onSelectItem\n\nКолбек на изменение выбранной опции",name:"onChange",required:!1,type:{name:"((id: string) => void)"}},onOpen:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на открытие меню",name:"onOpen",required:!1,type:{name:"(() => void)"}},onClose:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на закрытие меню",name:"onClose",required:!1,type:{name:"(() => void)"}},disabled:{defaultValue:null,description:"Отключение компонента",name:"disabled",required:!1,type:{name:"boolean"}},alignMenuRef:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.\nВзамен используйте параметр targetElement.\n\nКомпонент, относительно которого необходимо выравнивать выпадающее меню",name:"alignMenuRef",required:!1,type:{name:"RefObject<HTMLElement>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого позиционируется выпадающее меню",name:"targetElement",required:!1,type:{name:"Element | null"}},renderContentProp:{defaultValue:null,description:"Компонент, для которого необходимо Menu",name:"renderContentProp",required:!0,type:{name:"(options: RenderContentProps) => ReactNode"}},isVisible:{defaultValue:null,description:"Видимость выпадающего меню",name:"isVisible",required:!1,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости меню",name:"onVisibilityChange",required:!1,type:{name:"((isVisible: boolean) => void)"}},active:{defaultValue:null,description:"Активная секция Menu",name:"active",required:!1,type:{name:"string"}},onActivateItem:{defaultValue:null,description:"Обработчик активации (hover) item в меню",name:"onActivateItem",required:!1,type:{name:"((id?: string) => void)"}},onSelectItem:{defaultValue:null,description:"Обработчик выбора item в меню",name:"onSelectItem",required:!1,type:{name:"((id: string) => void)"}},disableSelectedOptionHighlight:{defaultValue:null,description:"Возможность отключить подсветку выбранной опции\n(например, при множественном выборе, когда у каждой опции есть Checkbox)",name:"disableSelectedOptionHighlight",required:!1,type:{name:"boolean"}},renderTopPanel:{defaultValue:null,description:"Позволяет добавить панель сверху над выпадающим списком",name:"renderTopPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},renderBottomPanel:{defaultValue:null,description:"Позволяет добавить панель внизу под выпадающим списком",name:"renderBottomPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},onForwardCycleApprove:{defaultValue:null,description:"",name:"onForwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},onBackwardCycleApprove:{defaultValue:null,description:"",name:"onBackwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},multiSelection:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 4.9.1, будет удалено в 10.x.x версии.\nВзамен используйте disableSelectedOptionHighlight\n\nВозможность множественного выбора (опции с Checkbox)",name:"multiSelection",required:!1,type:{name:"boolean"}},onClickOutside:{defaultValue:null,description:"Позволяет обработать событие при клике вне компонента",name:"onClickOutside",required:!1,type:{name:"((e: Event) => void)"}},alignSelf:{defaultValue:null,description:"Выравнивание выпадающего меню относительно компонента https://developer.mozilla.org/en-US/docs/Web/CSS/align-self",name:"alignSelf",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"auto"'},{value:'"flex-start"'},{value:'"flex-end"'},{value:'"baseline"'},{value:'"stretch"'}]}},menuWidth:{defaultValue:null,description:"Ширина меню",name:"menuWidth",required:!1,type:{name:"string"}},menuMaxHeight:{defaultValue:null,description:"Задает максимальную высоту меню",name:"menuMaxHeight",required:!1,type:{name:"string | number"}},dropContainerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css",name:"dropContainerCssMixin",required:!1,type:{name:"RuleSet<object>"}},dropContainerClassName:{defaultValue:null,description:"Позволяет добавлять класс на контейнер выпадающего меню",name:"dropContainerClassName",required:!1,type:{name:"string"}},dropContainerStyle:{defaultValue:null,description:"Позволяет добавлять стили на контейнер выпадающего меню",name:"dropContainerStyle",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/DropMenu/stories/DropMenuCheckbox.template.tsx#DropMenuCheckboxTemplate"]={docgenInfo:DropMenuCheckboxTemplate.__docgenInfo,name:"DropMenuCheckboxTemplate",path:"src/components/DropMenu/stories/DropMenuCheckbox.template.tsx#DropMenuCheckboxTemplate"})}catch(__react_docgen_typescript_loader_error){}var RadioButton=__webpack_require__("./src/components/RadioButton/index.tsx");const DropMenuRadiobutton_template_STORY_ITEMS=[{id:"1",label:"Option one",value:1},{id:"2",label:"Option two",value:2},{id:"3",label:"Option three",value:3},{id:"4",label:"Option four",value:4,disabled:!0},{id:"5",label:"Option five with very very long text",value:5},{id:"6",label:"Option six",value:6},{id:"7",label:"Option seven",value:7}],DropMenuRadiobutton_template_WrapperVertical=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuRadiobuttontemplate__WrapperVertical",componentId:"sc-ncbw80-0"})(["display:flex;flex-direction:column;justify-content:flex-start;align-items:center;gap:20px;"]),DropMenuRadiobutton_template_Desc=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenuRadiobuttontemplate__Desc",componentId:"sc-ncbw80-1"})(["font-family:'VTB Group UI';color:var(--admiral-color-Neutral_Neutral90,",");font-size:16px;line-height:24px;"],(p=>p.theme.color["Neutral/Neutral 90"])),DropMenuRadiobutton_template_handleVisibilityChangeUnControlledState=isVisible=>{console.log("onVisibilityChange with uncontrolled state"),isVisible?console.log("Menu opened"):console.log("Menu closed")},DropMenuRadiobuttonTemplate=props=>{const[selected,setSelected]=react.useState(void 0),[checkedState,setCheckedState]=react.useState(DropMenuRadiobutton_template_STORY_ITEMS.map((item=>({id:item.id,checked:!1})))),model=react.useMemo((()=>DropMenuRadiobutton_template_STORY_ITEMS.map(((item,index)=>({id:item.id,render:options=>(0,react.createElement)(MenuItem.D,{dimension:props.dimension,...options,key:item.id},(0,jsx_runtime.jsx)(RadioButton.a,{dimension:"s"!==props.dimension?"m":props.dimension,disabled:item.disabled,checked:checkedState[index].checked,onChange:()=>!1,children:item.label},item.id)),disabled:item.disabled})))),[props.dimension,checkedState]);return(0,jsx_runtime.jsxs)(DropMenuRadiobutton_template_WrapperVertical,{children:[(0,jsx_runtime.jsxs)(DropMenuRadiobutton_template_Desc,{children:["Неконтроллируемое состояние видимости меню:",(0,jsx_runtime.jsx)("br",{}),"- isVisible не передается в DropMenu; ",(0,jsx_runtime.jsx)("br",{}),"- обработчик onVisibilityChange выполняется из DropMenu;",(0,jsx_runtime.jsx)("br",{}),"- для открытия/закрытия меню при клике на кнопке используется обработчик handleClick из DropMenu.",(0,jsx_runtime.jsx)("br",{}),"По умолчанию DropMenu открывает/закрывает выпадающий список при нажатии на переданный компонент, а также закрывает выпадающий список при выборе опции."]}),(0,jsx_runtime.jsx)(DropMenu.f,{...props,items:model,onSelectItem:id=>{console.log(`selected: ${id}`);const newCheckedState=checkedState.map((item=>({...item,checked:item.id===id||item.id===selected?!item.checked:item.checked})));setCheckedState(newCheckedState),setSelected(id)},onVisibilityChange:DropMenuRadiobutton_template_handleVisibilityChangeUnControlledState,selected,renderContentProp:({buttonRef,handleKeyDown,handleClick,statusIcon,disabled})=>(0,jsx_runtime.jsxs)(Button.$n,{ref:buttonRef,loading:props.loading,disabled,onKeyDown:handleKeyDown,onClick:handleClick,dimension:props.dimension,children:["Нажми",statusIcon]})})]})};DropMenuRadiobuttonTemplate.displayName="DropMenuRadiobuttonTemplate";try{DropMenuRadiobuttonTemplate.displayName="DropMenuRadiobuttonTemplate",DropMenuRadiobuttonTemplate.__docgenInfo={description:"",displayName:"DropMenuRadiobuttonTemplate",props:{dimension:{defaultValue:null,description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},loading:{defaultValue:null,description:"Состояние загрузки",name:"loading",required:!1,type:{name:"boolean"}},items:{defaultValue:null,description:"Опции выпадающего списка",name:"items",required:!0,type:{name:"MenuModelItemProps[]"}},selected:{defaultValue:null,description:"Выбранная опция",name:"selected",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте onSelectItem\n\nКолбек на изменение выбранной опции",name:"onChange",required:!1,type:{name:"((id: string) => void)"}},onOpen:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на открытие меню",name:"onOpen",required:!1,type:{name:"(() => void)"}},onClose:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на закрытие меню",name:"onClose",required:!1,type:{name:"(() => void)"}},disabled:{defaultValue:null,description:"Отключение компонента",name:"disabled",required:!1,type:{name:"boolean"}},alignMenuRef:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.\nВзамен используйте параметр targetElement.\n\nКомпонент, относительно которого необходимо выравнивать выпадающее меню",name:"alignMenuRef",required:!1,type:{name:"RefObject<HTMLElement>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого позиционируется выпадающее меню",name:"targetElement",required:!1,type:{name:"Element | null"}},renderContentProp:{defaultValue:null,description:"Компонент, для которого необходимо Menu",name:"renderContentProp",required:!0,type:{name:"(options: RenderContentProps) => ReactNode"}},isVisible:{defaultValue:null,description:"Видимость выпадающего меню",name:"isVisible",required:!1,type:{name:"boolean"}},onVisibilityChange:{defaultValue:null,description:"Колбек на изменение видимости меню",name:"onVisibilityChange",required:!1,type:{name:"((isVisible: boolean) => void)"}},active:{defaultValue:null,description:"Активная секция Menu",name:"active",required:!1,type:{name:"string"}},onActivateItem:{defaultValue:null,description:"Обработчик активации (hover) item в меню",name:"onActivateItem",required:!1,type:{name:"((id?: string) => void)"}},onSelectItem:{defaultValue:null,description:"Обработчик выбора item в меню",name:"onSelectItem",required:!1,type:{name:"((id: string) => void)"}},disableSelectedOptionHighlight:{defaultValue:null,description:"Возможность отключить подсветку выбранной опции\n(например, при множественном выборе, когда у каждой опции есть Checkbox)",name:"disableSelectedOptionHighlight",required:!1,type:{name:"boolean"}},renderTopPanel:{defaultValue:null,description:"Позволяет добавить панель сверху над выпадающим списком",name:"renderTopPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},renderBottomPanel:{defaultValue:null,description:"Позволяет добавить панель внизу под выпадающим списком",name:"renderBottomPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},onForwardCycleApprove:{defaultValue:null,description:"",name:"onForwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},onBackwardCycleApprove:{defaultValue:null,description:"",name:"onBackwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},multiSelection:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 4.9.1, будет удалено в 10.x.x версии.\nВзамен используйте disableSelectedOptionHighlight\n\nВозможность множественного выбора (опции с Checkbox)",name:"multiSelection",required:!1,type:{name:"boolean"}},onClickOutside:{defaultValue:null,description:"Позволяет обработать событие при клике вне компонента",name:"onClickOutside",required:!1,type:{name:"((e: Event) => void)"}},alignSelf:{defaultValue:null,description:"Выравнивание выпадающего меню относительно компонента https://developer.mozilla.org/en-US/docs/Web/CSS/align-self",name:"alignSelf",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"auto"'},{value:'"flex-start"'},{value:'"flex-end"'},{value:'"baseline"'},{value:'"stretch"'}]}},menuWidth:{defaultValue:null,description:"Ширина меню",name:"menuWidth",required:!1,type:{name:"string"}},menuMaxHeight:{defaultValue:null,description:"Задает максимальную высоту меню",name:"menuMaxHeight",required:!1,type:{name:"string | number"}},dropContainerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css",name:"dropContainerCssMixin",required:!1,type:{name:"RuleSet<object>"}},dropContainerClassName:{defaultValue:null,description:"Позволяет добавлять класс на контейнер выпадающего меню",name:"dropContainerClassName",required:!1,type:{name:"string"}},dropContainerStyle:{defaultValue:null,description:"Позволяет добавлять стили на контейнер выпадающего меню",name:"dropContainerStyle",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/DropMenu/stories/DropMenuRadiobutton.template.tsx#DropMenuRadiobuttonTemplate"]={docgenInfo:DropMenuRadiobuttonTemplate.__docgenInfo,name:"DropMenuRadiobuttonTemplate",path:"src/components/DropMenu/stories/DropMenuRadiobutton.template.tsx#DropMenuRadiobuttonTemplate"})}catch(__react_docgen_typescript_loader_error){}const DropMenu_stories_Desc=styled_components_browser_esm.Ay.div.withConfig({displayName:"DropMenustories__Desc",componentId:"sc-ekg5oc-0"})(["font-family:'VTB Group UI';font-size:16px;line-height:24px;"]),Description=()=>(0,jsx_runtime.jsx)(DropMenu_stories_Desc,{children:"Компонент Dropdown Menu имеет три размера и может быть с иконкой или без. Высота строки : l - 48px, m - 40px, s - 32px"});Description.displayName="Description";const DropMenu_stories={title:"Admiral-2.1/DropMenu",decorators:void 0,component:DropMenu.f,parameters:{docs:{source:{code:null}},componentSubtitle:(0,jsx_runtime.jsx)(Description,{}),design:[{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=39%3A68931"},{type:"figma",url:"https://www.figma.com/file/EGEGZsx8WhdxpmFKu8J41G/Admiral-2.1-UI-Kit?node-id=39%3A68967"}]},args:{dimension:"l"},argTypes:{dimension:{options:["l","m","s"],control:{type:"radio"}},themeBorderKind:{options:borderRadius.$t,control:{type:"radio"}},loading:{control:{type:"boolean"}},disabled:{control:{type:"boolean"}},multiSelection:{control:{type:"boolean"}},disableSelectedOptionHighlight:{control:{type:"boolean"}},isVisible:{control:{type:"boolean"}},menuWidth:{control:{type:"text"}},menuMaxHeight:{control:{type:"text"}},selected:{control:{type:"text"}},active:{control:{type:"text"}},dropContainerCssMixin:{control:!1},dropContainerClassName:{control:!1},dropContainerStyle:{control:!1},items:{control:!1},alignMenuRef:{control:!1},targetElement:{control:!1}}},SimpleStory=props=>{const[{CSSCustomProps}]=(0,external_STORYBOOK_MODULE_PREVIEW_API_.useGlobals)();return(0,jsx_runtime.jsx)(DropMenuSimpleTemplate,{...props,CSSCustomProps})};SimpleStory.displayName="SimpleStory";const SimpleExample={render:SimpleStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { Button, DropMenu, MenuItem } from '@admiral-ds/react-ui';\nimport type { DropMenuProps, RenderOptionProps, BorderRadiusType } from '@admiral-ds/react-ui';\nimport { createBorderRadiusSwapper } from '../../../../.storybook/createBorderRadiusSwapper';\n\nconst STORY_ITEMS = [\n  {\n    id: '1',\n    label: 'Option one',\n    value: 1,\n  },\n  {\n    id: '2',\n    label: 'Option two',\n    value: 2,\n  },\n  {\n    id: '3',\n    label: 'Option three',\n    value: 3,\n  },\n  {\n    id: '4',\n    label: 'Option four',\n    value: 4,\n    disabled: true,\n  },\n  {\n    id: '5',\n    label: 'Option five with long item',\n    value: 5,\n  },\n  {\n    id: '6',\n    label: 'Option six',\n    value: 6,\n  },\n  {\n    id: '7',\n    label: 'Option seven',\n    value: 7,\n  },\n];\n\nconst WrapperVertical = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst Desc = styled.div`\n  font-family: 'VTB Group UI';\n  color: var(--admiral-color-Neutral_Neutral90, ${(p) => p.theme.color['Neutral/Neutral 90']});\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst handleVisibilityChangeUnControlledState = (isVisible: boolean) => {\n  console.log('onVisibilityChange with uncontrolled state');\n  if (isVisible) {\n    console.log('Menu opened');\n  } else {\n    console.log('Menu closed');\n  }\n};\n\nexport const DropMenuSimpleTemplate = ({\n  themeBorderKind,\n  CSSCustomProps,\n  ...props\n}: DropMenuProps & { themeBorderKind?: BorderRadiusType; CSSCustomProps?: boolean }) => {\n  const [selected, setSelected] = React.useState<string | undefined>(undefined);\n\n  const model = React.useMemo(() => {\n    return STORY_ITEMS.map((item) => ({\n      id: item.id,\n      render: (options: RenderOptionProps) => (\n        <MenuItem dimension={props.dimension} {...options} key={item.id}>\n          {item.label}\n        </MenuItem>\n      ),\n    }));\n  }, [props.dimension]);\n\n  return (\n    <ThemeProvider theme={createBorderRadiusSwapper(themeBorderKind, CSSCustomProps)}>\n      <WrapperVertical>\n        <Desc>\n          Неконтроллируемое состояние видимости меню:\n          <br />\n          - isVisible не передается в DropMenu, <br />- обработчик onVisibilityChange выполняется из DropMenu\n          <br />- для открытия/закрытия меню при клике на кнопке используется обработчик handleClick из DropMenu\n          <br />\n          По умолчанию DropMenu открывает/закрывает выпадающий список при нажатии на переданный компонент, а также\n          закрывает выпадающий список при выборе опции\n        </Desc>\n        <DropMenu\n          {...props}\n          items={model}\n          onSelectItem={(id) => {\n            console.log(`selected: ${id}`);\n            setSelected(id);\n          }}\n          onVisibilityChange={handleVisibilityChangeUnControlledState}\n          selected={selected}\n          dropContainerClassName=\"dropContainerClass\"\n          renderContentProp={({ buttonRef, handleKeyDown, handleClick, statusIcon, disabled }) => {\n            return (\n              <Button\n                ref={buttonRef as React.Ref<HTMLButtonElement>}\n                loading={props.loading}\n                disabled={disabled}\n                onKeyDown={handleKeyDown}\n                onClick={handleClick}\n                dimension={props.dimension}\n              >\n                Нажми\n                {statusIcon}\n              </Button>\n            );\n          }}\n        />\n      </WrapperVertical>\n    </ThemeProvider>\n  );\n};\n"},description:{story:"Базовый пример использования DropMenu"}}},name:"Базовый пример"},CategoryStory=props=>(0,jsx_runtime.jsx)(DropMenuCategoryTemplate,{...props});CategoryStory.displayName="CategoryStory";const CategoryExample={render:CategoryStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport styled from 'styled-components';\nimport { Button, CategoryMenuItem, DropMenu, MenuItem, typography } from '@admiral-ds/react-ui';\nimport { ReactComponent as CardSolid } from '@admiral-ds/icons/build/finance/CardSolid.svg';\nimport type { DropMenuProps, RenderOptionProps } from '@admiral-ds/react-ui';\n\nconst WrapperVertical = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst Desc = styled.div`\n  font-family: 'VTB Group UI';\n  color: var(--admiral-color-Neutral_Neutral90, ${(p) => p.theme.color['Neutral/Neutral 90']});\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst handleVisibilityChangeUnControlledState = (isVisible: boolean) => {\n  console.log('onVisibilityChange with uncontrolled state');\n  if (isVisible) {\n    console.log('Menu opened');\n  } else {\n    console.log('Menu closed');\n  }\n};\n\nconst StyledAdditionalText = styled.div`\n  ${typography['Body/Body 2 Long']}\n  color: var(--admiral-color-Neutral_Neutral50, ${(p) => p.theme.color['Neutral/Neutral 50']});\n  pointer-events: none;\n`;\n\nconst StyledMenuItem = styled(MenuItem)`\n  padding: 0;\n`;\n\nconst InnerContainer = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 6px 8px;\n  margin: 0 8px 0 24px;\n  border-bottom: 1px solid var(--admiral-color-Neutral_Neutral20, ${(p) => p.theme.color['Neutral/Neutral 20']});\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst StyledDropMenu = styled(DropMenu)`\n  min-width: 400px;\n`;\n\nconst CATEGORIES = [\n  {\n    name: 'Категория 1',\n    id: '1',\n    content: [\n      {\n        id: '2',\n        label: 'Номер Карты /****45',\n        value: 1,\n      },\n      {\n        id: '3',\n        label: 'Номер Карты /****75',\n        value: 2,\n      },\n      { id: '4', label: 'Номер Карты /****22', value: 3 },\n      {\n        id: '5',\n        label: 'Номер Карты /****33',\n        value: 4,\n      },\n    ],\n  },\n  {\n    name: 'Категория 2',\n    id: '9',\n    content: [\n      {\n        id: '10',\n        label: 'Номер Карты /****21',\n        value: 5,\n      },\n      {\n        id: '11',\n        label: 'Номер Карты /****35',\n        value: 6,\n      },\n      { id: '12', label: 'Номер Карты /****39', value: 7 },\n      {\n        id: '13',\n        label: 'Номер Карты /****41',\n        value: 8,\n      },\n    ],\n  },\n];\n\nexport const DropMenuCategoryTemplate = (props: DropMenuProps) => {\n  const model = React.useMemo(() => {\n    return CATEGORIES.reduce((acc: any, item: any) => {\n      acc.push({\n        id: item.id,\n        render: (options: RenderOptionProps) => (\n          <CategoryMenuItem dimension={props.dimension} key={item.id} {...options}>\n            {item.name}\n          </CategoryMenuItem>\n        ),\n      });\n      return acc.concat(\n        item.content.map((subitem: any) => {\n          return {\n            id: subitem.id,\n            render: (options: RenderOptionProps) => (\n              <StyledMenuItem dimension={props.dimension} key={subitem.id} {...options}>\n                <InnerContainer>\n                  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                    {subitem.label} <CardSolid width={24} height={24} />\n                  </div>\n                  <StyledAdditionalText>Дополнительный текст</StyledAdditionalText>\n                </InnerContainer>\n              </StyledMenuItem>\n            ),\n          };\n        }),\n      );\n    }, []);\n  }, [props.dimension]);\n\n  const [selected, setSelected] = React.useState<string | undefined>('');\n  const [active, setActive] = React.useState<string | undefined>('');\n\n  return (\n    <>\n      <WrapperVertical>\n        <Desc>\n          Неконтроллируемое состояние видимости меню:\n          <br />\n          - isVisible не передается в DropMenu; <br />- обработчик onVisibilityChange выполняется из DropMenu;\n          <br />- для открытия/закрытия меню при клике на кнопке используется обработчик handleClick из DropMenu.\n          <br />\n          По умолчанию DropMenu открывает/закрывает выпадающий список при нажатии на переданный компонент, а также\n          закрывает выпадающий список при выборе опции.\n        </Desc>\n        <StyledDropMenu\n          {...props}\n          items={model}\n          onSelectItem={(id) => {\n            console.log(`selected: ${id}`);\n            setSelected(id);\n          }}\n          onVisibilityChange={handleVisibilityChangeUnControlledState}\n          selected={selected}\n          active={active}\n          onActivateItem={setActive}\n          renderContentProp={({ buttonRef, handleKeyDown, handleClick, statusIcon, disabled }) => {\n            return (\n              <Button\n                ref={buttonRef as React.Ref<HTMLButtonElement>}\n                loading={props.loading}\n                disabled={disabled}\n                onKeyDown={handleKeyDown}\n                onClick={handleClick}\n                dimension={props.dimension}\n              >\n                Нажми\n                {statusIcon}\n              </Button>\n            );\n          }}\n        />\n      </WrapperVertical>\n    </>\n  );\n};\n"},description:{story:"Пример с группировкой опций по категориям"}}},name:"Пример с группами"},DropMenuTooltipStory=props=>(0,jsx_runtime.jsx)(DropMenuTooltipTemplate,{...props});DropMenuTooltipStory.displayName="DropMenuTooltipStory";const DropMenuTooltipExample={render:DropMenuTooltipStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport styled from 'styled-components';\nimport type { DropMenuProps, RenderOptionProps } from '@admiral-ds/react-ui';\nimport { Button, DropMenu, MenuItem, TooltipHoc } from '@admiral-ds/react-ui';\n\nconst STORY_ITEMS = [\n  {\n    id: '1',\n    label: 'Option one',\n    value: 1,\n  },\n  {\n    id: '2',\n    label: 'Option two',\n    value: 2,\n  },\n  {\n    id: '3',\n    label: 'Привет, пупсик! Хотел тебе сказать, что ты андроид.',\n    value: 3,\n  },\n  {\n    id: '4',\n    label: 'Option four',\n    value: 4,\n  },\n  {\n    id: '5',\n    label: 'Option five',\n    value: 5,\n  },\n  {\n    id: '6',\n    label: 'Option six',\n    value: 7,\n  },\n  {\n    id: '7',\n    label: 'Option seven',\n    value: 6,\n  },\n];\n\nconst WrapperVertical = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst Desc = styled.div`\n  font-family: 'VTB Group UI';\n  color: var(--admiral-color-Neutral_Neutral90, ${(p) => p.theme.color['Neutral/Neutral 90']});\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst handleVisibilityChangeControlledState = (isVisible: boolean) => {\n  console.log('onVisibilityChange with controlled state');\n  if (isVisible) {\n    console.log('Menu opened');\n  } else {\n    console.log('Menu closed');\n  }\n};\n\nconst MenuItemWithTooltip = TooltipHoc(MenuItem);\n\nexport const DropMenuTooltipTemplate = (props: DropMenuProps) => {\n  const [selected, setSelected] = React.useState<string | undefined>(undefined);\n  const [isVisible, setIsVisible] = React.useState<boolean>(false);\n\n  const model = React.useMemo(() => {\n    return STORY_ITEMS.map((item) => {\n      const tooltip = item.label.length > 20;\n\n      return {\n        id: item.id,\n        render: (options: RenderOptionProps) =>\n          tooltip ? (\n            <MenuItemWithTooltip\n              renderContent={() => item.label}\n              dimension={props.dimension}\n              {...options}\n              key={item.id}\n            >\n              {item.label.slice(0, 17) + '...'}\n            </MenuItemWithTooltip>\n          ) : (\n            <MenuItem dimension={props.dimension} {...options} key={item.id}>\n              {item.label}\n            </MenuItem>\n          ),\n      };\n    });\n  }, [props.dimension]);\n\n  const handleVisibilityChange = (isVisible: boolean) => {\n    handleVisibilityChangeControlledState(isVisible);\n    setIsVisible(isVisible);\n  };\n\n  const handleButtonClick = (e: React.MouseEvent<HTMLElement>) => {\n    handleVisibilityChange(!isVisible);\n    props.onClick?.(e);\n  };\n\n  const handleSelectItem = (id: string) => {\n    console.log(`Option ${id} clicked`);\n    setSelected(id);\n    handleVisibilityChange(false);\n  };\n\n  const handleClickOutside = () => {\n    console.log('handleClickOutside from stories');\n    handleVisibilityChange(false);\n  };\n\n  return (\n    <WrapperVertical>\n      <Desc>\n        Состояние видимости меню полностью контроллируется вне DropMenu:\n        <br />\n        - используется кастомный обработчик клика по кнопке (handleButtonClick) для открытия/закрытия выпадающего\n        списка;\n        <br />- после выбора опции из выпадающего списка (handleSelectItem) происходит закрытие меню;\n        <br />- используется кастомный обработчик при клике вне области выпадающего списка (handleClickOutside).\n      </Desc>\n      <DropMenu\n        {...props}\n        items={model}\n        isVisible={isVisible}\n        onVisibilityChange={handleVisibilityChange}\n        onSelectItem={handleSelectItem}\n        onClickOutside={handleClickOutside}\n        selected={selected}\n        renderContentProp={({ buttonRef, handleKeyDown, statusIcon, disabled }) => {\n          return (\n            <Button\n              ref={buttonRef as React.Ref<HTMLButtonElement>}\n              loading={props.loading}\n              disabled={disabled}\n              onKeyDown={handleKeyDown}\n              onClick={handleButtonClick}\n              dimension={props.dimension}\n            >\n              Нажми\n              {statusIcon}\n            </Button>\n          );\n        }}\n      />\n    </WrapperVertical>\n  );\n};\n"},description:{story:"Для того чтобы добавить tooltip к пункту меню, его необходимо обернуть TooltipHoc"}}},name:"Пример с Tooltip"},DropMenuCheckboxStory=props=>(0,jsx_runtime.jsx)(DropMenuCheckboxTemplate,{...props});DropMenuCheckboxStory.displayName="DropMenuCheckboxStory";const DropMenuCheckboxExample={render:DropMenuCheckboxStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport styled from 'styled-components';\nimport { Button, DropMenu, MenuItemWithCheckbox } from '@admiral-ds/react-ui';\nimport type { DropMenuProps, ItemWithCheckbox, RenderOptionProps } from '@admiral-ds/react-ui';\n\nconst STORY_ITEMS: Array<ItemWithCheckbox> = [\n  {\n    id: '1',\n    label: 'Option one',\n  },\n  {\n    id: '2',\n    label: 'Option two',\n  },\n  {\n    id: '3',\n    label: 'Option three',\n  },\n  {\n    id: '4',\n    label: 'Option four',\n  },\n  {\n    id: '5',\n    label: 'Option five',\n  },\n  {\n    id: '6',\n    label: 'Option six',\n  },\n  {\n    id: '7',\n    label: 'Option seven',\n  },\n];\n\nconst WrapperVertical = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst Desc = styled.div`\n  font-family: 'VTB Group UI';\n  color: var(--admiral-color-Neutral_Neutral90, ${(p) => p.theme.color['Neutral/Neutral 90']});\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst handleVisibilityChangeControlledState = (isVisible: boolean) => {\n  console.log('onVisibilityChange with controlled state');\n  if (isVisible) {\n    console.log('Menu opened');\n  } else {\n    console.log('Menu closed');\n  }\n};\n\nexport const DropMenuCheckboxTemplate = (props: DropMenuProps) => {\n  const [innerState, setInnerState] = React.useState<Array<ItemWithCheckbox>>(STORY_ITEMS.map((item) => item));\n  const [activeOption, setActiveOption] = React.useState<string | undefined>(innerState[0].id);\n  const [selectedOption, setSelectedOption] = React.useState<string | undefined>();\n  const [isVisible, setIsVisible] = React.useState<boolean>(false);\n\n  const model = React.useMemo(() => {\n    return innerState.map((item) => ({\n      id: item.id,\n      render: (options: RenderOptionProps) => (\n        <MenuItemWithCheckbox\n          key={item.id}\n          id={item.id}\n          dimension={props.dimension}\n          checked={!!item.checked}\n          {...options}\n        >\n          {item.label}\n        </MenuItemWithCheckbox>\n      ),\n    }));\n  }, [innerState, activeOption, props.dimension]);\n\n  const handleActivateItem = (id: string | undefined) => {\n    setActiveOption(id);\n  };\n\n  const handleVisibilityChange = (isVisible: boolean) => {\n    handleVisibilityChangeControlledState(isVisible);\n    setIsVisible(isVisible);\n  };\n\n  const handleSelectItem = (id: string) => {\n    console.log(`Option ${id} clicked`);\n    const updatedInnerState = [...innerState];\n    const itemToUpdate = updatedInnerState.find((item) => item.id === id);\n    if (itemToUpdate) {\n      itemToUpdate.checked = !itemToUpdate.checked;\n    }\n    setInnerState(updatedInnerState);\n    setSelectedOption(undefined);\n  };\n\n  const handleButtonClick = (e: React.MouseEvent<HTMLElement>) => {\n    handleVisibilityChange(!isVisible);\n    props.onClick?.(e);\n  };\n\n  const handleClickOutside = () => {\n    console.log('handleClickOutside from stories');\n    handleVisibilityChange(false);\n  };\n\n  return (\n    <WrapperVertical>\n      <Desc>\n        Состояние видимости меню полностью контроллируется вне DropMenu:\n        <br />\n        - используется кастомный обработчик клика по кнопке (handleButtonClick) для открытия/закрытия выпадающего\n        списка;\n        <br />- после выбора опции из выпадающего списка (handleSelectItem) происходит закрытие меню;\n        <br />- используется кастомный обработчик при клике вне области выпадающего списка (handleClickOutside).\n      </Desc>\n      <DropMenu\n        {...props}\n        items={model}\n        active={activeOption}\n        onActivateItem={handleActivateItem}\n        selected={selectedOption}\n        onSelectItem={handleSelectItem}\n        isVisible={isVisible}\n        onVisibilityChange={handleVisibilityChange}\n        onClickOutside={handleClickOutside}\n        disableSelectedOptionHighlight={true}\n        renderContentProp={({ buttonRef, handleKeyDown, statusIcon, disabled }) => {\n          return (\n            <Button\n              ref={buttonRef as React.Ref<HTMLButtonElement>}\n              loading={props.loading}\n              disabled={disabled}\n              onKeyDown={handleKeyDown}\n              onClick={handleButtonClick}\n              dimension={props.dimension}\n            >\n              Нажми\n              {statusIcon}\n            </Button>\n          );\n        }}\n      />\n    </WrapperVertical>\n  );\n};\n"},description:{story:"Пример меню с пунктами, содержащими Checkbox"}}},name:"Пример с Checkbox"},DropMenuRadiobuttonStory=props=>(0,jsx_runtime.jsx)(DropMenuRadiobuttonTemplate,{...props});DropMenuRadiobuttonStory.displayName="DropMenuRadiobuttonStory";const DropMenuRadiobuttonExample={render:DropMenuRadiobuttonStory,parameters:{docs:{source:{code:"import * as React from 'react';\nimport styled from 'styled-components';\nimport { Button, DropMenu, MenuItem, RadioButton } from '@admiral-ds/react-ui';\nimport type { DropMenuProps, RenderOptionProps } from '@admiral-ds/react-ui';\n\nconst STORY_ITEMS = [\n  {\n    id: '1',\n    label: 'Option one',\n    value: 1,\n  },\n  {\n    id: '2',\n    label: 'Option two',\n    value: 2,\n  },\n  {\n    id: '3',\n    label: 'Option three',\n    value: 3,\n  },\n  {\n    id: '4',\n    label: 'Option four',\n    value: 4,\n    disabled: true,\n  },\n  {\n    id: '5',\n    label: 'Option five with very very long text',\n    value: 5,\n  },\n  {\n    id: '6',\n    label: 'Option six',\n    value: 6,\n  },\n  {\n    id: '7',\n    label: 'Option seven',\n    value: 7,\n  },\n];\n\nconst WrapperVertical = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst Desc = styled.div`\n  font-family: 'VTB Group UI';\n  color: var(--admiral-color-Neutral_Neutral90, ${(p) => p.theme.color['Neutral/Neutral 90']});\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst handleVisibilityChangeUnControlledState = (isVisible: boolean) => {\n  console.log('onVisibilityChange with uncontrolled state');\n  if (isVisible) {\n    console.log('Menu opened');\n  } else {\n    console.log('Menu closed');\n  }\n};\n\nexport const DropMenuRadiobuttonTemplate = (props: DropMenuProps) => {\n  const [selected, setSelected] = React.useState<string | undefined>(undefined);\n  const [checkedState, setCheckedState] = React.useState(STORY_ITEMS.map((item) => ({ id: item.id, checked: false })));\n\n  const model = React.useMemo(() => {\n    return STORY_ITEMS.map((item, index) => ({\n      id: item.id,\n      render: (options: RenderOptionProps) => (\n        <MenuItem dimension={props.dimension} {...options} key={item.id}>\n          <RadioButton\n            dimension={props.dimension !== 's' ? 'm' : props.dimension}\n            disabled={item.disabled}\n            key={item.id}\n            checked={checkedState[index].checked}\n            onChange={() => false}\n          >\n            {item.label}\n          </RadioButton>\n        </MenuItem>\n      ),\n      disabled: item.disabled,\n    }));\n  }, [props.dimension, checkedState]);\n\n  return (\n    <WrapperVertical>\n      <Desc>\n        Неконтроллируемое состояние видимости меню:\n        <br />\n        - isVisible не передается в DropMenu; <br />- обработчик onVisibilityChange выполняется из DropMenu;\n        <br />- для открытия/закрытия меню при клике на кнопке используется обработчик handleClick из DropMenu.\n        <br />\n        По умолчанию DropMenu открывает/закрывает выпадающий список при нажатии на переданный компонент, а также\n        закрывает выпадающий список при выборе опции.\n      </Desc>\n      <DropMenu\n        {...props}\n        items={model}\n        onSelectItem={(id) => {\n          console.log(`selected: ${id}`);\n          const newCheckedState = checkedState.map((item) => ({\n            ...item,\n            checked: item.id === id || item.id === selected ? !item.checked : item.checked,\n          }));\n          setCheckedState(newCheckedState);\n          setSelected(id);\n        }}\n        onVisibilityChange={handleVisibilityChangeUnControlledState}\n        selected={selected}\n        renderContentProp={({ buttonRef, handleKeyDown, handleClick, statusIcon, disabled }) => {\n          return (\n            <Button\n              ref={buttonRef as React.Ref<HTMLButtonElement>}\n              loading={props.loading}\n              disabled={disabled}\n              onKeyDown={handleKeyDown}\n              onClick={handleClick}\n              dimension={props.dimension}\n            >\n              Нажми\n              {statusIcon}\n            </Button>\n          );\n        }}\n      />\n    </WrapperVertical>\n  );\n};\n"},description:{story:"Пример меню с пунктами, содержащими RadioButton"}}},name:"Пример с Radiobutton"};SimpleExample.parameters={...SimpleExample.parameters,docs:{...SimpleExample.parameters?.docs,source:{originalSource:"{\n  render: SimpleStory,\n  parameters: {\n    docs: {\n      source: {\n        code: DropMenuSimpleRaw\n      },\n      description: {\n        story: 'Базовый пример использования DropMenu'\n      }\n    }\n  },\n  name: 'Базовый пример'\n}",...SimpleExample.parameters?.docs?.source}}},CategoryExample.parameters={...CategoryExample.parameters,docs:{...CategoryExample.parameters?.docs,source:{originalSource:"{\n  render: CategoryStory,\n  parameters: {\n    docs: {\n      source: {\n        code: DropMenuCategoryRaw\n      },\n      description: {\n        story: 'Пример с группировкой опций по категориям'\n      }\n    }\n  },\n  name: 'Пример с группами'\n}",...CategoryExample.parameters?.docs?.source}}},DropMenuTooltipExample.parameters={...DropMenuTooltipExample.parameters,docs:{...DropMenuTooltipExample.parameters?.docs,source:{originalSource:"{\n  render: DropMenuTooltipStory,\n  parameters: {\n    docs: {\n      source: {\n        code: DropMenuTooltipRaw\n      },\n      description: {\n        story: 'Для того чтобы добавить tooltip к пункту меню, его необходимо обернуть TooltipHoc'\n      }\n    }\n  },\n  name: 'Пример с Tooltip'\n}",...DropMenuTooltipExample.parameters?.docs?.source}}},DropMenuCheckboxExample.parameters={...DropMenuCheckboxExample.parameters,docs:{...DropMenuCheckboxExample.parameters?.docs,source:{originalSource:"{\n  render: DropMenuCheckboxStory,\n  parameters: {\n    docs: {\n      source: {\n        code: DropMenuCheckboxRaw\n      },\n      description: {\n        story: 'Пример меню с пунктами, содержащими Checkbox'\n      }\n    }\n  },\n  name: 'Пример с Checkbox'\n}",...DropMenuCheckboxExample.parameters?.docs?.source}}},DropMenuRadiobuttonExample.parameters={...DropMenuRadiobuttonExample.parameters,docs:{...DropMenuRadiobuttonExample.parameters?.docs,source:{originalSource:"{\n  render: DropMenuRadiobuttonStory,\n  parameters: {\n    docs: {\n      source: {\n        code: DropMenuRadiobuttonRaw\n      },\n      description: {\n        story: 'Пример меню с пунктами, содержащими RadioButton'\n      }\n    }\n  },\n  name: 'Пример с Radiobutton'\n}",...DropMenuRadiobuttonExample.parameters?.docs?.source}}};const __namedExportsOrder=["SimpleExample","CategoryExample","DropMenuTooltipExample","DropMenuCheckboxExample","DropMenuRadiobuttonExample"]},"./node_modules/@admiral-ds/icons/build/finance/CardSolid.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>SvgCardSolid});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}var SvgCardSolid=function SvgCardSolid(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fill:"#717681",fillRule:"evenodd",d:"M6 19c-1.66 0-3-1.35-3-3V8c0-1.66 1.34-3 3-3h12c.1 0 .2 0 .3.01C19.81 5.16 21 6.44 21 8v8c0 1.65-1.35 3-3 3zm.01-10.11c0-.43.36-.77.79-.77h1.93c.43 0 .79.34.79.77v1.96c0 .43-.36.77-.79.77H6.8c-.43 0-.79-.34-.79-.77zm.65 5.94c-.36 0-.65.29-.65.65 0 .35.29.65.65.65h1.7c.36 0 .65-.3.65-.65 0-.36-.29-.65-.65-.65zm8.35.65c0-.36.29-.65.65-.65h1.69c.36 0 .65.29.65.65 0 .35-.29.65-.65.65h-1.69c-.36 0-.65-.3-.65-.65m-3.86-.65c-.36 0-.65.29-.65.65 0 .35.29.65.65.65h1.69c.36 0 .65-.3.65-.65 0-.36-.29-.65-.65-.65z"})))};__webpack_require__.p},"./node_modules/@admiral-ds/icons/build/system/ChevronDownOutline.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>SvgChevronDownOutline});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}var SvgChevronDownOutline=function SvgChevronDownOutline(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fill:"#717681",d:"M5.22 8.56c0-.18.07-.35.21-.48.27-.24.68-.22.92.04l5.74 6.36 5.55-6.4a.65.65 0 0 1 .92-.04c.26.24.28.65.04.92l-5.99 6.89c-.28.31-.76.31-1.04 0L5.39 9a.63.63 0 0 1-.17-.44"})))};__webpack_require__.p},"./node_modules/@admiral-ds/icons/build/system/SmallArrowRightOutline.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>SvgSmallArrowRightOutline});var _path,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}var SvgSmallArrowRightOutline=function SvgSmallArrowRightOutline(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24"},props),_path||(_path=react__WEBPACK_IMPORTED_MODULE_0__.createElement("path",{fill:"#717681",fillRule:"evenodd",d:"M9.99 16.21c-.18 0-.35-.07-.48-.21a.66.66 0 0 1 .04-.92l3.49-3.15-3.48-3.02a.65.65 0 0 1-.04-.92c.24-.26.65-.28.92-.04l3.97 3.46c.31.28.31.76 0 1.04l-3.98 3.59c-.13.12-.28.17-.44.17"})))};__webpack_require__.p},"./src/components/DropMenu/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{f:()=>DropMenu});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),_common_keyboardKey__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/components/common/keyboardKey.js"),_src_components_OpenStatusButton__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/components/OpenStatusButton.tsx"),_src_components_DropdownContainer__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/DropdownContainer/index.tsx"),_src_components_Menu__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/Menu/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const StyledMenu=(0,styled_components__WEBPACK_IMPORTED_MODULE_2__.Ay)(_src_components_Menu__WEBPACK_IMPORTED_MODULE_3__.W).withConfig({displayName:"DropMenu__StyledMenu",componentId:"sc-19qa2e-0"})(["width:",";"],(({$width})=>$width||"auto")),DropMenuContainer=(0,styled_components__WEBPACK_IMPORTED_MODULE_2__.Ay)(_src_components_DropdownContainer__WEBPACK_IMPORTED_MODULE_4__.a).withConfig({displayName:"DropMenu__DropMenuContainer",componentId:"sc-19qa2e-1"})(["",""],(p=>p.$dropContainerCssMixin||"")),DropMenu=(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((({dimension="m",menuWidth,disabled=!1,loading=!1,alignSelf="flex-end",onClose,onOpen,items,selected,active,onSelectItem,onActivateItem,onChange,onClick,onKeyDown,alignMenuRef,targetElement,renderContentProp,menuMaxHeight,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,multiSelection=!1,disableSelectedOptionHighlight=!1,isVisible,onVisibilityChange=()=>{},onClickOutside,renderTopPanel,renderBottomPanel,onForwardCycleApprove,onBackwardCycleApprove,...props},ref)=>{const[isMenuOpenState,setIsMenuOpenState]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),btnRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),targetNode=targetElement||alignMenuRef?.current||btnRef.current,isMenuOpen=isVisible??isMenuOpenState,setIsMenuOpen=newMenuOpenState=>{setIsMenuOpenState(newMenuOpenState),onVisibilityChange(newMenuOpenState)},closeMenu=()=>{setIsMenuOpen(!1),onClose?.(),btnRef.current?.focus()};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[renderContentProp({disabled,buttonRef:btnRef,handleKeyDown:e=>{const code=_common_keyboardKey__WEBPACK_IMPORTED_MODULE_5__.r.getCode(e);switch(onKeyDown?.(e),code){case _common_keyboardKey__WEBPACK_IMPORTED_MODULE_5__.r.Escape:isMenuOpen&&closeMenu();break;case _common_keyboardKey__WEBPACK_IMPORTED_MODULE_5__.r.Enter:case _common_keyboardKey__WEBPACK_IMPORTED_MODULE_5__.r[" "]:isMenuOpen||(e.stopPropagation(),setIsMenuOpen(!0),onOpen?.(),e.preventDefault())}},handleClick:e=>{isMenuOpen?onClose?.():onOpen?.(),setIsMenuOpen(!isMenuOpen),onClick?.(e)},statusIcon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_components_OpenStatusButton__WEBPACK_IMPORTED_MODULE_6__.$,{$isOpen:isMenuOpen,"aria-hidden":!0}),menuState:isMenuOpen}),isMenuOpen&&!loading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DropMenuContainer,{ref,role:"listbox",alignSelf,targetElement:targetNode,onClickOutside:e=>{e.target&&btnRef.current?.contains(e.target)||(onClickOutside?onClickOutside(e):(setIsMenuOpen(!1),onClose?.()))},$dropContainerCssMixin:dropContainerCssMixin,className:dropContainerClassName,style:dropContainerStyle,...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(StyledMenu,{maxHeight:menuMaxHeight,$width:menuWidth,model:items,selected,onSelectItem:id=>{onChange?.(id),onSelectItem?.(id),void 0!==isVisible||multiSelection||disableSelectedOptionHighlight||closeMenu()},dimension,active,onActivateItem,multiSelection,disableSelectedOptionHighlight,renderTopPanel,renderBottomPanel,onForwardCycleApprove,onBackwardCycleApprove})})]})}));DropMenu.displayName="DropMenu";try{DropMenu.displayName="DropMenu",DropMenu.__docgenInfo={description:"",displayName:"DropMenu",props:{dimension:{defaultValue:{value:"m"},description:"Размер компонента",name:"dimension",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'}]}},loading:{defaultValue:{value:"false"},description:"Состояние загрузки",name:"loading",required:!1,type:{name:"boolean"}},items:{defaultValue:null,description:"Опции выпадающего списка",name:"items",required:!0,type:{name:"MenuModelItemProps[]"}},selected:{defaultValue:null,description:"Выбранная опция",name:"selected",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте onSelectItem\n\nКолбек на изменение выбранной опции",name:"onChange",required:!1,type:{name:"((id: string) => void)"}},onOpen:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на открытие меню",name:"onOpen",required:!1,type:{name:"(() => void)"}},onClose:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 9.x.x версии.\nВзамен используйте isVisible and onVisibilityChange\n\nКолбек на закрытие меню",name:"onClose",required:!1,type:{name:"(() => void)"}},disabled:{defaultValue:{value:"false"},description:"Отключение компонента",name:"disabled",required:!1,type:{name:"boolean"}},alignMenuRef:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.\nВзамен используйте параметр targetElement.\n\nКомпонент, относительно которого необходимо выравнивать выпадающее меню",name:"alignMenuRef",required:!1,type:{name:"RefObject<HTMLElement>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого позиционируется выпадающее меню",name:"targetElement",required:!1,type:{name:"Element | null"}},renderContentProp:{defaultValue:null,description:"Компонент, для которого необходимо Menu",name:"renderContentProp",required:!0,type:{name:"(options: RenderContentProps) => ReactNode"}},isVisible:{defaultValue:null,description:"Видимость выпадающего меню",name:"isVisible",required:!1,type:{name:"boolean"}},onVisibilityChange:{defaultValue:{value:"() => undefined"},description:"Колбек на изменение видимости меню",name:"onVisibilityChange",required:!1,type:{name:"((isVisible: boolean) => void)"}},active:{defaultValue:null,description:"Активная секция Menu",name:"active",required:!1,type:{name:"string"}},onActivateItem:{defaultValue:null,description:"Обработчик активации (hover) item в меню",name:"onActivateItem",required:!1,type:{name:"((id?: string) => void)"}},onSelectItem:{defaultValue:null,description:"Обработчик выбора item в меню",name:"onSelectItem",required:!1,type:{name:"((id: string) => void)"}},disableSelectedOptionHighlight:{defaultValue:{value:"false"},description:"Возможность отключить подсветку выбранной опции\n(например, при множественном выборе, когда у каждой опции есть Checkbox)",name:"disableSelectedOptionHighlight",required:!1,type:{name:"boolean"}},renderTopPanel:{defaultValue:null,description:"Позволяет добавить панель сверху над выпадающим списком",name:"renderTopPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},renderBottomPanel:{defaultValue:null,description:"Позволяет добавить панель внизу под выпадающим списком",name:"renderBottomPanel",required:!1,type:{name:"((props: RenderPanelProps) => ReactNode)"}},onForwardCycleApprove:{defaultValue:null,description:"",name:"onForwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},onBackwardCycleApprove:{defaultValue:null,description:"",name:"onBackwardCycleApprove",required:!1,type:{name:"(() => boolean)"}},multiSelection:{defaultValue:{value:"false"},description:"@deprecated Помечено как deprecated в версии 4.9.1, будет удалено в 10.x.x версии.\nВзамен используйте disableSelectedOptionHighlight\n\nВозможность множественного выбора (опции с Checkbox)",name:"multiSelection",required:!1,type:{name:"boolean"}},onClickOutside:{defaultValue:null,description:"Позволяет обработать событие при клике вне компонента",name:"onClickOutside",required:!1,type:{name:"((e: Event) => void)"}},alignSelf:{defaultValue:{value:"flex-end"},description:"Выравнивание выпадающего меню относительно компонента https://developer.mozilla.org/en-US/docs/Web/CSS/align-self",name:"alignSelf",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"auto"'},{value:'"flex-start"'},{value:'"flex-end"'},{value:'"baseline"'},{value:'"stretch"'}]}},menuWidth:{defaultValue:null,description:"Ширина меню",name:"menuWidth",required:!1,type:{name:"string"}},menuMaxHeight:{defaultValue:null,description:"Задает максимальную высоту меню",name:"menuMaxHeight",required:!1,type:{name:"string | number"}},dropContainerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css",name:"dropContainerCssMixin",required:!1,type:{name:"RuleSet<object>"}},dropContainerClassName:{defaultValue:null,description:"Позволяет добавлять класс на контейнер выпадающего меню",name:"dropContainerClassName",required:!1,type:{name:"string"}},dropContainerStyle:{defaultValue:null,description:"Позволяет добавлять стили на контейнер выпадающего меню",name:"dropContainerStyle",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/DropMenu/index.tsx#DropMenu"]={docgenInfo:DropMenu.__docgenInfo,name:"DropMenu",path:"src/components/DropMenu/index.tsx#DropMenu"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/DropdownContainer/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>DropdownContainer,a:()=>StyledDropdownContainer});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),_src_components_common_hooks_useClickOutside__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/components/common/hooks/useClickOutside.ts"),_src_components_common_utils_parseShadowFromTheme__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./src/components/common/utils/parseShadowFromTheme.ts"),_src_components_PositionInPortal__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/PositionInPortal.tsx"),_src_components_common_hooks_useInterval__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/components/common/hooks/useInterval.ts"),_src_components_common_utils_refSetter__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/components/common/utils/refSetter.ts"),_src_components_DropdownProvider__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/DropdownProvider.tsx"),_src_components_themes_borderRadius__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/components/themes/borderRadius.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const Container=styled_components__WEBPACK_IMPORTED_MODULE_2__.Ay.div.withConfig({displayName:"DropdownContainer__Container",componentId:"sc-1eulg01-0"})(["pointer-events:initial;margin:8px 0;flex:0 0 auto;",";max-width:calc(100vw - 32px);opacity:0;transition-delay:200ms;transition-property:opacity;&:focus-visible{border:2px solid blue;}",""],(p=>p.$alignSelf?`align-self: ${p.$alignSelf};`:""),(p=>p.$dropContainerCssMixin)),FakeTarget=styled_components__WEBPACK_IMPORTED_MODULE_2__.Ay.div.withConfig({displayName:"DropdownContainer__FakeTarget",componentId:"sc-1eulg01-1"})(["pointer-events:none;height:100%;flex:0 0 auto;"]),Portal=(0,styled_components__WEBPACK_IMPORTED_MODULE_2__.Ay)(_src_components_PositionInPortal__WEBPACK_IMPORTED_MODULE_3__.l).withConfig({displayName:"DropdownContainer__Portal",componentId:"sc-1eulg01-2"})(["display:flex;flex-direction:",";flex-wrap:nowrap;"],(p=>p.$reverse?"column-reverse":"column")),DropdownContainer=(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((({targetRef,targetElement,onClickOutside=()=>null,className="",alignSelf,dropContainerCssMixin,...props},ref)=>{const containerRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[displayUpward,setDisplayUpward]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),targetNode=targetElement??targetRef?.current,{addDropdown,removeDropdown,dropdowns}=(0,_src_components_DropdownProvider__WEBPACK_IMPORTED_MODULE_4__.BK)(containerRef),{rootRef}=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_src_components_DropdownProvider__WEBPACK_IMPORTED_MODULE_4__.rO);(0,_src_components_common_hooks_useClickOutside__WEBPACK_IMPORTED_MODULE_5__.L)([containerRef],(e=>{(0,_src_components_DropdownProvider__WEBPACK_IMPORTED_MODULE_4__.TT)(e,dropdowns)&&onClickOutside(e)})),(0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)((()=>{containerRef.current!==document.activeElement&&containerRef?.current?.focus()}),[]);const checkDropdownPosition=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((()=>{const node=containerRef.current;if(node&&targetNode){const rect=node.getBoundingClientRect(),targetRect=targetNode.getBoundingClientRect(),viewportHeight=window.innerHeight,viewportWidth=window.innerWidth;if(viewportHeight-rect.bottom<0&&targetRect.top>viewportHeight-targetRect.bottom?displayUpward||setDisplayUpward(!0):(targetRect.bottom+(targetRect.top-rect.top)<viewportHeight-8||targetRect.top<viewportHeight-targetRect.bottom)&&displayUpward&&setDisplayUpward(!1),alignSelf&&"auto"!==alignSelf)return;const rectWidth=rect.right-rect.left,enoughWidthOnTheRight=viewportWidth-targetRect.left>=rectWidth,enoughWidthOnTheLeft=targetRect.right-16>=rectWidth,containerWiderTarget=rectWidth>targetRect.width;if(enoughWidthOnTheLeft||enoughWidthOnTheRight)node.style.transform="translateX(0)",enoughWidthOnTheLeft&&enoughWidthOnTheRight?node.style.alignSelf="flex-end":containerWiderTarget&&!enoughWidthOnTheLeft&&enoughWidthOnTheRight?node.style.alignSelf="flex-start":containerWiderTarget&&!enoughWidthOnTheRight&&enoughWidthOnTheLeft&&(node.style.alignSelf="flex-end");else{node.style.alignSelf="center";const offset=(viewportWidth-rect.width)/2-(targetRect.left-(rectWidth-targetRect.width)/2);node.style.transform=`translateX(${offset}px)`}}}),[displayUpward,targetRef,targetElement]);return(0,_src_components_common_hooks_useInterval__WEBPACK_IMPORTED_MODULE_6__.$)(checkDropdownPosition,100),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{containerRef.current&&(containerRef.current.style.opacity="1")}),[]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)((()=>(addDropdown?.(containerRef),()=>{removeDropdown?.(containerRef)})),[]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(Portal,{targetElement:targetNode,$reverse:displayUpward,rootRef,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FakeTarget,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Container,{ref:(0,_src_components_common_utils_refSetter__WEBPACK_IMPORTED_MODULE_7__.d)(ref,containerRef),...props,className:className+" dropdown-container",$alignSelf:alignSelf,$dropContainerCssMixin:dropContainerCssMixin})]})})}));DropdownContainer.displayName="DropdownContainer";const StyledDropdownContainer=(0,styled_components__WEBPACK_IMPORTED_MODULE_2__.Ay)(DropdownContainer).withConfig({displayName:"DropdownContainer__StyledDropdownContainer",componentId:"sc-1eulg01-3"})(["box-shadow:var(--admiral-box-shadow-Shadow08,",");border-radius:var(--admiral-border-radius-Medium,",");overflow:hidden;width:max-content;"],(p=>(0,_src_components_common_utils_parseShadowFromTheme__WEBPACK_IMPORTED_MODULE_8__.C)(p.theme.shadow["Shadow 08"])),(p=>(0,_src_components_themes_borderRadius__WEBPACK_IMPORTED_MODULE_9__.VM)(p.theme.shape)));StyledDropdownContainer.displayName="StyledDropdownContainer";try{DropdownContainer.displayName="DropdownContainer",DropdownContainer.__docgenInfo={description:"",displayName:"DropdownContainer",props:{targetRef:{defaultValue:null,description:"@deprecated Помечено как deprecated в версии 6.1.0, будет удалено в 8.x.x версии.\nВзамен используйте параметр targetElement.\n\nRef на элемент, относительно которого позиционируется выпадающее меню",name:"targetRef",required:!1,type:{name:"RefObject<HTMLElement>"}},targetElement:{defaultValue:null,description:"Элемент, относительно которого позиционируется выпадающее меню\nВ 8.x.x версии данный параметр станет обязательным, заменив собой targetRef",name:"targetElement",required:!1,type:{name:"Element | null"}},onClickOutside:{defaultValue:{value:"() => null"},description:"Позволяет обработать событие при клике вне компонента",name:"onClickOutside",required:!1,type:{name:"((e: Event) => void)"}},alignSelf:{defaultValue:null,description:"Позволяет выравнивать контейнер с компонентами относительно тарджет компонента\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/align-self",name:"alignSelf",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"auto"'},{value:'"flex-start"'},{value:'"flex-end"'},{value:'"baseline"'},{value:'"stretch"'}]}},dropContainerCssMixin:{defaultValue:null,description:"Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css",name:"dropContainerCssMixin",required:!1,type:{name:"RuleSet<object>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/DropdownContainer/index.tsx#DropdownContainer"]={docgenInfo:DropdownContainer.__docgenInfo,name:"DropdownContainer",path:"src/components/DropdownContainer/index.tsx#DropdownContainer"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/OpenStatusButton.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>OpenStatusButton});var _admiral_ds_icons_build_system_ChevronDownOutline_svg__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@admiral-ds/icons/build/system/ChevronDownOutline.svg");const OpenStatusButton=(0,__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js").Ay)(_admiral_ds_icons_build_system_ChevronDownOutline_svg__WEBPACK_IMPORTED_MODULE_0__.h).withConfig({displayName:"OpenStatusButton",componentId:"sc-126g2c3-0"})(["transition:transform 0.3s ease-in-out;transform:rotate(","deg);& *[fill^='#']{fill:",";}&:hover *[fill^='#']{fill:",";}&[data-disabled]{pointer-events:none;*[fill^='#']{fill:var(--admiral-color-Neutral_Neutral30,",");}}"],(p=>p.$isOpen?180:0),(({appearance,theme})=>"white"===appearance?`var(--admiral-color-Special_StaticWhite, ${theme.color["Special/Static White"]})`:`var(--admiral-color-Neutral_Neutral50, ${theme.color["Neutral/Neutral 50"]})`),(p=>"white"===p.appearance?"":`var(--admiral-color-Primary_Primary70, ${p.theme.color["Primary/Primary 70"]})`),(p=>p.theme.color["Neutral/Neutral 30"]))},"./src/components/common/hooks/useInterval.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>useInterval});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function useInterval(callback,delay){const intervalRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),callbackRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{callbackRef.current=callback}),[callback]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{if("number"==typeof delay)return intervalRef.current=window.setInterval((()=>callbackRef.current()),delay),()=>window.clearInterval(intervalRef.current||0)}),[delay]),intervalRef}}}]);